// Specification untuk soal knapsack Polo the Penguin and the Test
class Knapsack{
	/*
	 * variable declaration
	 * akan digunakan untuk men-generate atribut private,
	 * fungsi untuk membaca, menulis, dan validator variable tersebut
	 */
	
	// variable untuk input
	int tc (subtask 1 : 1..100) // tc is number of test cases
	int n (subtask 1 : 1..100) // n is number of questions
	int w (subtask 1 : 1..100) // w is time limit for study
	int[n] c (subtask 1 : 1..100) // c[i] is the number of tests that will contain this question
	int[n] p (subtask 1 : 1..100) // p[i] is the number of points that he will get for correctly answering this question on each of tests
	int[n] t (subtask 1 : 1..100) // t[i] is the amount of time (in minutes) that he needs to spend to learn this question
	
	// variable untuk output
	int point; // point is maximal possible total number of points he can get for all tests if he studies for no more than W minutes
	
	score {
		(1 : 100)
	}
	
	/*
	 * input format
	 */
	input {
		1 (tc)
		for (k,tc) {
			1 (n,w) // 1 baris pertama berisi 2 buah integer n dan w
			1 (c<n>) // 1 baris berikutnya berisi n buah integer c
			1 (p<n>) // 1 baris berikutnya berisi n buah integer p
			1 (t<n>) // 1 baris berikutnya berisi n buah integer t
		}
	}
	
	/*
	 * output format
	 */
	output {
		1 (points) // 1 baris berikutnya berisi 1 buah integer points
	}
	
	MR 1 {
		(select(k,l) where 1<=k and k<l and l<=n and c[k]!=c[l] or p[k]!=p[l] or t[k]!=t[l])
		followup {
			(c` = swap(c,k,l))
			(p` = swap(p,k,l))
			(t` = swap(t,k,l))
		}
		check {
			
		}
		
	}
	
	MR 3 {
		(select(k) where y[k]==0)
		def cc = (random(0..100))
		followup {
			(t`[k] = t[k]+cc)
		}
		check {
			
		}
	}
	
	MR 4 {
		(select(k) where y[k]==0)
		def cc = (random(0..100))
		followup {
			(p`[k] = p[k]-cc)
		}
		check {
			
		}
	}
	
	MR 5 {
		def c1 = (sum(w) where y==1)
		followup {
			(c`[1] = c1)
		}
		check {
			
		}
	}
	
	MR 6 {
		def cnew = (min(c) where y[j] != 0)
		def pnew = (min(p) where y[j] != 0)
		def tnew = (max(t) where y[j] != 0)
		followup {
			(n` = n+1)
			(c` = add(c,pnew))
			(p` = add(p,pnew))
			(t` = add(t,wnew))
		}
		check {
			
		}
	}
	
	MR 7 {
		(select(k) where y[k]==0)
		followup {
			(n` = n-1)
			(c` = remove(c,k))
			(p` = remove(p,k))
			(t` = remove(t,k))
		}
		check {
			
		}
	}
	
	MR 8 {
		(select(k) where y[k]==1)
		followup {
			(n` = n-1)
			(c`[1] = c[1]-t[k])
			(c` = remove(c,k))
			(p` = remove(p,k))
			(t` = remove(t,k))
		}
		check {
			(tp` = tp-p[k]*c[k])
		}
	}
	
	MR 9 {
		(select(k,l) where 1<=k and k<l and l<=n and y[k]==1 and y[l]==1)
		followup {
			(c`[k] = 1)
			(p`[k] = c[k]*p[k]+c[l]*p[l])
			(t`[k] = t[k]+t[l])
			(n` = n-1)
			(c` = remove(c,l))
			(p` = remove(p,l))
			(t` = remove(t,l))
		}
		check {
			
		}
	}
	
	MR 11 {
		(select(k) where y[k]==1)
		def cc = (random(0..100))
		followup {
			(p`[k] = p[k]+cc)
		}
		check {
			(tp` = tp+cc*c[k])
		}
	}
	
	MR 12 {
		(select(k) where y[k]==1)
		def cc = (random(0..100))
		followup {
			(c`[k] = c[k]+cc)
		}
		check {
			(tp` = tp+cc*p[k])
		}
	}
}
