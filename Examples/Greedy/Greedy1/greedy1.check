// Specification untuk soal greedy key lock problem
class Greedy{
/*
	 * variable declaration
	 * akan digunakan untuk men-generate atribut private,
	 * fungsi untuk membaca, menulis, dan validator variable tersebut
	 */
	
	// variable untuk input
	int x (1..100) // x adalah variabel jumlah key (baris)
	int y (1..100) // y adalah variabel jumlah lock (kolom)
	int[x][y] m (0..1) // m adalah matriks yang berisi relasi antara ki an lj

	// variable untuk output
	int numKey(1..x)
	int[x] o(1..x) // o berisi keys yang digunakan untuk membuka semua lock

	/*
	 * input format
	 */
	input {
		1 (x,y) // 1 baris pertama berisi 2 buah integer x dan y
		x (m[i]<y>) // x baris berikutnya berisi y buah integer m
	}
	
	/*
	 * output format
	 */
	output {
		1 (numKey) // 1 baris berikutnya berisi 1 buah integer numKey
		1 (o<numKey>) // 1 baris berikutnya berisi numKey buah integer o
	}
	
	MR 1 {
		(def y1 = y-1)
		(select(k,l:0..y1) where k<l)
		followup {
			(m` = swapColumn(m,k,l))
		}
		check {
			
		}
	}
	
	MR 2 {
		followup {
			(x` = x+1)
			(m` = addRow(m))
			for (j,y){
				(m`[x][j] = 0)
			}
		}
		check {
			
		}
	}
	
	MR 3 {
		followup {
			(y` = y+1)
			(m` = addColumn(m))
			for (i,x){
				(m`[i][y] = 0)
			}
		}
		check {
			
		}
	}
	
	MR 4 {
		followup {
			for (j,numKey){
				(def temp = o[j])
				(m`[j] = m[temp])
			}
		}
		check {
			
		}
	}
	
	MR 5 {
		(def nk = numKey-2)
		(def k = random(0..nk))
		followup {
			(x` = x+1)
			(m` = addRow(m))
			for (j,y){
				(def temp = o[k])
				(def k1 = k+1)
				(def temp2 = o[k1])
				(m`[x][j] = m[temp][j] | m[temp2][j])
			}
		}
		check {
			(numKey` = numKey+1)
			(def k1 = k+1)
			(o` = remove(o,k1))
		}
	}
	
	MR 6 {
		(def nk = numKey-1)
		(def k = random(1..nk))
		followup {
			for (j,y){
				(def temp = o[k])
				(m`[1][j] = m[1][j] | m[temp][j])
			}
		}
		check {
			(numKey` = numKey-1)
			(o` = remove(o,k))
		}
	}
	
	MR 7 {
		(def nk = numKey-1)
		(def k = random(0..nk))
		followup {
			for (j,y){
				(def temp = o[k])
				(m` = removeColumn(m,j) where m[temp][j] == 1)
			}
		}
		check {
			(numKey` = numKey-1)
			(m` = removeRow(m,k))
			(o` = remove(o,k))
		}
	}
	
	MR 8 {
		(def nk = numKey-1)
		(select(k:0..nk) where not contain(o,k))
		followup {
			(y` = y+1)
			(m` = addColumn(m))
			for (i,x){
				(m`[i][y] = 1 where i==k)
				(m`[i][y] = 0 where i!=k)
			}
		}
		check {
			(numKey` = numKey+1)
			(o` = add(o,k))
		}
	}
	
	MR 9 {
		(def nk = numKey-1)
		(select(k:0..nk) where not contain(o,k))
		followup {
			(y` = y+1)
			(m` = addColumn(m))
			for (i,y){
				(m`[k][i] = 0)
			}
		}
		check {
			(numKey` = numKey+1)
			(o` = add(o,k))
		}
	}
}
