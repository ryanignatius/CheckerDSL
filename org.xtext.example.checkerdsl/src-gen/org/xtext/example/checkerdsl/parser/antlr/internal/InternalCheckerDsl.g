/*
* generated by Xtext
*/
grammar InternalCheckerDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.checkerdsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.checkerdsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.checkerdsl.services.CheckerDslGrammarAccess;

}

@parser::members {

 	private CheckerDslGrammarAccess grammarAccess;
 	
    public InternalCheckerDslParser(TokenStream input, CheckerDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Dsl";	
   	}
   	
   	@Override
   	protected CheckerDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDsl
entryRuleDsl returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDslRule()); }
	 iv_ruleDsl=ruleDsl 
	 { $current=$iv_ruleDsl.current; } 
	 EOF 
;

// Rule Dsl
ruleDsl returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDslAccess().getImportSectionXImportSectionParserRuleCall_0_0()); 
	    }
		lv_importSection_0_0=ruleXImportSection		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDslRule());
	        }
       		set(
       			$current, 
       			"importSection",
        		lv_importSection_0_0, 
        		"XImportSection");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getDslAccess().getElementsAbstractElementParserRuleCall_1_0()); 
	    }
		lv_elements_1_0=ruleAbstractElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDslRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_1_0, 
        		"AbstractElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleAbstractElement
entryRuleAbstractElement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAbstractElementRule()); }
	 iv_ruleAbstractElement=ruleAbstractElement 
	 { $current=$iv_ruleAbstractElement.current; } 
	 EOF 
;

// Rule AbstractElement
ruleAbstractElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAbstractElementAccess().getPackageDeclarationParserRuleCall_0()); 
    }
    this_PackageDeclaration_0=rulePackageDeclaration
    { 
        $current = $this_PackageDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAbstractElementAccess().getClassParserRuleCall_1()); 
    }
    this_Class_1=ruleClass
    { 
        $current = $this_Class_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePackageDeclaration
entryRulePackageDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPackageDeclarationRule()); }
	 iv_rulePackageDeclaration=rulePackageDeclaration 
	 { $current=$iv_rulePackageDeclaration.current; } 
	 EOF 
;

// Rule PackageDeclaration
rulePackageDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='package' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPackageDeclarationAccess().getPackageKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getNameQualifiedNameParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPackageDeclarationAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPackageDeclarationAccess().getElementsAbstractElementParserRuleCall_3_0()); 
	    }
		lv_elements_3_0=ruleAbstractElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPackageDeclarationRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"AbstractElement");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPackageDeclarationAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleClass
entryRuleClass returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getClassRule()); }
	 iv_ruleClass=ruleClass 
	 { $current=$iv_ruleClass.current; } 
	 EOF 
;

// Rule Class
ruleClass returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='class' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getClassAccess().getClassKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2='extends' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getClassAccess().getExtendsKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getSuperTypeJvmTypeReferenceParserRuleCall_2_1_0()); 
	    }
		lv_superType_3_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		set(
       			$current, 
       			"superType",
        		lv_superType_3_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_4='{' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getClassAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getClassAccess().getFeaturesFeatureParserRuleCall_4_0()); 
	    }
		lv_features_5_0=ruleFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getClassRule());
	        }
       		add(
       			$current, 
       			"features",
        		lv_features_5_0, 
        		"Feature");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getClassAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleFeature
entryRuleFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureRule()); }
	 iv_ruleFeature=ruleFeature 
	 { $current=$iv_ruleFeature.current; } 
	 EOF 
;

// Rule Feature
ruleFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getChkVariableDeclarationParserRuleCall_0()); 
    }
    this_ChkVariableDeclaration_0=ruleChkVariableDeclaration
    { 
        $current = $this_ChkVariableDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getMethodParserRuleCall_1()); 
    }
    this_Method_1=ruleMethod
    { 
        $current = $this_Method_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getFormatParserRuleCall_2()); 
    }
    this_Format_2=ruleFormat
    { 
        $current = $this_Format_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getCheckParserRuleCall_3()); 
    }
    this_Check_3=ruleCheck
    { 
        $current = $this_Check_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getMRParserRuleCall_4()); 
    }
    this_MR_4=ruleMR
    { 
        $current = $this_MR_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFeatureAccess().getScoreParserRuleCall_5()); 
    }
    this_Score_5=ruleScore
    { 
        $current = $this_Score_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='op' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMethodAccess().getOpKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getTypeJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_type_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getNameValidIDParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='(' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMethodAccess().getLeftParenthesisKeyword_3());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParamsFullJvmFormalParameterParserRuleCall_4_0_0()); 
	    }
		lv_params_4_0=ruleFullJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"FullJvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMethodAccess().getCommaKeyword_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getParamsFullJvmFormalParameterParserRuleCall_4_1_1_0()); 
	    }
		lv_params_6_0=ruleFullJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_6_0, 
        		"FullJvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMethodAccess().getRightParenthesisKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getBodyXBlockExpressionParserRuleCall_6_0()); 
	    }
		lv_body_8_0=ruleXBlockExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_8_0, 
        		"XBlockExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleChkScoreExpression
entryRuleChkScoreExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChkScoreExpressionRule()); }
	 iv_ruleChkScoreExpression=ruleChkScoreExpression 
	 { $current=$iv_ruleChkScoreExpression.current; } 
	 EOF 
;

// Rule ChkScoreExpression
ruleChkScoreExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getChkScoreExpressionAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChkScoreExpressionAccess().getSubtaskCHK_INTParserRuleCall_1_0()); 
	    }
		lv_subtask_1_0=ruleCHK_INT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkScoreExpressionRule());
	        }
       		set(
       			$current, 
       			"subtask",
        		lv_subtask_1_0, 
        		"CHK_INT");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getChkScoreExpressionAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChkScoreExpressionAccess().getScoreCHK_INTParserRuleCall_3_0()); 
	    }
		lv_score_3_0=ruleCHK_INT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkScoreExpressionRule());
	        }
       		set(
       			$current, 
       			"score",
        		lv_score_3_0, 
        		"CHK_INT");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getChkScoreExpressionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleScore
entryRuleScore returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getScoreRule()); }
	 iv_ruleScore=ruleScore 
	 { $current=$iv_ruleScore.current; } 
	 EOF 
;

// Rule Score
ruleScore returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='score' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getScoreAccess().getScoreKeyword_0());
    }
	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getScoreAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getScoreAccess().getScoresChkScoreExpressionParserRuleCall_2_0()); 
	    }
		lv_scores_2_0=ruleChkScoreExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getScoreRule());
	        }
       		add(
       			$current, 
       			"scores",
        		lv_scores_2_0, 
        		"ChkScoreExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getScoreAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleFollowUp
entryRuleFollowUp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFollowUpRule()); }
	 iv_ruleFollowUp=ruleFollowUp 
	 { $current=$iv_ruleFollowUp.current; } 
	 EOF 
;

// Rule FollowUp
ruleFollowUp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_fol_0_0=	'followup' 
    {
        newLeafNode(lv_fol_0_0, grammarAccess.getFollowUpAccess().getFolFollowupKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFollowUpRule());
	        }
       		setWithLastConsumed($current, "fol", lv_fol_0_0, "followup");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFollowUpAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getFollowUpAccess().getFollowupsChkExpressionParserRuleCall_2_0_0()); 
	    }
		lv_followups_2_1=ruleChkExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFollowUpRule());
	        }
       		add(
       			$current, 
       			"followups",
        		lv_followups_2_1, 
        		"ChkExpression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getFollowUpAccess().getFollowupsChkLoopExpressionParserRuleCall_2_0_1()); 
	    }
		lv_followups_2_2=ruleChkLoopExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFollowUpRule());
	        }
       		add(
       			$current, 
       			"followups",
        		lv_followups_2_2, 
        		"ChkLoopExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFollowUpAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleProperty
entryRuleProperty returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPropertyRule()); }
	 iv_ruleProperty=ruleProperty 
	 { $current=$iv_ruleProperty.current; } 
	 EOF 
;

// Rule Property
ruleProperty returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_prop_0_0=	'check' 
    {
        newLeafNode(lv_prop_0_0, grammarAccess.getPropertyAccess().getPropCheckKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyRule());
	        }
       		setWithLastConsumed($current, "prop", lv_prop_0_0, "check");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertyAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getPropertiesChkExpressionParserRuleCall_2_0_0()); 
	    }
		lv_properties_2_1=ruleChkExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_2_1, 
        		"ChkExpression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getPropertyAccess().getPropertiesChkLoopExpressionParserRuleCall_2_0_1()); 
	    }
		lv_properties_2_2=ruleChkLoopExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyRule());
	        }
       		add(
       			$current, 
       			"properties",
        		lv_properties_2_2, 
        		"ChkLoopExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPropertyAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleMR
entryRuleMR returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMRRule()); }
	 iv_ruleMR=ruleMR 
	 { $current=$iv_ruleMR.current; } 
	 EOF 
;

// Rule MR
ruleMR returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_mr_0_0=	'MR' 
    {
        newLeafNode(lv_mr_0_0, grammarAccess.getMRAccess().getMrMRKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMRRule());
	        }
       		setWithLastConsumed($current, "mr", lv_mr_0_0, "MR");
	    }

)
)(
(
		lv_num_1_0=RULE_INT
		{
			newLeafNode(lv_num_1_0, grammarAccess.getMRAccess().getNumINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMRRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"num",
        		lv_num_1_0, 
        		"INT");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMRAccess().getLeftCurlyBracketKeyword_2());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getMRAccess().getMrExpChkExpressionParserRuleCall_3_0_0()); 
	    }
		lv_mrExp_3_1=ruleChkExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMRRule());
	        }
       		add(
       			$current, 
       			"mrExp",
        		lv_mrExp_3_1, 
        		"ChkExpression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getMRAccess().getMrExpChkLoopExpressionParserRuleCall_3_0_1()); 
	    }
		lv_mrExp_3_2=ruleChkLoopExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMRRule());
	        }
       		add(
       			$current, 
       			"mrExp",
        		lv_mrExp_3_2, 
        		"ChkLoopExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getMRAccess().getFollowupFollowUpParserRuleCall_4_0()); 
	    }
		lv_followup_4_0=ruleFollowUp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMRRule());
	        }
       		set(
       			$current, 
       			"followup",
        		lv_followup_4_0, 
        		"FollowUp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMRAccess().getPropertyPropertyParserRuleCall_5_0()); 
	    }
		lv_property_5_0=ruleProperty		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMRRule());
	        }
       		set(
       			$current, 
       			"property",
        		lv_property_5_0, 
        		"Property");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMRAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleChkVariableDeclaration
entryRuleChkVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChkVariableDeclarationRule()); }
	 iv_ruleChkVariableDeclaration=ruleChkVariableDeclaration 
	 { $current=$iv_ruleChkVariableDeclaration.current; } 
	 EOF 
;

// Rule ChkVariableDeclaration
ruleChkVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getChkVariableDeclarationAccess().getTypeChkTypeReferenceParserRuleCall_0_0()); 
	    }
		lv_type_0_0=ruleChkTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_0_0, 
        		"ChkTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChkVariableDeclarationAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChkVariableDeclarationAccess().getSzCHK_NUMBERParserRuleCall_1_1_0()); 
	    }
		lv_sz_2_0=ruleCHK_NUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkVariableDeclarationRule());
	        }
       		add(
       			$current, 
       			"sz",
        		lv_sz_2_0, 
        		"CHK_NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getChkVariableDeclarationAccess().getRightSquareBracketKeyword_1_2());
    }
)*(
(
		{ 
	        newCompositeNode(grammarAccess.getChkVariableDeclarationAccess().getNameValidIDParserRuleCall_2_0()); 
	    }
		lv_name_4_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getChkVariableDeclarationAccess().getLeftParenthesisKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChkVariableDeclarationAccess().getLimit1LimitParserRuleCall_3_1_0()); 
	    }
		lv_limit1_6_0=ruleLimit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"limit1",
        		lv_limit1_6_0, 
        		"Limit");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=';' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getChkVariableDeclarationAccess().getSemicolonKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChkVariableDeclarationAccess().getLimitLimitParserRuleCall_3_2_1_0()); 
	    }
		lv_limit_8_0=ruleLimit		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkVariableDeclarationRule());
	        }
       		add(
       			$current, 
       			"limit",
        		lv_limit_8_0, 
        		"Limit");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getChkVariableDeclarationAccess().getRightParenthesisKeyword_3_3());
    }
)?(	otherlv_10='value' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getChkVariableDeclarationAccess().getValueKeyword_4_0());
    }
	otherlv_11='{' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getChkVariableDeclarationAccess().getLeftCurlyBracketKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChkVariableDeclarationAccess().getSpValueSpValueParserRuleCall_4_2_0()); 
	    }
		lv_spValue_12_0=ruleSpValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"spValue",
        		lv_spValue_12_0, 
        		"SpValue");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_13='}' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getChkVariableDeclarationAccess().getRightCurlyBracketKeyword_4_3());
    }
)?)
;





// Entry rule entryRuleChkTypeReference
entryRuleChkTypeReference returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getChkTypeReferenceRule()); } 
	 iv_ruleChkTypeReference=ruleChkTypeReference 
	 { $current=$iv_ruleChkTypeReference.current.getText(); }  
	 EOF 
;

// Rule ChkTypeReference
ruleChkTypeReference returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='int' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkTypeReferenceAccess().getIntKeyword_0()); 
    }

    |
	kw='long' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkTypeReferenceAccess().getLongKeyword_1()); 
    }

    |
	kw='float' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkTypeReferenceAccess().getFloatKeyword_2()); 
    }

    |
	kw='double' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkTypeReferenceAccess().getDoubleKeyword_3()); 
    }

    |
	kw='boolean' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkTypeReferenceAccess().getBooleanKeyword_4()); 
    }

    |
	kw='char' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkTypeReferenceAccess().getCharKeyword_5()); 
    }

    |
	kw='string' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkTypeReferenceAccess().getStringKeyword_6()); 
    }

    |
	kw='tree' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkTypeReferenceAccess().getTreeKeyword_7()); 
    }

    |
	kw='adjMat' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkTypeReferenceAccess().getAdjMatKeyword_8()); 
    }

    |
	kw='adjList' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkTypeReferenceAccess().getAdjListKeyword_9()); 
    }
)
    ;





// Entry rule entryRuleMethodCall
entryRuleMethodCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodCallRule()); }
	 iv_ruleMethodCall=ruleMethodCall 
	 { $current=$iv_ruleMethodCall.current; } 
	 EOF 
;

// Rule MethodCall
ruleMethodCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodCallAccess().getNameValidIDParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodCallRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMethodCallAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getMethodCallAccess().getParamsValidIDParserRuleCall_2_0_0()); 
	    }
		lv_params_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodCallRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMethodCallAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodCallAccess().getParamsValidIDParserRuleCall_2_1_1_0()); 
	    }
		lv_params_4_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodCallRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMethodCallAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleChkPrefix
entryRuleChkPrefix returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChkPrefixRule()); }
	 iv_ruleChkPrefix=ruleChkPrefix 
	 { $current=$iv_ruleChkPrefix.current; } 
	 EOF 
;

// Rule ChkPrefix
ruleChkPrefix returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_type_0_1=	'in' 
    {
        newLeafNode(lv_type_0_1, grammarAccess.getChkPrefixAccess().getTypeInKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChkPrefixRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_1, null);
	    }

    |		lv_type_0_2=	'out' 
    {
        newLeafNode(lv_type_0_2, grammarAccess.getChkPrefixAccess().getTypeOutKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChkPrefixRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_2, null);
	    }

    |		lv_type_0_3=	'ans' 
    {
        newLeafNode(lv_type_0_3, grammarAccess.getChkPrefixAccess().getTypeAnsKeyword_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChkPrefixRule());
	        }
       		setWithLastConsumed($current, "type", lv_type_0_3, null);
	    }

)

)
)	otherlv_1='.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChkPrefixAccess().getFullStopKeyword_1());
    }
)
;





// Entry rule entryRuleChkVariable
entryRuleChkVariable returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChkVariableRule()); }
	 iv_ruleChkVariable=ruleChkVariable 
	 { $current=$iv_ruleChkVariable.current; } 
	 EOF 
;

// Rule ChkVariable
ruleChkVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getChkVariableAccess().getPrefChkPrefixParserRuleCall_0_0()); 
	    }
		lv_pref_0_0=ruleChkPrefix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkVariableRule());
	        }
       		set(
       			$current, 
       			"pref",
        		lv_pref_0_0, 
        		"ChkPrefix");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getChkVariableAccess().getVarValidIDParserRuleCall_1_0()); 
	    }
		lv_var_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkVariableRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		lv_newtest_2_0=	'`' 
    {
        newLeafNode(lv_newtest_2_0, grammarAccess.getChkVariableAccess().getNewtestGraveAccentKeyword_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChkVariableRule());
	        }
       		setWithLastConsumed($current, "newtest", lv_newtest_2_0, "`");
	    }

)
)?(	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getChkVariableAccess().getLeftSquareBracketKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChkVariableAccess().getVCHK_NUMBERParserRuleCall_3_1_0()); 
	    }
		lv_v_4_0=ruleCHK_NUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkVariableRule());
	        }
       		add(
       			$current, 
       			"v",
        		lv_v_4_0, 
        		"CHK_NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getChkVariableAccess().getRightSquareBracketKeyword_3_2());
    }
)*)
;





// Entry rule entryRuleChkVariables
entryRuleChkVariables returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChkVariablesRule()); }
	 iv_ruleChkVariables=ruleChkVariables 
	 { $current=$iv_ruleChkVariables.current; } 
	 EOF 
;

// Rule ChkVariables
ruleChkVariables returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getChkVariablesAccess().getVaChkVariableParserRuleCall_0_0()); 
	    }
		lv_va_0_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkVariablesRule());
	        }
       		set(
       			$current, 
       			"va",
        		lv_va_0_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getChkVariablesAccess().getNuCHK_INTParserRuleCall_1_0()); 
	    }
		lv_nu_1_0=ruleCHK_INT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkVariablesRule());
	        }
       		set(
       			$current, 
       			"nu",
        		lv_nu_1_0, 
        		"CHK_INT");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getChkVariablesAccess().getGrChkItemGroupParserRuleCall_2_0()); 
	    }
		lv_gr_2_0=ruleChkItemGroup		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkVariablesRule());
	        }
       		set(
       			$current, 
       			"gr",
        		lv_gr_2_0, 
        		"ChkItemGroup");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleChkItemGroup
entryRuleChkItemGroup returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChkItemGroupRule()); }
	 iv_ruleChkItemGroup=ruleChkItemGroup 
	 { $current=$iv_ruleChkItemGroup.current; } 
	 EOF 
;

// Rule ChkItemGroup
ruleChkItemGroup returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='<' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getChkItemGroupAccess().getLessThanSignKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChkItemGroupAccess().getVarsChkVariableParserRuleCall_1_0()); 
	    }
		lv_vars_1_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkItemGroupRule());
	        }
       		add(
       			$current, 
       			"vars",
        		lv_vars_1_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getChkItemGroupAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChkItemGroupAccess().getVarsChkVariableParserRuleCall_2_1_0()); 
	    }
		lv_vars_3_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkItemGroupRule());
	        }
       		add(
       			$current, 
       			"vars",
        		lv_vars_3_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_4='>' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getChkItemGroupAccess().getGreaterThanSignKeyword_3());
    }
)
;





// Entry rule entryRuleHelper
entryRuleHelper returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHelperRule()); }
	 iv_ruleHelper=ruleHelper 
	 { $current=$iv_ruleHelper.current; } 
	 EOF 
;

// Rule Helper
ruleHelper returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_sum_0_0=	'sum' 
    {
        newLeafNode(lv_sum_0_0, grammarAccess.getHelperAccess().getSumSumKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "sum", lv_sum_0_0, "sum");
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_0_2_0()); 
	    }
		lv_var_2_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_2_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getHelperAccess().getRightParenthesisKeyword_0_3());
    }
)
    |((
(
		lv_max_4_0=	'max' 
    {
        newLeafNode(lv_max_4_0, grammarAccess.getHelperAccess().getMaxMaxKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "max", lv_max_4_0, "max");
	    }

)
)	otherlv_5='(' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_1_2_0()); 
	    }
		lv_var_6_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_6_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=')' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getHelperAccess().getRightParenthesisKeyword_1_3());
    }
)
    |((
(
		lv_min_8_0=	'min' 
    {
        newLeafNode(lv_min_8_0, grammarAccess.getHelperAccess().getMinMinKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "min", lv_min_8_0, "min");
	    }

)
)	otherlv_9='(' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_2_2_0()); 
	    }
		lv_var_10_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_10_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=')' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getHelperAccess().getRightParenthesisKeyword_2_3());
    }
)
    |((
(
		lv_prime_12_0=	'prime' 
    {
        newLeafNode(lv_prime_12_0, grammarAccess.getHelperAccess().getPrimePrimeKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "prime", lv_prime_12_0, "prime");
	    }

)
)	otherlv_13='(' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_3_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVar3ChkVariablesParserRuleCall_3_2_0()); 
	    }
		lv_var3_14_0=ruleChkVariables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var3",
        		lv_var3_14_0, 
        		"ChkVariables");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_15=')' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getHelperAccess().getRightParenthesisKeyword_3_3());
    }
)
    |((
(
		lv_swap_16_0=	'swap' 
    {
        newLeafNode(lv_swap_16_0, grammarAccess.getHelperAccess().getSwapSwapKeyword_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "swap", lv_swap_16_0, "swap");
	    }

)
)	otherlv_17='(' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_4_2_0()); 
	    }
		lv_var_18_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_18_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_19=',' 
    {
    	newLeafNode(otherlv_19, grammarAccess.getHelperAccess().getCommaKeyword_4_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVar1ValidIDParserRuleCall_4_4_0()); 
	    }
		lv_var1_20_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var1",
        		lv_var1_20_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_21=',' 
    {
    	newLeafNode(otherlv_21, grammarAccess.getHelperAccess().getCommaKeyword_4_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVar2ValidIDParserRuleCall_4_6_0()); 
	    }
		lv_var2_22_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var2",
        		lv_var2_22_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_23=')' 
    {
    	newLeafNode(otherlv_23, grammarAccess.getHelperAccess().getRightParenthesisKeyword_4_7());
    }
)
    |((
(
		lv_select_24_0=	'select' 
    {
        newLeafNode(lv_select_24_0, grammarAccess.getHelperAccess().getSelectSelectKeyword_5_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "select", lv_select_24_0, "select");
	    }

)
)	otherlv_25='(' 
    {
    	newLeafNode(otherlv_25, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarsValidIDParserRuleCall_5_2_0()); 
	    }
		lv_vars_26_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		add(
       			$current, 
       			"vars",
        		lv_vars_26_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_27=',' 
    {
    	newLeafNode(otherlv_27, grammarAccess.getHelperAccess().getCommaKeyword_5_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarsValidIDParserRuleCall_5_3_1_0()); 
	    }
		lv_vars_28_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		add(
       			$current, 
       			"vars",
        		lv_vars_28_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_29=')' 
    {
    	newLeafNode(otherlv_29, grammarAccess.getHelperAccess().getRightParenthesisKeyword_5_4());
    }
)
    |((
(
		lv_add_30_0=	'add' 
    {
        newLeafNode(lv_add_30_0, grammarAccess.getHelperAccess().getAddAddKeyword_6_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "add", lv_add_30_0, "add");
	    }

)
)	otherlv_31='(' 
    {
    	newLeafNode(otherlv_31, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_6_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_6_2_0()); 
	    }
		lv_var_32_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_32_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_33=',' 
    {
    	newLeafNode(otherlv_33, grammarAccess.getHelperAccess().getCommaKeyword_6_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVar3ChkVariablesParserRuleCall_6_4_0()); 
	    }
		lv_var3_34_0=ruleChkVariables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var3",
        		lv_var3_34_0, 
        		"ChkVariables");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_35=')' 
    {
    	newLeafNode(otherlv_35, grammarAccess.getHelperAccess().getRightParenthesisKeyword_6_5());
    }
)
    |((
(
		lv_remove_36_0=	'remove' 
    {
        newLeafNode(lv_remove_36_0, grammarAccess.getHelperAccess().getRemoveRemoveKeyword_7_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "remove", lv_remove_36_0, "remove");
	    }

)
)	otherlv_37='(' 
    {
    	newLeafNode(otherlv_37, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_7_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_7_2_0()); 
	    }
		lv_var_38_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_38_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_39=',' 
    {
    	newLeafNode(otherlv_39, grammarAccess.getHelperAccess().getCommaKeyword_7_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVar3ChkVariablesParserRuleCall_7_3_1_0()); 
	    }
		lv_var3_40_0=ruleChkVariables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var3",
        		lv_var3_40_0, 
        		"ChkVariables");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_41=')' 
    {
    	newLeafNode(otherlv_41, grammarAccess.getHelperAccess().getRightParenthesisKeyword_7_4());
    }
)
    |((
(
		lv_random_42_0=	'random' 
    {
        newLeafNode(lv_random_42_0, grammarAccess.getHelperAccess().getRandomRandomKeyword_8_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "random", lv_random_42_0, "random");
	    }

)
)	otherlv_43='(' 
    {
    	newLeafNode(otherlv_43, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_8_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVar3ChkVariablesParserRuleCall_8_2_0_0()); 
	    }
		lv_var3_44_0=ruleChkVariables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var3",
        		lv_var3_44_0, 
        		"ChkVariables");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_45='..' 
    {
    	newLeafNode(otherlv_45, grammarAccess.getHelperAccess().getFullStopFullStopKeyword_8_2_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVar4ChkVariablesParserRuleCall_8_2_2_0()); 
	    }
		lv_var4_46_0=ruleChkVariables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var4",
        		lv_var4_46_0, 
        		"ChkVariables");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_47=')' 
    {
    	newLeafNode(otherlv_47, grammarAccess.getHelperAccess().getRightParenthesisKeyword_8_3());
    }
)
    |((
(
		lv_size_48_0=	'size' 
    {
        newLeafNode(lv_size_48_0, grammarAccess.getHelperAccess().getSizeSizeKeyword_9_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "size", lv_size_48_0, "size");
	    }

)
)	otherlv_49='(' 
    {
    	newLeafNode(otherlv_49, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_9_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_9_2_0()); 
	    }
		lv_var_50_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_50_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_51=')' 
    {
    	newLeafNode(otherlv_51, grammarAccess.getHelperAccess().getRightParenthesisKeyword_9_3());
    }
)
    |((
(
		lv_reverse_52_0=	'reverse' 
    {
        newLeafNode(lv_reverse_52_0, grammarAccess.getHelperAccess().getReverseReverseKeyword_10_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "reverse", lv_reverse_52_0, "reverse");
	    }

)
)	otherlv_53='(' 
    {
    	newLeafNode(otherlv_53, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_10_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_10_2_0()); 
	    }
		lv_var_54_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_54_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_55=')' 
    {
    	newLeafNode(otherlv_55, grammarAccess.getHelperAccess().getRightParenthesisKeyword_10_3());
    }
)
    |((
(
		lv_contains_56_0=	'contain' 
    {
        newLeafNode(lv_contains_56_0, grammarAccess.getHelperAccess().getContainsContainKeyword_11_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "contains", lv_contains_56_0, "contain");
	    }

)
)	otherlv_57='(' 
    {
    	newLeafNode(otherlv_57, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_11_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_11_2_0()); 
	    }
		lv_var_58_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_58_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_59=',' 
    {
    	newLeafNode(otherlv_59, grammarAccess.getHelperAccess().getCommaKeyword_11_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVar3ChkVariablesParserRuleCall_11_4_0()); 
	    }
		lv_var3_60_0=ruleChkVariables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var3",
        		lv_var3_60_0, 
        		"ChkVariables");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_61=')' 
    {
    	newLeafNode(otherlv_61, grammarAccess.getHelperAccess().getRightParenthesisKeyword_11_5());
    }
)
    |((
(
		lv_addRow_62_0=	'addRow' 
    {
        newLeafNode(lv_addRow_62_0, grammarAccess.getHelperAccess().getAddRowAddRowKeyword_12_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "addRow", lv_addRow_62_0, "addRow");
	    }

)
)	otherlv_63='(' 
    {
    	newLeafNode(otherlv_63, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_12_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_12_2_0()); 
	    }
		lv_var_64_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_64_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_65=')' 
    {
    	newLeafNode(otherlv_65, grammarAccess.getHelperAccess().getRightParenthesisKeyword_12_3());
    }
)
    |((
(
		lv_addCol_66_0=	'addColumn' 
    {
        newLeafNode(lv_addCol_66_0, grammarAccess.getHelperAccess().getAddColAddColumnKeyword_13_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "addCol", lv_addCol_66_0, "addColumn");
	    }

)
)	otherlv_67='(' 
    {
    	newLeafNode(otherlv_67, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_13_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_13_2_0()); 
	    }
		lv_var_68_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_68_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_69=')' 
    {
    	newLeafNode(otherlv_69, grammarAccess.getHelperAccess().getRightParenthesisKeyword_13_3());
    }
)
    |((
(
		lv_swapRow_70_0=	'swapRow' 
    {
        newLeafNode(lv_swapRow_70_0, grammarAccess.getHelperAccess().getSwapRowSwapRowKeyword_14_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "swapRow", lv_swapRow_70_0, "swapRow");
	    }

)
)	otherlv_71='(' 
    {
    	newLeafNode(otherlv_71, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_14_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_14_2_0()); 
	    }
		lv_var_72_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_72_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_73=',' 
    {
    	newLeafNode(otherlv_73, grammarAccess.getHelperAccess().getCommaKeyword_14_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVar1ValidIDParserRuleCall_14_4_0()); 
	    }
		lv_var1_74_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var1",
        		lv_var1_74_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_75=',' 
    {
    	newLeafNode(otherlv_75, grammarAccess.getHelperAccess().getCommaKeyword_14_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVar2ValidIDParserRuleCall_14_6_0()); 
	    }
		lv_var2_76_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var2",
        		lv_var2_76_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_77=')' 
    {
    	newLeafNode(otherlv_77, grammarAccess.getHelperAccess().getRightParenthesisKeyword_14_7());
    }
)
    |((
(
		lv_swapCol_78_0=	'swapColumn' 
    {
        newLeafNode(lv_swapCol_78_0, grammarAccess.getHelperAccess().getSwapColSwapColumnKeyword_15_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "swapCol", lv_swapCol_78_0, "swapColumn");
	    }

)
)	otherlv_79='(' 
    {
    	newLeafNode(otherlv_79, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_15_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_15_2_0()); 
	    }
		lv_var_80_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_80_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_81=',' 
    {
    	newLeafNode(otherlv_81, grammarAccess.getHelperAccess().getCommaKeyword_15_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVar1ValidIDParserRuleCall_15_4_0()); 
	    }
		lv_var1_82_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var1",
        		lv_var1_82_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_83=',' 
    {
    	newLeafNode(otherlv_83, grammarAccess.getHelperAccess().getCommaKeyword_15_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVar2ValidIDParserRuleCall_15_6_0()); 
	    }
		lv_var2_84_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var2",
        		lv_var2_84_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_85=')' 
    {
    	newLeafNode(otherlv_85, grammarAccess.getHelperAccess().getRightParenthesisKeyword_15_7());
    }
)
    |((
(
		lv_removeRow_86_0=	'removeRow' 
    {
        newLeafNode(lv_removeRow_86_0, grammarAccess.getHelperAccess().getRemoveRowRemoveRowKeyword_16_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "removeRow", lv_removeRow_86_0, "removeRow");
	    }

)
)	otherlv_87='(' 
    {
    	newLeafNode(otherlv_87, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_16_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_16_2_0()); 
	    }
		lv_var_88_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_88_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_89=',' 
    {
    	newLeafNode(otherlv_89, grammarAccess.getHelperAccess().getCommaKeyword_16_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVar3ChkVariablesParserRuleCall_16_4_0()); 
	    }
		lv_var3_90_0=ruleChkVariables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var3",
        		lv_var3_90_0, 
        		"ChkVariables");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_91=')' 
    {
    	newLeafNode(otherlv_91, grammarAccess.getHelperAccess().getRightParenthesisKeyword_16_5());
    }
)
    |((
(
		lv_removeCol_92_0=	'removeColumn' 
    {
        newLeafNode(lv_removeCol_92_0, grammarAccess.getHelperAccess().getRemoveColRemoveColumnKeyword_17_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "removeCol", lv_removeCol_92_0, "removeColumn");
	    }

)
)	otherlv_93='(' 
    {
    	newLeafNode(otherlv_93, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_17_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_17_2_0()); 
	    }
		lv_var_94_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_94_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_95=',' 
    {
    	newLeafNode(otherlv_95, grammarAccess.getHelperAccess().getCommaKeyword_17_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVar3ChkVariablesParserRuleCall_17_4_0()); 
	    }
		lv_var3_96_0=ruleChkVariables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var3",
        		lv_var3_96_0, 
        		"ChkVariables");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_97=')' 
    {
    	newLeafNode(otherlv_97, grammarAccess.getHelperAccess().getRightParenthesisKeyword_17_5());
    }
)
    |((
(
		lv_permute_98_0=	'permute' 
    {
        newLeafNode(lv_permute_98_0, grammarAccess.getHelperAccess().getPermutePermuteKeyword_18_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "permute", lv_permute_98_0, "permute");
	    }

)
)	otherlv_99='(' 
    {
    	newLeafNode(otherlv_99, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_18_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_18_2_0()); 
	    }
		lv_var_100_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_100_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_101=')' 
    {
    	newLeafNode(otherlv_101, grammarAccess.getHelperAccess().getRightParenthesisKeyword_18_3());
    }
)
    |((
(
		lv_plus_102_0=	'plus' 
    {
        newLeafNode(lv_plus_102_0, grammarAccess.getHelperAccess().getPlusPlusKeyword_19_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "plus", lv_plus_102_0, "plus");
	    }

)
)	otherlv_103='(' 
    {
    	newLeafNode(otherlv_103, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_19_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_19_2_0()); 
	    }
		lv_var_104_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_104_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_105=',' 
    {
    	newLeafNode(otherlv_105, grammarAccess.getHelperAccess().getCommaKeyword_19_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVar3ChkVariablesParserRuleCall_19_4_0()); 
	    }
		lv_var3_106_0=ruleChkVariables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var3",
        		lv_var3_106_0, 
        		"ChkVariables");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_107=')' 
    {
    	newLeafNode(otherlv_107, grammarAccess.getHelperAccess().getRightParenthesisKeyword_19_5());
    }
)
    |((
(
		lv_multiply_108_0=	'multiply' 
    {
        newLeafNode(lv_multiply_108_0, grammarAccess.getHelperAccess().getMultiplyMultiplyKeyword_20_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "multiply", lv_multiply_108_0, "multiply");
	    }

)
)	otherlv_109='(' 
    {
    	newLeafNode(otherlv_109, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_20_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_20_2_0()); 
	    }
		lv_var_110_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_110_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_111=',' 
    {
    	newLeafNode(otherlv_111, grammarAccess.getHelperAccess().getCommaKeyword_20_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVar3ChkVariablesParserRuleCall_20_4_0()); 
	    }
		lv_var3_112_0=ruleChkVariables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var3",
        		lv_var3_112_0, 
        		"ChkVariables");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_113=')' 
    {
    	newLeafNode(otherlv_113, grammarAccess.getHelperAccess().getRightParenthesisKeyword_20_5());
    }
)
    |((
(
		lv_invert_114_0=	'invert' 
    {
        newLeafNode(lv_invert_114_0, grammarAccess.getHelperAccess().getInvertInvertKeyword_21_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "invert", lv_invert_114_0, "invert");
	    }

)
)	otherlv_115='(' 
    {
    	newLeafNode(otherlv_115, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_21_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_21_2_0()); 
	    }
		lv_var_116_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_116_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_117=')' 
    {
    	newLeafNode(otherlv_117, grammarAccess.getHelperAccess().getRightParenthesisKeyword_21_3());
    }
)
    |((
(
		lv_include_118_0=	'include' 
    {
        newLeafNode(lv_include_118_0, grammarAccess.getHelperAccess().getIncludeIncludeKeyword_22_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "include", lv_include_118_0, "include");
	    }

)
)	otherlv_119='(' 
    {
    	newLeafNode(otherlv_119, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_22_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_22_2_0()); 
	    }
		lv_var_120_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_120_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_121=',' 
    {
    	newLeafNode(otherlv_121, grammarAccess.getHelperAccess().getCommaKeyword_22_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVar3ChkVariablesParserRuleCall_22_4_0()); 
	    }
		lv_var3_122_0=ruleChkVariables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var3",
        		lv_var3_122_0, 
        		"ChkVariables");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_123=')' 
    {
    	newLeafNode(otherlv_123, grammarAccess.getHelperAccess().getRightParenthesisKeyword_22_5());
    }
)
    |((
(
		lv_exclude_124_0=	'exclude' 
    {
        newLeafNode(lv_exclude_124_0, grammarAccess.getHelperAccess().getExcludeExcludeKeyword_23_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "exclude", lv_exclude_124_0, "exclude");
	    }

)
)	otherlv_125='(' 
    {
    	newLeafNode(otherlv_125, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_23_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_23_2_0()); 
	    }
		lv_var_126_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_126_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_127=',' 
    {
    	newLeafNode(otherlv_127, grammarAccess.getHelperAccess().getCommaKeyword_23_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVar3ChkVariablesParserRuleCall_23_4_0()); 
	    }
		lv_var3_128_0=ruleChkVariables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var3",
        		lv_var3_128_0, 
        		"ChkVariables");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_129=')' 
    {
    	newLeafNode(otherlv_129, grammarAccess.getHelperAccess().getRightParenthesisKeyword_23_5());
    }
)
    |((
(
		lv_compositional_130_0=	'compositional' 
    {
        newLeafNode(lv_compositional_130_0, grammarAccess.getHelperAccess().getCompositionalCompositionalKeyword_24_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHelperRule());
	        }
       		setWithLastConsumed($current, "compositional", lv_compositional_130_0, "compositional");
	    }

)
)	otherlv_131='(' 
    {
    	newLeafNode(otherlv_131, grammarAccess.getHelperAccess().getLeftParenthesisKeyword_24_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getHelperAccess().getVarChkVariableParserRuleCall_24_2_0()); 
	    }
		lv_var_132_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHelperRule());
	        }
       		set(
       			$current, 
       			"var",
        		lv_var_132_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_133=')' 
    {
    	newLeafNode(otherlv_133, grammarAccess.getHelperAccess().getRightParenthesisKeyword_24_3());
    }
))
;





// Entry rule entryRuleChkRelationalExpression
entryRuleChkRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChkRelationalExpressionRule()); }
	 iv_ruleChkRelationalExpression=ruleChkRelationalExpression 
	 { $current=$iv_ruleChkRelationalExpression.current; } 
	 EOF 
;

// Rule ChkRelationalExpression
ruleChkRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getChkRelationalExpressionAccess().getV1ChkVariablesParserRuleCall_0_0()); 
	    }
		lv_v1_0_0=ruleChkVariables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"v1",
        		lv_v1_0_0, 
        		"ChkVariables");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getChkRelationalExpressionAccess().getOprChkOpRelationalParserRuleCall_1_0()); 
	    }
		lv_opr_1_0=ruleChkOpRelational		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"opr",
        		lv_opr_1_0, 
        		"ChkOpRelational");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getChkRelationalExpressionAccess().getV2ChkVariablesParserRuleCall_2_0()); 
	    }
		lv_v2_2_0=ruleChkVariables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"v2",
        		lv_v2_2_0, 
        		"ChkVariables");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleChkAssignment
entryRuleChkAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChkAssignmentRule()); }
	 iv_ruleChkAssignment=ruleChkAssignment 
	 { $current=$iv_ruleChkAssignment.current; } 
	 EOF 
;

// Rule ChkAssignment
ruleChkAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_def_0_0=	'def' 
    {
        newLeafNode(lv_def_0_0, grammarAccess.getChkAssignmentAccess().getDefDefKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChkAssignmentRule());
	        }
       		setWithLastConsumed($current, "def", lv_def_0_0, "def");
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getChkAssignmentAccess().getV1ChkVariableParserRuleCall_1_0()); 
	    }
		lv_v1_1_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkAssignmentRule());
	        }
       		set(
       			$current, 
       			"v1",
        		lv_v1_1_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getChkAssignmentAccess().getOprChkOpAssignmentParserRuleCall_2_0()); 
	    }
		lv_opr_2_0=ruleChkOpAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkAssignmentRule());
	        }
       		set(
       			$current, 
       			"opr",
        		lv_opr_2_0, 
        		"ChkOpAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getChkAssignmentAccess().getV2ChkOperationParserRuleCall_3_0_0()); 
	    }
		lv_v2_3_1=ruleChkOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkAssignmentRule());
	        }
       		set(
       			$current, 
       			"v2",
        		lv_v2_3_1, 
        		"ChkOperation");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getChkAssignmentAccess().getV2HelperParserRuleCall_3_0_1()); 
	    }
		lv_v2_3_2=ruleHelper		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkAssignmentRule());
	        }
       		set(
       			$current, 
       			"v2",
        		lv_v2_3_2, 
        		"Helper");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleChkGeneralExpressions
entryRuleChkGeneralExpressions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChkGeneralExpressionsRule()); }
	 iv_ruleChkGeneralExpressions=ruleChkGeneralExpressions 
	 { $current=$iv_ruleChkGeneralExpressions.current; } 
	 EOF 
;

// Rule ChkGeneralExpressions
ruleChkGeneralExpressions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getChkGeneralExpressionsAccess().getHelperParserRuleCall_0()); 
    }
    this_Helper_0=ruleHelper
    { 
        $current = $this_Helper_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getChkGeneralExpressionsAccess().getChkRelationalExpressionParserRuleCall_1()); 
    }
    this_ChkRelationalExpression_1=ruleChkRelationalExpression
    { 
        $current = $this_ChkRelationalExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getChkGeneralExpressionsAccess().getMethodCallParserRuleCall_2()); 
    }
    this_MethodCall_2=ruleMethodCall
    { 
        $current = $this_MethodCall_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getChkGeneralExpressionsAccess().getChkAssignmentParserRuleCall_3()); 
    }
    this_ChkAssignment_3=ruleChkAssignment
    { 
        $current = $this_ChkAssignment_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleChkOpAssignment
entryRuleChkOpAssignment returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getChkOpAssignmentRule()); } 
	 iv_ruleChkOpAssignment=ruleChkOpAssignment 
	 { $current=$iv_ruleChkOpAssignment.current.getText(); }  
	 EOF 
;

// Rule ChkOpAssignment
ruleChkOpAssignment returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkOpAssignmentAccess().getEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRuleChkOperator
entryRuleChkOperator returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getChkOperatorRule()); } 
	 iv_ruleChkOperator=ruleChkOperator 
	 { $current=$iv_ruleChkOperator.current.getText(); }  
	 EOF 
;

// Rule ChkOperator
ruleChkOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkOperatorAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkOperatorAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkOperatorAccess().getAsteriskKeyword_2()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkOperatorAccess().getSolidusKeyword_3()); 
    }

    |
	kw='|' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkOperatorAccess().getVerticalLineKeyword_4()); 
    }

    |
	kw='&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkOperatorAccess().getAmpersandKeyword_5()); 
    }

    |
	kw='^' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkOperatorAccess().getCircumflexAccentKeyword_6()); 
    }
)
    ;





// Entry rule entryRuleChkOperation
entryRuleChkOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChkOperationRule()); }
	 iv_ruleChkOperation=ruleChkOperation 
	 { $current=$iv_ruleChkOperation.current; } 
	 EOF 
;

// Rule ChkOperation
ruleChkOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getChkOperationAccess().getOperandChkVariablesParserRuleCall_0_0()); 
	    }
		lv_operand_0_0=ruleChkVariables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkOperationRule());
	        }
       		add(
       			$current, 
       			"operand",
        		lv_operand_0_0, 
        		"ChkVariables");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getChkOperationAccess().getOperatorChkOperatorParserRuleCall_1_0_0()); 
	    }
		lv_operator_1_0=ruleChkOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkOperationRule());
	        }
       		add(
       			$current, 
       			"operator",
        		lv_operator_1_0, 
        		"ChkOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getChkOperationAccess().getOperandChkVariablesParserRuleCall_1_1_0()); 
	    }
		lv_operand_2_0=ruleChkVariables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkOperationRule());
	        }
       		add(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"ChkVariables");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleChkOpRelational
entryRuleChkOpRelational returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getChkOpRelationalRule()); } 
	 iv_ruleChkOpRelational=ruleChkOpRelational 
	 { $current=$iv_ruleChkOpRelational.current.getText(); }  
	 EOF 
;

// Rule ChkOpRelational
ruleChkOpRelational returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkOpRelationalAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkOpRelationalAccess().getExclamationMarkEqualsSignKeyword_1()); 
    }

    |
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkOpRelationalAccess().getGreaterThanSignEqualsSignKeyword_2()); 
    }

    |
	kw='<=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkOpRelationalAccess().getLessThanSignEqualsSignKeyword_3()); 
    }

    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkOpRelationalAccess().getGreaterThanSignKeyword_4()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkOpRelationalAccess().getLessThanSignKeyword_5()); 
    }
)
    ;





// Entry rule entryRuleChkAndOr
entryRuleChkAndOr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getChkAndOrRule()); } 
	 iv_ruleChkAndOr=ruleChkAndOr 
	 { $current=$iv_ruleChkAndOr.current.getText(); }  
	 EOF 
;

// Rule ChkAndOr
ruleChkAndOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='and' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkAndOrAccess().getAndKeyword_0()); 
    }

    |
	kw='or' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getChkAndOrAccess().getOrKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleChkLoopExpression
entryRuleChkLoopExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChkLoopExpressionRule()); }
	 iv_ruleChkLoopExpression=ruleChkLoopExpression 
	 { $current=$iv_ruleChkLoopExpression.current; } 
	 EOF 
;

// Rule ChkLoopExpression
ruleChkLoopExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getChkLoopExpressionAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getChkLoopExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChkLoopExpressionAccess().getIndexChkVariableParserRuleCall_2_0()); 
	    }
		lv_index_2_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_2_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getChkLoopExpressionAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChkLoopExpressionAccess().getMaxIndexChkVariablesParserRuleCall_4_0()); 
	    }
		lv_maxIndex_4_0=ruleChkVariables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"maxIndex",
        		lv_maxIndex_4_0, 
        		"ChkVariables");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getChkLoopExpressionAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getChkLoopExpressionAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChkLoopExpressionAccess().getExChkExpressionParserRuleCall_7_0()); 
	    }
		lv_ex_7_0=ruleChkExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkLoopExpressionRule());
	        }
       		add(
       			$current, 
       			"ex",
        		lv_ex_7_0, 
        		"ChkExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getChkLoopExpressionAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleChkExpression
entryRuleChkExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getChkExpressionRule()); }
	 iv_ruleChkExpression=ruleChkExpression 
	 { $current=$iv_ruleChkExpression.current; } 
	 EOF 
;

// Rule ChkExpression
ruleChkExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getChkExpressionAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChkExpressionAccess().getExpChkGeneralExpressionsParserRuleCall_1_0()); 
	    }
		lv_exp_1_0=ruleChkGeneralExpressions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkExpressionRule());
	        }
       		set(
       			$current, 
       			"exp",
        		lv_exp_1_0, 
        		"ChkGeneralExpressions");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_where_2_0=	'where' 
    {
        newLeafNode(lv_where_2_0, grammarAccess.getChkExpressionAccess().getWhereWhereKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChkExpressionRule());
	        }
       		setWithLastConsumed($current, "where", lv_where_2_0, "where");
	    }

)
)(
(
		lv_not_3_0=	'not' 
    {
        newLeafNode(lv_not_3_0, grammarAccess.getChkExpressionAccess().getNotNotKeyword_2_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getChkExpressionRule());
	        }
       		setWithLastConsumed($current, "not", lv_not_3_0, "not");
	    }

)
)?(
(
(
		{ 
	        newCompositeNode(grammarAccess.getChkExpressionAccess().getCondChkRelationalExpressionParserRuleCall_2_2_0_0()); 
	    }
		lv_cond_4_1=ruleChkRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkExpressionRule());
	        }
       		add(
       			$current, 
       			"cond",
        		lv_cond_4_1, 
        		"ChkRelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getChkExpressionAccess().getCondHelperParserRuleCall_2_2_0_1()); 
	    }
		lv_cond_4_2=ruleHelper		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkExpressionRule());
	        }
       		add(
       			$current, 
       			"cond",
        		lv_cond_4_2, 
        		"Helper");
	        afterParserOrEnumRuleCall();
	    }

)

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getChkExpressionAccess().getTypeChkAndOrParserRuleCall_2_3_0_0()); 
	    }
		lv_type_5_0=ruleChkAndOr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkExpressionRule());
	        }
       		add(
       			$current, 
       			"type",
        		lv_type_5_0, 
        		"ChkAndOr");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getChkExpressionAccess().getCondChkRelationalExpressionParserRuleCall_2_3_1_0_0()); 
	    }
		lv_cond_6_1=ruleChkRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkExpressionRule());
	        }
       		add(
       			$current, 
       			"cond",
        		lv_cond_6_1, 
        		"ChkRelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getChkExpressionAccess().getCondHelperParserRuleCall_2_3_1_0_1()); 
	    }
		lv_cond_6_2=ruleHelper		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkExpressionRule());
	        }
       		add(
       			$current, 
       			"cond",
        		lv_cond_6_2, 
        		"Helper");
	        afterParserOrEnumRuleCall();
	    }

)

)
))*)?((
(
		{ 
	        newCompositeNode(grammarAccess.getChkExpressionAccess().getOpChkOpRelationalParserRuleCall_3_0_0()); 
	    }
		lv_op_7_0=ruleChkOpRelational		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkExpressionRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_7_0, 
        		"ChkOpRelational");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getChkExpressionAccess().getVChkVariableParserRuleCall_3_1_0()); 
	    }
		lv_v_8_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChkExpressionRule());
	        }
       		set(
       			$current, 
       			"v",
        		lv_v_8_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_9=')' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getChkExpressionAccess().getRightParenthesisKeyword_4());
    }
)
;





// Entry rule entryRuleCheck
entryRuleCheck returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getCheckRule()); }
	 iv_ruleCheck=ruleCheck 
	 { $current=$iv_ruleCheck.current; } 
	 EOF 
;

// Rule Check
ruleCheck returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_check_0_0=	'check' 
    {
        newLeafNode(lv_check_0_0, grammarAccess.getCheckAccess().getCheckCheckKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getCheckRule());
	        }
       		setWithLastConsumed($current, "check", lv_check_0_0, "check");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getCheckAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getCheckAccess().getChkChkExpressionParserRuleCall_2_0_0()); 
	    }
		lv_chk_2_1=ruleChkExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheckRule());
	        }
       		add(
       			$current, 
       			"chk",
        		lv_chk_2_1, 
        		"ChkExpression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getCheckAccess().getChkChkLoopExpressionParserRuleCall_2_0_1()); 
	    }
		lv_chk_2_2=ruleChkLoopExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCheckRule());
	        }
       		add(
       			$current, 
       			"chk",
        		lv_chk_2_2, 
        		"ChkLoopExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getCheckAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleSpValue
entryRuleSpValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSpValueRule()); }
	 iv_ruleSpValue=ruleSpValue 
	 { $current=$iv_ruleSpValue.current; } 
	 EOF 
;

// Rule SpValue
ruleSpValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSpValueAccess().getValCHK_NUMBERParserRuleCall_0_0()); 
	    }
		lv_val_0_0=ruleCHK_NUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpValueRule());
	        }
       		add(
       			$current, 
       			"val",
        		lv_val_0_0, 
        		"CHK_NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSpValueAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSpValueAccess().getValCHK_NUMBERParserRuleCall_1_1_0()); 
	    }
		lv_val_2_0=ruleCHK_NUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSpValueRule());
	        }
       		add(
       			$current, 
       			"val",
        		lv_val_2_0, 
        		"CHK_NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleLimit
entryRuleLimit returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getLimitRule()); }
	 iv_ruleLimit=ruleLimit 
	 { $current=$iv_ruleLimit.current; } 
	 EOF 
;

// Rule Limit
ruleLimit returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getLimitAccess().getSubSubtaskParserRuleCall_0_0()); 
	    }
		lv_sub_0_0=ruleSubtask		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLimitRule());
	        }
       		set(
       			$current, 
       			"sub",
        		lv_sub_0_0, 
        		"Subtask");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getLimitAccess().getACHK_ELEMENTParserRuleCall_1_0()); 
	    }
		lv_a_1_0=ruleCHK_ELEMENT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLimitRule());
	        }
       		add(
       			$current, 
       			"a",
        		lv_a_1_0, 
        		"CHK_ELEMENT");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='..' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getLimitAccess().getFullStopFullStopKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLimitAccess().getBCHK_ELEMENTParserRuleCall_3_0()); 
	    }
		lv_b_3_0=ruleCHK_ELEMENT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLimitRule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_3_0, 
        		"CHK_ELEMENT");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getLimitAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLimitAccess().getACHK_ELEMENTParserRuleCall_4_1_0()); 
	    }
		lv_a_5_0=ruleCHK_ELEMENT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLimitRule());
	        }
       		add(
       			$current, 
       			"a",
        		lv_a_5_0, 
        		"CHK_ELEMENT");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='..' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getLimitAccess().getFullStopFullStopKeyword_4_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getLimitAccess().getBCHK_ELEMENTParserRuleCall_4_3_0()); 
	    }
		lv_b_7_0=ruleCHK_ELEMENT		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getLimitRule());
	        }
       		add(
       			$current, 
       			"b",
        		lv_b_7_0, 
        		"CHK_ELEMENT");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleSubtask
entryRuleSubtask returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSubtaskRule()); }
	 iv_ruleSubtask=ruleSubtask 
	 { $current=$iv_ruleSubtask.current; } 
	 EOF 
;

// Rule Subtask
ruleSubtask returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='subtask' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getSubtaskAccess().getSubtaskKeyword_0());
    }
(
(
		lv_num_1_0=RULE_INT
		{
			newLeafNode(lv_num_1_0, grammarAccess.getSubtaskAccess().getNumINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSubtaskRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"num",
        		lv_num_1_0, 
        		"INT");
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSubtaskAccess().getColonKeyword_2());
    }
)
;





// Entry rule entryRuleFormat
entryRuleFormat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormatRule()); }
	 iv_ruleFormat=ruleFormat 
	 { $current=$iv_ruleFormat.current; } 
	 EOF 
;

// Rule Format
ruleFormat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFormatAccess().getInputFormatParserRuleCall_0()); 
    }
    this_InputFormat_0=ruleInputFormat
    { 
        $current = $this_InputFormat_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFormatAccess().getOutputFormatParserRuleCall_1()); 
    }
    this_OutputFormat_1=ruleOutputFormat
    { 
        $current = $this_OutputFormat_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getFormatAccess().getHiddenFormatParserRuleCall_2()); 
    }
    this_HiddenFormat_2=ruleHiddenFormat
    { 
        $current = $this_HiddenFormat_2.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleForFormatExpression
entryRuleForFormatExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getForFormatExpressionRule()); }
	 iv_ruleForFormatExpression=ruleForFormatExpression 
	 { $current=$iv_ruleForFormatExpression.current; } 
	 EOF 
;

// Rule ForFormatExpression
ruleForFormatExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='for' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getForFormatExpressionAccess().getForKeyword_0());
    }
	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getForFormatExpressionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForFormatExpressionAccess().getIndexChkVariableParserRuleCall_2_0()); 
	    }
		lv_index_2_0=ruleChkVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForFormatExpressionRule());
	        }
       		set(
       			$current, 
       			"index",
        		lv_index_2_0, 
        		"ChkVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getForFormatExpressionAccess().getCommaKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForFormatExpressionAccess().getMaxIndexChkVariablesParserRuleCall_4_0()); 
	    }
		lv_maxIndex_4_0=ruleChkVariables		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForFormatExpressionRule());
	        }
       		set(
       			$current, 
       			"maxIndex",
        		lv_maxIndex_4_0, 
        		"ChkVariables");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getForFormatExpressionAccess().getRightParenthesisKeyword_5());
    }
	otherlv_6='{' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getForFormatExpressionAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForFormatExpressionAccess().getExFormatExpressionParserRuleCall_7_0()); 
	    }
		lv_ex_7_0=ruleFormatExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForFormatExpressionRule());
	        }
       		add(
       			$current, 
       			"ex",
        		lv_ex_7_0, 
        		"FormatExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_8='}' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getForFormatExpressionAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleInputFormat
entryRuleInputFormat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInputFormatRule()); }
	 iv_ruleInputFormat=ruleInputFormat 
	 { $current=$iv_ruleInputFormat.current; } 
	 EOF 
;

// Rule InputFormat
ruleInputFormat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_input_0_0=	'input' 
    {
        newLeafNode(lv_input_0_0, grammarAccess.getInputFormatAccess().getInputInputKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInputFormatRule());
	        }
       		setWithLastConsumed($current, "input", lv_input_0_0, "input");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getInputFormatAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getInputFormatAccess().getExpFormatExpressionParserRuleCall_2_0_0()); 
	    }
		lv_exp_2_1=ruleFormatExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputFormatRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_2_1, 
        		"FormatExpression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getInputFormatAccess().getExpForFormatExpressionParserRuleCall_2_0_1()); 
	    }
		lv_exp_2_2=ruleForFormatExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInputFormatRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_2_2, 
        		"ForFormatExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getInputFormatAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleOutputFormat
entryRuleOutputFormat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutputFormatRule()); }
	 iv_ruleOutputFormat=ruleOutputFormat 
	 { $current=$iv_ruleOutputFormat.current; } 
	 EOF 
;

// Rule OutputFormat
ruleOutputFormat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_output_0_0=	'output' 
    {
        newLeafNode(lv_output_0_0, grammarAccess.getOutputFormatAccess().getOutputOutputKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOutputFormatRule());
	        }
       		setWithLastConsumed($current, "output", lv_output_0_0, "output");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getOutputFormatAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getOutputFormatAccess().getExpFormatExpressionParserRuleCall_2_0_0()); 
	    }
		lv_exp_2_1=ruleFormatExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputFormatRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_2_1, 
        		"FormatExpression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getOutputFormatAccess().getExpForFormatExpressionParserRuleCall_2_0_1()); 
	    }
		lv_exp_2_2=ruleForFormatExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutputFormatRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_2_2, 
        		"ForFormatExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getOutputFormatAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleHiddenFormat
entryRuleHiddenFormat returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getHiddenFormatRule()); }
	 iv_ruleHiddenFormat=ruleHiddenFormat 
	 { $current=$iv_ruleHiddenFormat.current; } 
	 EOF 
;

// Rule HiddenFormat
ruleHiddenFormat returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_hid_0_0=	'hidden' 
    {
        newLeafNode(lv_hid_0_0, grammarAccess.getHiddenFormatAccess().getHidHiddenKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getHiddenFormatRule());
	        }
       		setWithLastConsumed($current, "hid", lv_hid_0_0, "hidden");
	    }

)
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getHiddenFormatAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getHiddenFormatAccess().getExpFormatExpressionParserRuleCall_2_0_0()); 
	    }
		lv_exp_2_1=ruleFormatExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHiddenFormatRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_2_1, 
        		"FormatExpression");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getHiddenFormatAccess().getExpForFormatExpressionParserRuleCall_2_0_1()); 
	    }
		lv_exp_2_2=ruleForFormatExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getHiddenFormatRule());
	        }
       		add(
       			$current, 
       			"exp",
        		lv_exp_2_2, 
        		"ForFormatExpression");
	        afterParserOrEnumRuleCall();
	    }

)

)
)*	otherlv_3='}' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getHiddenFormatAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleFormatExpression
entryRuleFormatExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFormatExpressionRule()); }
	 iv_ruleFormatExpression=ruleFormatExpression 
	 { $current=$iv_ruleFormatExpression.current; } 
	 EOF 
;

// Rule FormatExpression
ruleFormatExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFormatExpressionAccess().getNumCHK_NUMBERParserRuleCall_0_0()); 
	    }
		lv_num_0_0=ruleCHK_NUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormatExpressionRule());
	        }
       		set(
       			$current, 
       			"num",
        		lv_num_0_0, 
        		"CHK_NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFormatExpressionAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getFormatExpressionAccess().getVarValidIDParserRuleCall_2_0_0()); 
	    }
		lv_var_2_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormatExpressionRule());
	        }
       		add(
       			$current, 
       			"var",
        		lv_var_2_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3='[' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFormatExpressionAccess().getLeftSquareBracketKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFormatExpressionAccess().getSzCHK_NUMBERParserRuleCall_2_1_1_0()); 
	    }
		lv_sz_4_0=ruleCHK_NUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormatExpressionRule());
	        }
       		add(
       			$current, 
       			"sz",
        		lv_sz_4_0, 
        		"CHK_NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5=']' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFormatExpressionAccess().getRightSquareBracketKeyword_2_1_2());
    }
)*(	otherlv_6='<' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getFormatExpressionAccess().getLessThanSignKeyword_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFormatExpressionAccess().getCountCHK_NUMBERParserRuleCall_2_2_1_0()); 
	    }
		lv_count_7_0=ruleCHK_NUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormatExpressionRule());
	        }
       		add(
       			$current, 
       			"count",
        		lv_count_7_0, 
        		"CHK_NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8='>' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getFormatExpressionAccess().getGreaterThanSignKeyword_2_2_2());
    }
)?(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getFormatExpressionAccess().getCommaKeyword_2_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFormatExpressionAccess().getVarValidIDParserRuleCall_2_3_1_0()); 
	    }
		lv_var_10_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormatExpressionRule());
	        }
       		add(
       			$current, 
       			"var",
        		lv_var_10_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11='<' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getFormatExpressionAccess().getLessThanSignKeyword_2_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFormatExpressionAccess().getCountCHK_NUMBERParserRuleCall_2_3_2_1_0()); 
	    }
		lv_count_12_0=ruleCHK_NUMBER		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFormatExpressionRule());
	        }
       		add(
       			$current, 
       			"count",
        		lv_count_12_0, 
        		"CHK_NUMBER");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_13='>' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getFormatExpressionAccess().getGreaterThanSignKeyword_2_3_2_2());
    }
)?)*)?	otherlv_14=')' 
    {
    	newLeafNode(otherlv_14, grammarAccess.getFormatExpressionAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleCHK_INT
entryRuleCHK_INT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCHK_INTRule()); } 
	 iv_ruleCHK_INT=ruleCHK_INT 
	 { $current=$iv_ruleCHK_INT.current.getText(); }  
	 EOF 
;

// Rule CHK_INT
ruleCHK_INT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCHK_INTAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getCHK_INTAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleCHK_ELEMENT
entryRuleCHK_ELEMENT returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCHK_ELEMENTRule()); } 
	 iv_ruleCHK_ELEMENT=ruleCHK_ELEMENT 
	 { $current=$iv_ruleCHK_ELEMENT.current.getText(); }  
	 EOF 
;

// Rule CHK_ELEMENT
ruleCHK_ELEMENT returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCHK_ELEMENTAccess().getCHK_NUMBERParserRuleCall_0()); 
    }
    this_CHK_NUMBER_0=ruleCHK_NUMBER    {
		$current.merge(this_CHK_NUMBER_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getCHK_ELEMENTAccess().getSTRINGTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleCHK_NUMBER
entryRuleCHK_NUMBER returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCHK_NUMBERRule()); } 
	 iv_ruleCHK_NUMBER=ruleCHK_NUMBER 
	 { $current=$iv_ruleCHK_NUMBER.current.getText(); }  
	 EOF 
;

// Rule CHK_NUMBER
ruleCHK_NUMBER returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getCHK_NUMBERAccess().getCHK_INTParserRuleCall_0()); 
    }
    this_CHK_INT_0=ruleCHK_INT    {
		$current.merge(this_CHK_INT_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getCHK_NUMBERAccess().getValidIDParserRuleCall_1()); 
    }
    this_ValidID_1=ruleValidID    {
		$current.merge(this_ValidID_1);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)
    ;





// Entry rule entryRuleXExpression
entryRuleXExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpressionRule()); }
	 iv_ruleXExpression=ruleXExpression 
	 { $current=$iv_ruleXExpression.current; } 
	 EOF 
;

// Rule XExpression
ruleXExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getXExpressionAccess().getXAssignmentParserRuleCall()); 
    }
    this_XAssignment_0=ruleXAssignment
    { 
        $current = $this_XAssignment_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleXAssignment
entryRuleXAssignment returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXAssignmentRule()); }
	 iv_ruleXAssignment=ruleXAssignment 
	 { $current=$iv_ruleXAssignment.current; } 
	 EOF 
;

// Rule XAssignment
ruleXAssignment returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXAssignmentAccess().getXAssignmentAction_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXAssignmentRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXAssignmentAccess().getFeatureJvmIdentifiableElementCrossReference_0_1_0()); 
	    }
		ruleFeatureCallID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getXAssignmentAccess().getOpSingleAssignParserRuleCall_0_2()); 
    }
ruleOpSingleAssign
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXAssignmentAccess().getValueXAssignmentParserRuleCall_0_3_0()); 
	    }
		lv_value_3_0=ruleXAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAssignmentRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"XAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
    { 
        newCompositeNode(grammarAccess.getXAssignmentAccess().getXOrExpressionParserRuleCall_1_0()); 
    }
    this_XOrExpression_4=ruleXOrExpression
    { 
        $current = $this_XOrExpression_4.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpMultiAssign
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXAssignmentAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXAssignmentRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXAssignmentAccess().getFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0()); 
	    }
		ruleOpMultiAssign		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXAssignmentAccess().getRightOperandXAssignmentParserRuleCall_1_1_1_0()); 
	    }
		lv_rightOperand_7_0=ruleXAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAssignmentRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_7_0, 
        		"XAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
))?))
;





// Entry rule entryRuleOpSingleAssign
entryRuleOpSingleAssign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpSingleAssignRule()); } 
	 iv_ruleOpSingleAssign=ruleOpSingleAssign 
	 { $current=$iv_ruleOpSingleAssign.current.getText(); }  
	 EOF 
;

// Rule OpSingleAssign
ruleOpSingleAssign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpSingleAssignAccess().getEqualsSignKeyword()); 
    }

    ;





// Entry rule entryRuleOpMultiAssign
entryRuleOpMultiAssign returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpMultiAssignRule()); } 
	 iv_ruleOpMultiAssign=ruleOpMultiAssign 
	 { $current=$iv_ruleOpMultiAssign.current.getText(); }  
	 EOF 
;

// Rule OpMultiAssign
ruleOpMultiAssign returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getPlusSignEqualsSignKeyword_0()); 
    }

    |
	kw='-=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getHyphenMinusEqualsSignKeyword_1()); 
    }

    |
	kw='*=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getAsteriskEqualsSignKeyword_2()); 
    }

    |
	kw='/=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getSolidusEqualsSignKeyword_3()); 
    }

    |
	kw='%=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getPercentSignEqualsSignKeyword_4()); 
    }

    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getLessThanSignKeyword_5_0()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getLessThanSignKeyword_5_1()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getEqualsSignKeyword_5_2()); 
    }
)
    |(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getGreaterThanSignKeyword_6_0()); 
    }
(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getGreaterThanSignKeyword_6_1()); 
    }
)?
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAssignAccess().getGreaterThanSignEqualsSignKeyword_6_2()); 
    }
))
    ;





// Entry rule entryRuleXOrExpression
entryRuleXOrExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXOrExpressionRule()); }
	 iv_ruleXOrExpression=ruleXOrExpression 
	 { $current=$iv_ruleXOrExpression.current; } 
	 EOF 
;

// Rule XOrExpression
ruleXOrExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXOrExpressionAccess().getXAndExpressionParserRuleCall_0()); 
    }
    this_XAndExpression_0=ruleXAndExpression
    { 
        $current = $this_XAndExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpOr
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXOrExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXOrExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXOrExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpOr		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXOrExpressionAccess().getRightOperandXAndExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleXAndExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXOrExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XAndExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpOr
entryRuleOpOr returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpOrRule()); } 
	 iv_ruleOpOr=ruleOpOr 
	 { $current=$iv_ruleOpOr.current.getText(); }  
	 EOF 
;

// Rule OpOr
ruleOpOr returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='||' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOrAccess().getVerticalLineVerticalLineKeyword()); 
    }

    ;





// Entry rule entryRuleXAndExpression
entryRuleXAndExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXAndExpressionRule()); }
	 iv_ruleXAndExpression=ruleXAndExpression 
	 { $current=$iv_ruleXAndExpression.current; } 
	 EOF 
;

// Rule XAndExpression
ruleXAndExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXAndExpressionAccess().getXEqualityExpressionParserRuleCall_0()); 
    }
    this_XEqualityExpression_0=ruleXEqualityExpression
    { 
        $current = $this_XEqualityExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpAnd
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXAndExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXAndExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXAndExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpAnd		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXAndExpressionAccess().getRightOperandXEqualityExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleXEqualityExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAndExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XEqualityExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpAnd
entryRuleOpAnd returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpAndRule()); } 
	 iv_ruleOpAnd=ruleOpAnd 
	 { $current=$iv_ruleOpAnd.current.getText(); }  
	 EOF 
;

// Rule OpAnd
ruleOpAnd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='&&' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpAndAccess().getAmpersandAmpersandKeyword()); 
    }

    ;





// Entry rule entryRuleXEqualityExpression
entryRuleXEqualityExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXEqualityExpressionRule()); }
	 iv_ruleXEqualityExpression=ruleXEqualityExpression 
	 { $current=$iv_ruleXEqualityExpression.current; } 
	 EOF 
;

// Rule XEqualityExpression
ruleXEqualityExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXEqualityExpressionAccess().getXRelationalExpressionParserRuleCall_0()); 
    }
    this_XRelationalExpression_0=ruleXRelationalExpression
    { 
        $current = $this_XRelationalExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpEquality
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXEqualityExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXEqualityExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXEqualityExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpEquality		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXEqualityExpressionAccess().getRightOperandXRelationalExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleXRelationalExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXEqualityExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XRelationalExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpEquality
entryRuleOpEquality returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpEqualityRule()); } 
	 iv_ruleOpEquality=ruleOpEquality 
	 { $current=$iv_ruleOpEquality.current.getText(); }  
	 EOF 
;

// Rule OpEquality
ruleOpEquality returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignKeyword_0()); 
    }

    |
	kw='!=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignKeyword_1()); 
    }

    |
	kw='===' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpEqualityAccess().getEqualsSignEqualsSignEqualsSignKeyword_2()); 
    }

    |
	kw='!==' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpEqualityAccess().getExclamationMarkEqualsSignEqualsSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleXRelationalExpression
entryRuleXRelationalExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXRelationalExpressionRule()); }
	 iv_ruleXRelationalExpression=ruleXRelationalExpression 
	 { $current=$iv_ruleXRelationalExpression.current; } 
	 EOF 
;

// Rule XRelationalExpression
ruleXRelationalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXRelationalExpressionAccess().getXOtherOperatorExpressionParserRuleCall_0()); 
    }
    this_XOtherOperatorExpression_0=ruleXOtherOperatorExpression
    { 
        $current = $this_XOtherOperatorExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((((((
)	'instanceof' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXRelationalExpressionAccess().getXInstanceOfExpressionExpressionAction_1_0_0_0_0(),
            $current);
    }
)	otherlv_2='instanceof' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXRelationalExpressionAccess().getInstanceofKeyword_1_0_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXRelationalExpressionAccess().getTypeJvmTypeReferenceParserRuleCall_1_0_1_0()); 
	    }
		lv_type_3_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(((((
)(
(
		ruleOpCompare
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXRelationalExpressionAccess().getXBinaryOperationLeftOperandAction_1_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXRelationalExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXRelationalExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_1_0_0_1_0()); 
	    }
		ruleOpCompare		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXRelationalExpressionAccess().getRightOperandXOtherOperatorExpressionParserRuleCall_1_1_1_0()); 
	    }
		lv_rightOperand_6_0=ruleXOtherOperatorExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXRelationalExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_6_0, 
        		"XOtherOperatorExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))*)
;





// Entry rule entryRuleOpCompare
entryRuleOpCompare returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpCompareRule()); } 
	 iv_ruleOpCompare=ruleOpCompare 
	 { $current=$iv_ruleOpCompare.current.getText(); }  
	 EOF 
;

// Rule OpCompare
ruleOpCompare returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='>=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getGreaterThanSignEqualsSignKeyword_0()); 
    }

    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getLessThanSignKeyword_1_0()); 
    }

	kw='=' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getEqualsSignKeyword_1_1()); 
    }
)
    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getGreaterThanSignKeyword_2()); 
    }

    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpCompareAccess().getLessThanSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleXOtherOperatorExpression
entryRuleXOtherOperatorExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXOtherOperatorExpressionRule()); }
	 iv_ruleXOtherOperatorExpression=ruleXOtherOperatorExpression 
	 { $current=$iv_ruleXOtherOperatorExpression.current; } 
	 EOF 
;

// Rule XOtherOperatorExpression
ruleXOtherOperatorExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getXAdditiveExpressionParserRuleCall_0()); 
    }
    this_XAdditiveExpression_0=ruleXAdditiveExpression
    { 
        $current = $this_XAdditiveExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpOther
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXOtherOperatorExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXOtherOperatorExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpOther		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXOtherOperatorExpressionAccess().getRightOperandXAdditiveExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleXAdditiveExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXOtherOperatorExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XAdditiveExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpOther
entryRuleOpOther returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpOtherRule()); } 
	 iv_ruleOpOther=ruleOpOther 
	 { $current=$iv_ruleOpOther.current.getText(); }  
	 EOF 
;

// Rule OpOther
ruleOpOther returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='->' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getHyphenMinusGreaterThanSignKeyword_0()); 
    }

    |
	kw='..<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getFullStopFullStopLessThanSignKeyword_1()); 
    }

    |(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_2_0()); 
    }

	kw='..' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getFullStopFullStopKeyword_2_1()); 
    }
)
    |
	kw='..' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getFullStopFullStopKeyword_3()); 
    }

    |
	kw='=>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getEqualsSignGreaterThanSignKeyword_4()); 
    }

    |(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_0()); 
    }
((((
	'>' 

	'>' 
))=>(
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_0_0_0()); 
    }

	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_0_0_1()); 
    }
))
    |
	kw='>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getGreaterThanSignKeyword_5_1_1()); 
    }
))
    |(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_0()); 
    }
((((
	'<' 

	'<' 
))=>(
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_0_0_0()); 
    }

	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_0_0_1()); 
    }
))
    |
	kw='<' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignKeyword_6_1_1()); 
    }

    |
	kw='=>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getEqualsSignGreaterThanSignKeyword_6_1_2()); 
    }
))
    |
	kw='<>' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getLessThanSignGreaterThanSignKeyword_7()); 
    }

    |
	kw='?:' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpOtherAccess().getQuestionMarkColonKeyword_8()); 
    }
)
    ;





// Entry rule entryRuleXAdditiveExpression
entryRuleXAdditiveExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXAdditiveExpressionRule()); }
	 iv_ruleXAdditiveExpression=ruleXAdditiveExpression 
	 { $current=$iv_ruleXAdditiveExpression.current; } 
	 EOF 
;

// Rule XAdditiveExpression
ruleXAdditiveExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXAdditiveExpressionAccess().getXMultiplicativeExpressionParserRuleCall_0()); 
    }
    this_XMultiplicativeExpression_0=ruleXMultiplicativeExpression
    { 
        $current = $this_XMultiplicativeExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpAdd
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXAdditiveExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXAdditiveExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXAdditiveExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpAdd		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXAdditiveExpressionAccess().getRightOperandXMultiplicativeExpressionParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleXMultiplicativeExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXAdditiveExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XMultiplicativeExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpAdd
entryRuleOpAdd returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpAddRule()); } 
	 iv_ruleOpAdd=ruleOpAdd 
	 { $current=$iv_ruleOpAdd.current.getText(); }  
	 EOF 
;

// Rule OpAdd
ruleOpAdd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpAddAccess().getPlusSignKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpAddAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleXMultiplicativeExpression
entryRuleXMultiplicativeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXMultiplicativeExpressionRule()); }
	 iv_ruleXMultiplicativeExpression=ruleXMultiplicativeExpression 
	 { $current=$iv_ruleXMultiplicativeExpression.current; } 
	 EOF 
;

// Rule XMultiplicativeExpression
ruleXMultiplicativeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXMultiplicativeExpressionAccess().getXUnaryOperationParserRuleCall_0()); 
    }
    this_XUnaryOperation_0=ruleXUnaryOperation
    { 
        $current = $this_XUnaryOperation_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)(
(
		ruleOpMulti
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXMultiplicativeExpressionAccess().getXBinaryOperationLeftOperandAction_1_0_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMultiplicativeExpressionRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXMultiplicativeExpressionAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_1_0()); 
	    }
		ruleOpMulti		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXMultiplicativeExpressionAccess().getRightOperandXUnaryOperationParserRuleCall_1_1_0()); 
	    }
		lv_rightOperand_3_0=ruleXUnaryOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMultiplicativeExpressionRule());
	        }
       		set(
       			$current, 
       			"rightOperand",
        		lv_rightOperand_3_0, 
        		"XUnaryOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOpMulti
entryRuleOpMulti returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpMultiRule()); } 
	 iv_ruleOpMulti=ruleOpMulti 
	 { $current=$iv_ruleOpMulti.current.getText(); }  
	 EOF 
;

// Rule OpMulti
ruleOpMulti returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getAsteriskKeyword_0()); 
    }

    |
	kw='**' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getAsteriskAsteriskKeyword_1()); 
    }

    |
	kw='/' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getSolidusKeyword_2()); 
    }

    |
	kw='%' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpMultiAccess().getPercentSignKeyword_3()); 
    }
)
    ;





// Entry rule entryRuleXUnaryOperation
entryRuleXUnaryOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXUnaryOperationRule()); }
	 iv_ruleXUnaryOperation=ruleXUnaryOperation 
	 { $current=$iv_ruleXUnaryOperation.current; } 
	 EOF 
;

// Rule XUnaryOperation
ruleXUnaryOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXUnaryOperationAccess().getXUnaryOperationAction_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXUnaryOperationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXUnaryOperationAccess().getFeatureJvmIdentifiableElementCrossReference_0_1_0()); 
	    }
		ruleOpUnary		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXUnaryOperationAccess().getOperandXUnaryOperationParserRuleCall_0_2_0()); 
	    }
		lv_operand_2_0=ruleXUnaryOperation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXUnaryOperationRule());
	        }
       		set(
       			$current, 
       			"operand",
        		lv_operand_2_0, 
        		"XUnaryOperation");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getXUnaryOperationAccess().getXCastedExpressionParserRuleCall_1()); 
    }
    this_XCastedExpression_3=ruleXCastedExpression
    { 
        $current = $this_XCastedExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleOpUnary
entryRuleOpUnary returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpUnaryRule()); } 
	 iv_ruleOpUnary=ruleOpUnary 
	 { $current=$iv_ruleOpUnary.current.getText(); }  
	 EOF 
;

// Rule OpUnary
ruleOpUnary returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='!' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpUnaryAccess().getExclamationMarkKeyword_0()); 
    }

    |
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpUnaryAccess().getHyphenMinusKeyword_1()); 
    }

    |
	kw='+' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpUnaryAccess().getPlusSignKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleXCastedExpression
entryRuleXCastedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXCastedExpressionRule()); }
	 iv_ruleXCastedExpression=ruleXCastedExpression 
	 { $current=$iv_ruleXCastedExpression.current; } 
	 EOF 
;

// Rule XCastedExpression
ruleXCastedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXCastedExpressionAccess().getXPostfixOperationParserRuleCall_0()); 
    }
    this_XPostfixOperation_0=ruleXPostfixOperation
    { 
        $current = $this_XPostfixOperation_0.current; 
        afterParserOrEnumRuleCall();
    }
(((((
)	'as' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXCastedExpressionAccess().getXCastedExpressionTargetAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='as' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXCastedExpressionAccess().getAsKeyword_1_0_0_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXCastedExpressionAccess().getTypeJvmTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_type_3_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXCastedExpressionRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleXPostfixOperation
entryRuleXPostfixOperation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXPostfixOperationRule()); }
	 iv_ruleXPostfixOperation=ruleXPostfixOperation 
	 { $current=$iv_ruleXPostfixOperation.current; } 
	 EOF 
;

// Rule XPostfixOperation
ruleXPostfixOperation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXPostfixOperationAccess().getXMemberFeatureCallParserRuleCall_0()); 
    }
    this_XMemberFeatureCall_0=ruleXMemberFeatureCall
    { 
        $current = $this_XMemberFeatureCall_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)(
(
		ruleOpPostfix
)
)))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXPostfixOperationAccess().getXPostfixOperationOperandAction_1_0_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXPostfixOperationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXPostfixOperationAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_1_0()); 
	    }
		ruleOpPostfix		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)))?)
;





// Entry rule entryRuleOpPostfix
entryRuleOpPostfix returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getOpPostfixRule()); } 
	 iv_ruleOpPostfix=ruleOpPostfix 
	 { $current=$iv_ruleOpPostfix.current.getText(); }  
	 EOF 
;

// Rule OpPostfix
ruleOpPostfix returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='++' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpPostfixAccess().getPlusSignPlusSignKeyword_0()); 
    }

    |
	kw='--' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getOpPostfixAccess().getHyphenMinusHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleXMemberFeatureCall
entryRuleXMemberFeatureCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXMemberFeatureCallRule()); }
	 iv_ruleXMemberFeatureCall=ruleXMemberFeatureCall 
	 { $current=$iv_ruleXMemberFeatureCall.current; } 
	 EOF 
;

// Rule XMemberFeatureCall
ruleXMemberFeatureCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getXPrimaryExpressionParserRuleCall_0()); 
    }
    this_XPrimaryExpression_0=ruleXPrimaryExpression
    { 
        $current = $this_XPrimaryExpression_0.current; 
        afterParserOrEnumRuleCall();
    }
((((((
)(	'.' 

    |(
(
	'::' 
 

)
))(
(
		ruleFeatureCallID
)
)	ruleOpSingleAssign))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXMemberFeatureCallAccess().getXAssignmentAssignableAction_1_0_0_0_0(),
            $current);
    }
)(	otherlv_2='.' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXMemberFeatureCallAccess().getFullStopKeyword_1_0_0_0_1_0());
    }

    |(
(
		lv_explicitStatic_3_0=	'::' 
    {
        newLeafNode(lv_explicitStatic_3_0, grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticColonColonKeyword_1_0_0_0_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
	        }
       		setWithLastConsumed($current, "explicitStatic", true, "::");
	    }

)
))(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getFeatureJvmIdentifiableElementCrossReference_1_0_0_0_2_0()); 
	    }
		ruleFeatureCallID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getOpSingleAssignParserRuleCall_1_0_0_0_3()); 
    }
ruleOpSingleAssign
    { 
        afterParserOrEnumRuleCall();
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getValueXAssignmentParserRuleCall_1_0_1_0()); 
	    }
		lv_value_6_0=ruleXAssignment		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_6_0, 
        		"XAssignment");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(((((
)(	'.' 

    |(
(
	'?.' 
 

)
)
    |(
(
	'::' 
 

)
))))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getXMemberFeatureCallAccess().getXMemberFeatureCallMemberCallTargetAction_1_1_0_0_0(),
            $current);
    }
)(	otherlv_8='.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getXMemberFeatureCallAccess().getFullStopKeyword_1_1_0_0_1_0());
    }

    |(
(
		lv_nullSafe_9_0=	'?.' 
    {
        newLeafNode(lv_nullSafe_9_0, grammarAccess.getXMemberFeatureCallAccess().getNullSafeQuestionMarkFullStopKeyword_1_1_0_0_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
	        }
       		setWithLastConsumed($current, "nullSafe", true, "?.");
	    }

)
)
    |(
(
		lv_explicitStatic_10_0=	'::' 
    {
        newLeafNode(lv_explicitStatic_10_0, grammarAccess.getXMemberFeatureCallAccess().getExplicitStaticColonColonKeyword_1_1_0_0_1_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
	        }
       		setWithLastConsumed($current, "explicitStatic", true, "::");
	    }

)
))))(	otherlv_11='<' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getXMemberFeatureCallAccess().getLessThanSignKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_1_0()); 
	    }
		lv_typeArguments_12_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_12_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_13=',' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getXMemberFeatureCallAccess().getCommaKeyword_1_1_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_1_2_1_0()); 
	    }
		lv_typeArguments_14_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_14_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_15='>' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getXMemberFeatureCallAccess().getGreaterThanSignKeyword_1_1_1_3());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getFeatureJvmIdentifiableElementCrossReference_1_1_2_0()); 
	    }
		ruleIdOrSuper		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
	'(' 
 

)
)=>
(
		lv_explicitOperationCall_17_0=	'(' 
    {
        newLeafNode(lv_explicitOperationCall_17_0, grammarAccess.getXMemberFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_1_1_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXMemberFeatureCallRule());
	        }
       		setWithLastConsumed($current, "explicitOperationCall", true, "(");
	    }

)
)(((((
)((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXShortClosureParserRuleCall_1_1_3_1_0_0()); 
	    }
		lv_memberCallArguments_18_0=ruleXShortClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		lv_memberCallArguments_18_0, 
        		"XShortClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_0_0()); 
	    }
		lv_memberCallArguments_19_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		lv_memberCallArguments_19_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_20=',' 
    {
    	newLeafNode(otherlv_20, grammarAccess.getXMemberFeatureCallAccess().getCommaKeyword_1_1_3_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXExpressionParserRuleCall_1_1_3_1_1_1_1_0()); 
	    }
		lv_memberCallArguments_21_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		lv_memberCallArguments_21_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*))?	otherlv_22=')' 
    {
    	newLeafNode(otherlv_22, grammarAccess.getXMemberFeatureCallAccess().getRightParenthesisKeyword_1_1_3_2());
    }
)?((((
)	'[' 
))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXMemberFeatureCallAccess().getMemberCallArgumentsXClosureParserRuleCall_1_1_4_0()); 
	    }
		lv_memberCallArguments_23_0=ruleXClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXMemberFeatureCallRule());
	        }
       		add(
       			$current, 
       			"memberCallArguments",
        		lv_memberCallArguments_23_0, 
        		"XClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)?))*)
;





// Entry rule entryRuleXPrimaryExpression
entryRuleXPrimaryExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXPrimaryExpressionRule()); }
	 iv_ruleXPrimaryExpression=ruleXPrimaryExpression 
	 { $current=$iv_ruleXPrimaryExpression.current; } 
	 EOF 
;

// Rule XPrimaryExpression
ruleXPrimaryExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXConstructorCallParserRuleCall_0()); 
    }
    this_XConstructorCall_0=ruleXConstructorCall
    { 
        $current = $this_XConstructorCall_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXBlockExpressionParserRuleCall_1()); 
    }
    this_XBlockExpression_1=ruleXBlockExpression
    { 
        $current = $this_XBlockExpression_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXSwitchExpressionParserRuleCall_2()); 
    }
    this_XSwitchExpression_2=ruleXSwitchExpression
    { 
        $current = $this_XSwitchExpression_2.current; 
        afterParserOrEnumRuleCall();
    }

    |((((
)	'synchronized' 
	'(' 
))=>
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXSynchronizedExpressionParserRuleCall_3()); 
    }
    this_XSynchronizedExpression_3=ruleXSynchronizedExpression
    { 
        $current = $this_XSynchronizedExpression_3.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXFeatureCallParserRuleCall_4()); 
    }
    this_XFeatureCall_4=ruleXFeatureCall
    { 
        $current = $this_XFeatureCall_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXLiteralParserRuleCall_5()); 
    }
    this_XLiteral_5=ruleXLiteral
    { 
        $current = $this_XLiteral_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXIfExpressionParserRuleCall_6()); 
    }
    this_XIfExpression_6=ruleXIfExpression
    { 
        $current = $this_XIfExpression_6.current; 
        afterParserOrEnumRuleCall();
    }

    |((((
)	'for' 
	'(' 
(
(
ruleJvmFormalParameter
)
)	':' 
))=>
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXForLoopExpressionParserRuleCall_7()); 
    }
    this_XForLoopExpression_7=ruleXForLoopExpression
    { 
        $current = $this_XForLoopExpression_7.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXBasicForLoopExpressionParserRuleCall_8()); 
    }
    this_XBasicForLoopExpression_8=ruleXBasicForLoopExpression
    { 
        $current = $this_XBasicForLoopExpression_8.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXWhileExpressionParserRuleCall_9()); 
    }
    this_XWhileExpression_9=ruleXWhileExpression
    { 
        $current = $this_XWhileExpression_9.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXDoWhileExpressionParserRuleCall_10()); 
    }
    this_XDoWhileExpression_10=ruleXDoWhileExpression
    { 
        $current = $this_XDoWhileExpression_10.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXThrowExpressionParserRuleCall_11()); 
    }
    this_XThrowExpression_11=ruleXThrowExpression
    { 
        $current = $this_XThrowExpression_11.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXReturnExpressionParserRuleCall_12()); 
    }
    this_XReturnExpression_12=ruleXReturnExpression
    { 
        $current = $this_XReturnExpression_12.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXTryCatchFinallyExpressionParserRuleCall_13()); 
    }
    this_XTryCatchFinallyExpression_13=ruleXTryCatchFinallyExpression
    { 
        $current = $this_XTryCatchFinallyExpression_13.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXPrimaryExpressionAccess().getXParenthesizedExpressionParserRuleCall_14()); 
    }
    this_XParenthesizedExpression_14=ruleXParenthesizedExpression
    { 
        $current = $this_XParenthesizedExpression_14.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXLiteral
entryRuleXLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXLiteralRule()); }
	 iv_ruleXLiteral=ruleXLiteral 
	 { $current=$iv_ruleXLiteral.current; } 
	 EOF 
;

// Rule XLiteral
ruleXLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXCollectionLiteralParserRuleCall_0()); 
    }
    this_XCollectionLiteral_0=ruleXCollectionLiteral
    { 
        $current = $this_XCollectionLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |((((
)	'[' 
))=>
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXClosureParserRuleCall_1()); 
    }
    this_XClosure_1=ruleXClosure
    { 
        $current = $this_XClosure_1.current; 
        afterParserOrEnumRuleCall();
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXBooleanLiteralParserRuleCall_2()); 
    }
    this_XBooleanLiteral_2=ruleXBooleanLiteral
    { 
        $current = $this_XBooleanLiteral_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXNumberLiteralParserRuleCall_3()); 
    }
    this_XNumberLiteral_3=ruleXNumberLiteral
    { 
        $current = $this_XNumberLiteral_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXNullLiteralParserRuleCall_4()); 
    }
    this_XNullLiteral_4=ruleXNullLiteral
    { 
        $current = $this_XNullLiteral_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXStringLiteralParserRuleCall_5()); 
    }
    this_XStringLiteral_5=ruleXStringLiteral
    { 
        $current = $this_XStringLiteral_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXLiteralAccess().getXTypeLiteralParserRuleCall_6()); 
    }
    this_XTypeLiteral_6=ruleXTypeLiteral
    { 
        $current = $this_XTypeLiteral_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXCollectionLiteral
entryRuleXCollectionLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXCollectionLiteralRule()); }
	 iv_ruleXCollectionLiteral=ruleXCollectionLiteral 
	 { $current=$iv_ruleXCollectionLiteral.current; } 
	 EOF 
;

// Rule XCollectionLiteral
ruleXCollectionLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXCollectionLiteralAccess().getXSetLiteralParserRuleCall_0()); 
    }
    this_XSetLiteral_0=ruleXSetLiteral
    { 
        $current = $this_XSetLiteral_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXCollectionLiteralAccess().getXListLiteralParserRuleCall_1()); 
    }
    this_XListLiteral_1=ruleXListLiteral
    { 
        $current = $this_XListLiteral_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXSetLiteral
entryRuleXSetLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXSetLiteralRule()); }
	 iv_ruleXSetLiteral=ruleXSetLiteral 
	 { $current=$iv_ruleXSetLiteral.current; } 
	 EOF 
;

// Rule XSetLiteral
ruleXSetLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXSetLiteralAccess().getXSetLiteralAction_0(),
            $current);
    }
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXSetLiteralAccess().getNumberSignKeyword_1());
    }
	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXSetLiteralAccess().getLeftCurlyBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXSetLiteralAccess().getElementsXExpressionParserRuleCall_3_0_0()); 
	    }
		lv_elements_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSetLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXSetLiteralAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXSetLiteralAccess().getElementsXExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_elements_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSetLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6='}' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXSetLiteralAccess().getRightCurlyBracketKeyword_4());
    }
)
;





// Entry rule entryRuleXListLiteral
entryRuleXListLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXListLiteralRule()); }
	 iv_ruleXListLiteral=ruleXListLiteral 
	 { $current=$iv_ruleXListLiteral.current; } 
	 EOF 
;

// Rule XListLiteral
ruleXListLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXListLiteralAccess().getXListLiteralAction_0(),
            $current);
    }
)	otherlv_1='#' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXListLiteralAccess().getNumberSignKeyword_1());
    }
	otherlv_2='[' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXListLiteralAccess().getLeftSquareBracketKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXListLiteralAccess().getElementsXExpressionParserRuleCall_3_0_0()); 
	    }
		lv_elements_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXListLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXListLiteralAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXListLiteralAccess().getElementsXExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_elements_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXListLiteralRule());
	        }
       		add(
       			$current, 
       			"elements",
        		lv_elements_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=']' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXListLiteralAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleXClosure
entryRuleXClosure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXClosureRule()); }
	 iv_ruleXClosure=ruleXClosure 
	 { $current=$iv_ruleXClosure.current; } 
	 EOF 
;

// Rule XClosure
ruleXClosure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)	'[' 
))=>((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXClosureAccess().getXClosureAction_0_0_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXClosureAccess().getLeftSquareBracketKeyword_0_0_1());
    }
))(((((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>(((
(
		{ 
	        newCompositeNode(grammarAccess.getXClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_0_0()); 
	    }
		lv_declaredFormalParameters_2_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXClosureRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		lv_declaredFormalParameters_2_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXClosureAccess().getCommaKeyword_1_0_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_1_0_0_1_1_0()); 
	    }
		lv_declaredFormalParameters_4_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXClosureRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		lv_declaredFormalParameters_4_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		lv_explicitSyntax_5_0=	'|' 
    {
        newLeafNode(lv_explicitSyntax_5_0, grammarAccess.getXClosureAccess().getExplicitSyntaxVerticalLineKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXClosureRule());
	        }
       		setWithLastConsumed($current, "explicitSyntax", true, "|");
	    }

)
)))?(
(
		{ 
	        newCompositeNode(grammarAccess.getXClosureAccess().getExpressionXExpressionInClosureParserRuleCall_2_0()); 
	    }
		lv_expression_6_0=ruleXExpressionInClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXClosureRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_6_0, 
        		"XExpressionInClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_7=']' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getXClosureAccess().getRightSquareBracketKeyword_3());
    }
)
;





// Entry rule entryRuleXExpressionInClosure
entryRuleXExpressionInClosure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpressionInClosureRule()); }
	 iv_ruleXExpressionInClosure=ruleXExpressionInClosure 
	 { $current=$iv_ruleXExpressionInClosure.current; } 
	 EOF 
;

// Rule XExpressionInClosure
ruleXExpressionInClosure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXExpressionInClosureAccess().getXBlockExpressionAction_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getXExpressionInClosureAccess().getExpressionsXExpressionOrVarDeclarationParserRuleCall_1_0_0()); 
	    }
		lv_expressions_1_0=ruleXExpressionOrVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXExpressionInClosureRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_1_0, 
        		"XExpressionOrVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=';' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXExpressionInClosureAccess().getSemicolonKeyword_1_1());
    }
)?)*)
;





// Entry rule entryRuleXShortClosure
entryRuleXShortClosure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXShortClosureRule()); }
	 iv_ruleXShortClosure=ruleXShortClosure 
	 { $current=$iv_ruleXShortClosure.current; } 
	 EOF 
;

// Rule XShortClosure
ruleXShortClosure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXShortClosureAccess().getXClosureAction_0_0_0(),
            $current);
    }
)((
(
		{ 
	        newCompositeNode(grammarAccess.getXShortClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_0_0()); 
	    }
		lv_declaredFormalParameters_1_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXShortClosureRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		lv_declaredFormalParameters_1_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXShortClosureAccess().getCommaKeyword_0_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXShortClosureAccess().getDeclaredFormalParametersJvmFormalParameterParserRuleCall_0_0_1_1_1_0()); 
	    }
		lv_declaredFormalParameters_3_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXShortClosureRule());
	        }
       		add(
       			$current, 
       			"declaredFormalParameters",
        		lv_declaredFormalParameters_3_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
(
		lv_explicitSyntax_4_0=	'|' 
    {
        newLeafNode(lv_explicitSyntax_4_0, grammarAccess.getXShortClosureAccess().getExplicitSyntaxVerticalLineKeyword_0_0_2_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXShortClosureRule());
	        }
       		setWithLastConsumed($current, "explicitSyntax", true, "|");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getXShortClosureAccess().getExpressionXExpressionParserRuleCall_1_0()); 
	    }
		lv_expression_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXShortClosureRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXParenthesizedExpression
entryRuleXParenthesizedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXParenthesizedExpressionRule()); }
	 iv_ruleXParenthesizedExpression=ruleXParenthesizedExpression 
	 { $current=$iv_ruleXParenthesizedExpression.current; } 
	 EOF 
;

// Rule XParenthesizedExpression
ruleXParenthesizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXParenthesizedExpressionAccess().getLeftParenthesisKeyword_0());
    }

    { 
        newCompositeNode(grammarAccess.getXParenthesizedExpressionAccess().getXExpressionParserRuleCall_1()); 
    }
    this_XExpression_1=ruleXExpression
    { 
        $current = $this_XExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXParenthesizedExpressionAccess().getRightParenthesisKeyword_2());
    }
)
;





// Entry rule entryRuleXIfExpression
entryRuleXIfExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXIfExpressionRule()); }
	 iv_ruleXIfExpression=ruleXIfExpression 
	 { $current=$iv_ruleXIfExpression.current; } 
	 EOF 
;

// Rule XIfExpression
ruleXIfExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXIfExpressionAccess().getXIfExpressionAction_0(),
            $current);
    }
)	otherlv_1='if' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXIfExpressionAccess().getIfKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXIfExpressionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXIfExpressionAccess().getIfXExpressionParserRuleCall_3_0()); 
	    }
		lv_if_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXIfExpressionRule());
	        }
       		set(
       			$current, 
       			"if",
        		lv_if_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXIfExpressionAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXIfExpressionAccess().getThenXExpressionParserRuleCall_5_0()); 
	    }
		lv_then_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXIfExpressionRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'else' 
)=>	otherlv_6='else' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXIfExpressionAccess().getElseKeyword_6_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXIfExpressionAccess().getElseXExpressionParserRuleCall_6_1_0()); 
	    }
		lv_else_7_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXIfExpressionRule());
	        }
       		set(
       			$current, 
       			"else",
        		lv_else_7_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleXSwitchExpression
entryRuleXSwitchExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXSwitchExpressionRule()); }
	 iv_ruleXSwitchExpression=ruleXSwitchExpression 
	 { $current=$iv_ruleXSwitchExpression.current; } 
	 EOF 
;

// Rule XSwitchExpression
ruleXSwitchExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXSwitchExpressionAccess().getXSwitchExpressionAction_0(),
            $current);
    }
)	otherlv_1='switch' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXSwitchExpressionAccess().getSwitchKeyword_1());
    }
(((((	'(' 
(
(
ruleJvmFormalParameter
)
)	':' 
))=>(	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXSwitchExpressionAccess().getLeftParenthesisKeyword_2_0_0_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_2_0_0_0_1_0()); 
	    }
		lv_declaredParam_3_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"declaredParam",
        		lv_declaredParam_3_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXSwitchExpressionAccess().getColonKeyword_2_0_0_0_2());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getSwitchXExpressionParserRuleCall_2_0_1_0()); 
	    }
		lv_switch_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"switch",
        		lv_switch_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXSwitchExpressionAccess().getRightParenthesisKeyword_2_0_2());
    }
)
    |(((((
(
ruleJvmFormalParameter
)
)	':' 
))=>((
(
		{ 
	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_2_1_0_0_0_0()); 
	    }
		lv_declaredParam_7_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"declaredParam",
        		lv_declaredParam_7_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_8=':' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getXSwitchExpressionAccess().getColonKeyword_2_1_0_0_1());
    }
))?(
(
		{ 
	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getSwitchXExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_switch_9_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"switch",
        		lv_switch_9_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)))	otherlv_10='{' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getXSwitchExpressionAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getCasesXCasePartParserRuleCall_4_0()); 
	    }
		lv_cases_11_0=ruleXCasePart		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
	        }
       		add(
       			$current, 
       			"cases",
        		lv_cases_11_0, 
        		"XCasePart");
	        afterParserOrEnumRuleCall();
	    }

)
)*(	otherlv_12='default' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getXSwitchExpressionAccess().getDefaultKeyword_5_0());
    }
	otherlv_13=':' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getXSwitchExpressionAccess().getColonKeyword_5_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXSwitchExpressionAccess().getDefaultXExpressionParserRuleCall_5_2_0()); 
	    }
		lv_default_14_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSwitchExpressionRule());
	        }
       		set(
       			$current, 
       			"default",
        		lv_default_14_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?	otherlv_15='}' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getXSwitchExpressionAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleXCasePart
entryRuleXCasePart returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXCasePartRule()); }
	 iv_ruleXCasePart=ruleXCasePart 
	 { $current=$iv_ruleXCasePart.current; } 
	 EOF 
;

// Rule XCasePart
ruleXCasePart returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXCasePartAccess().getXCasePartAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXCasePartAccess().getTypeGuardJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeGuard_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXCasePartRule());
	        }
       		set(
       			$current, 
       			"typeGuard",
        		lv_typeGuard_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_2='case' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXCasePartAccess().getCaseKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXCasePartAccess().getCaseXExpressionParserRuleCall_2_1_0()); 
	    }
		lv_case_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXCasePartRule());
	        }
       		set(
       			$current, 
       			"case",
        		lv_case_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?((	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXCasePartAccess().getColonKeyword_3_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXCasePartAccess().getThenXExpressionParserRuleCall_3_0_1_0()); 
	    }
		lv_then_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXCasePartRule());
	        }
       		set(
       			$current, 
       			"then",
        		lv_then_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |(
(
		lv_fallThrough_6_0=	',' 
    {
        newLeafNode(lv_fallThrough_6_0, grammarAccess.getXCasePartAccess().getFallThroughCommaKeyword_3_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXCasePartRule());
	        }
       		setWithLastConsumed($current, "fallThrough", true, ",");
	    }

)
)))
;





// Entry rule entryRuleXForLoopExpression
entryRuleXForLoopExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXForLoopExpressionRule()); }
	 iv_ruleXForLoopExpression=ruleXForLoopExpression 
	 { $current=$iv_ruleXForLoopExpression.current; } 
	 EOF 
;

// Rule XForLoopExpression
ruleXForLoopExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)	'for' 
	'(' 
(
(
ruleJvmFormalParameter
)
)	':' 
))=>((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXForLoopExpressionAccess().getXForLoopExpressionAction_0_0_0(),
            $current);
    }
)	otherlv_1='for' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXForLoopExpressionAccess().getForKeyword_0_0_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXForLoopExpressionAccess().getLeftParenthesisKeyword_0_0_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXForLoopExpressionAccess().getDeclaredParamJvmFormalParameterParserRuleCall_0_0_3_0()); 
	    }
		lv_declaredParam_3_0=ruleJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"declaredParam",
        		lv_declaredParam_3_0, 
        		"JvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=':' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXForLoopExpressionAccess().getColonKeyword_0_0_4());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXForLoopExpressionAccess().getForExpressionXExpressionParserRuleCall_1_0()); 
	    }
		lv_forExpression_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"forExpression",
        		lv_forExpression_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXForLoopExpressionAccess().getRightParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXForLoopExpressionAccess().getEachExpressionXExpressionParserRuleCall_3_0()); 
	    }
		lv_eachExpression_7_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"eachExpression",
        		lv_eachExpression_7_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXBasicForLoopExpression
entryRuleXBasicForLoopExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXBasicForLoopExpressionRule()); }
	 iv_ruleXBasicForLoopExpression=ruleXBasicForLoopExpression 
	 { $current=$iv_ruleXBasicForLoopExpression.current; } 
	 EOF 
;

// Rule XBasicForLoopExpression
ruleXBasicForLoopExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXBasicForLoopExpressionAccess().getXBasicForLoopExpressionAction_0(),
            $current);
    }
)	otherlv_1='for' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXBasicForLoopExpressionAccess().getForKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXBasicForLoopExpressionAccess().getLeftParenthesisKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_0_0()); 
	    }
		lv_initExpressions_3_0=ruleXExpressionOrVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
	        }
       		add(
       			$current, 
       			"initExpressions",
        		lv_initExpressions_3_0, 
        		"XExpressionOrVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXBasicForLoopExpressionAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getInitExpressionsXExpressionOrVarDeclarationParserRuleCall_3_1_1_0()); 
	    }
		lv_initExpressions_5_0=ruleXExpressionOrVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
	        }
       		add(
       			$current, 
       			"initExpressions",
        		lv_initExpressions_5_0, 
        		"XExpressionOrVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXBasicForLoopExpressionAccess().getSemicolonKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getExpressionXExpressionParserRuleCall_5_0()); 
	    }
		lv_expression_7_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_7_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getXBasicForLoopExpressionAccess().getSemicolonKeyword_6());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getUpdateExpressionsXExpressionParserRuleCall_7_0_0()); 
	    }
		lv_updateExpressions_9_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
	        }
       		add(
       			$current, 
       			"updateExpressions",
        		lv_updateExpressions_9_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getXBasicForLoopExpressionAccess().getCommaKeyword_7_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getUpdateExpressionsXExpressionParserRuleCall_7_1_1_0()); 
	    }
		lv_updateExpressions_11_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
	        }
       		add(
       			$current, 
       			"updateExpressions",
        		lv_updateExpressions_11_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getXBasicForLoopExpressionAccess().getRightParenthesisKeyword_8());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXBasicForLoopExpressionAccess().getEachExpressionXExpressionParserRuleCall_9_0()); 
	    }
		lv_eachExpression_13_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBasicForLoopExpressionRule());
	        }
       		set(
       			$current, 
       			"eachExpression",
        		lv_eachExpression_13_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXWhileExpression
entryRuleXWhileExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXWhileExpressionRule()); }
	 iv_ruleXWhileExpression=ruleXWhileExpression 
	 { $current=$iv_ruleXWhileExpression.current; } 
	 EOF 
;

// Rule XWhileExpression
ruleXWhileExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXWhileExpressionAccess().getXWhileExpressionAction_0(),
            $current);
    }
)	otherlv_1='while' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXWhileExpressionAccess().getWhileKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXWhileExpressionAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXWhileExpressionAccess().getPredicateXExpressionParserRuleCall_3_0()); 
	    }
		lv_predicate_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXWhileExpressionRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXWhileExpressionAccess().getRightParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXWhileExpressionAccess().getBodyXExpressionParserRuleCall_5_0()); 
	    }
		lv_body_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXWhileExpressionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXDoWhileExpression
entryRuleXDoWhileExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXDoWhileExpressionRule()); }
	 iv_ruleXDoWhileExpression=ruleXDoWhileExpression 
	 { $current=$iv_ruleXDoWhileExpression.current; } 
	 EOF 
;

// Rule XDoWhileExpression
ruleXDoWhileExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXDoWhileExpressionAccess().getXDoWhileExpressionAction_0(),
            $current);
    }
)	otherlv_1='do' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXDoWhileExpressionAccess().getDoKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXDoWhileExpressionAccess().getBodyXExpressionParserRuleCall_2_0()); 
	    }
		lv_body_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXDoWhileExpressionRule());
	        }
       		set(
       			$current, 
       			"body",
        		lv_body_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='while' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXDoWhileExpressionAccess().getWhileKeyword_3());
    }
	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXDoWhileExpressionAccess().getLeftParenthesisKeyword_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXDoWhileExpressionAccess().getPredicateXExpressionParserRuleCall_5_0()); 
	    }
		lv_predicate_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXDoWhileExpressionRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6=')' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXDoWhileExpressionAccess().getRightParenthesisKeyword_6());
    }
)
;





// Entry rule entryRuleXBlockExpression
entryRuleXBlockExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXBlockExpressionRule()); }
	 iv_ruleXBlockExpression=ruleXBlockExpression 
	 { $current=$iv_ruleXBlockExpression.current; } 
	 EOF 
;

// Rule XBlockExpression
ruleXBlockExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXBlockExpressionAccess().getXBlockExpressionAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXBlockExpressionAccess().getLeftCurlyBracketKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXBlockExpressionAccess().getExpressionsXExpressionOrVarDeclarationParserRuleCall_2_0_0()); 
	    }
		lv_expressions_2_0=ruleXExpressionOrVarDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXBlockExpressionRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"XExpressionOrVarDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXBlockExpressionAccess().getSemicolonKeyword_2_1());
    }
)?)*	otherlv_4='}' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXBlockExpressionAccess().getRightCurlyBracketKeyword_3());
    }
)
;





// Entry rule entryRuleXExpressionOrVarDeclaration
entryRuleXExpressionOrVarDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXExpressionOrVarDeclarationRule()); }
	 iv_ruleXExpressionOrVarDeclaration=ruleXExpressionOrVarDeclaration 
	 { $current=$iv_ruleXExpressionOrVarDeclaration.current; } 
	 EOF 
;

// Rule XExpressionOrVarDeclaration
ruleXExpressionOrVarDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getXExpressionOrVarDeclarationAccess().getXVariableDeclarationParserRuleCall_0()); 
    }
    this_XVariableDeclaration_0=ruleXVariableDeclaration
    { 
        $current = $this_XVariableDeclaration_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getXExpressionOrVarDeclarationAccess().getXExpressionParserRuleCall_1()); 
    }
    this_XExpression_1=ruleXExpression
    { 
        $current = $this_XExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleXVariableDeclaration
entryRuleXVariableDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXVariableDeclarationRule()); }
	 iv_ruleXVariableDeclaration=ruleXVariableDeclaration 
	 { $current=$iv_ruleXVariableDeclaration.current; } 
	 EOF 
;

// Rule XVariableDeclaration
ruleXVariableDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXVariableDeclarationAccess().getXVariableDeclarationAction_0(),
            $current);
    }
)((
(
		lv_writeable_1_0=	'var' 
    {
        newLeafNode(lv_writeable_1_0, grammarAccess.getXVariableDeclarationAccess().getWriteableVarKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXVariableDeclarationRule());
	        }
       		setWithLastConsumed($current, "writeable", true, "var");
	    }

)
)
    |	otherlv_2='val' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXVariableDeclarationAccess().getValKeyword_1_1());
    }
)(((((
(
ruleJvmTypeReference
)
)(
(
ruleValidID
)
)))=>((
(
		{ 
	        newCompositeNode(grammarAccess.getXVariableDeclarationAccess().getTypeJvmTypeReferenceParserRuleCall_2_0_0_0_0()); 
	    }
		lv_type_3_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXVariableDeclarationAccess().getNameValidIDParserRuleCall_2_0_0_1_0()); 
	    }
		lv_name_4_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXVariableDeclarationAccess().getNameValidIDParserRuleCall_2_1_0()); 
	    }
		lv_name_5_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_5_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_6='=' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXVariableDeclarationAccess().getEqualsSignKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXVariableDeclarationAccess().getRightXExpressionParserRuleCall_3_1_0()); 
	    }
		lv_right_7_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXVariableDeclarationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_7_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleJvmFormalParameter
entryRuleJvmFormalParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmFormalParameterRule()); }
	 iv_ruleJvmFormalParameter=ruleJvmFormalParameter 
	 { $current=$iv_ruleJvmFormalParameter.current; } 
	 EOF 
;

// Rule JvmFormalParameter
ruleJvmFormalParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getJvmFormalParameterAccess().getParameterTypeJvmTypeReferenceParserRuleCall_0_0()); 
	    }
		lv_parameterType_0_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmFormalParameterRule());
	        }
       		set(
       			$current, 
       			"parameterType",
        		lv_parameterType_0_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmFormalParameterAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmFormalParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleFullJvmFormalParameter
entryRuleFullJvmFormalParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFullJvmFormalParameterRule()); }
	 iv_ruleFullJvmFormalParameter=ruleFullJvmFormalParameter 
	 { $current=$iv_ruleFullJvmFormalParameter.current; } 
	 EOF 
;

// Rule FullJvmFormalParameter
ruleFullJvmFormalParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFullJvmFormalParameterAccess().getParameterTypeJvmTypeReferenceParserRuleCall_0_0()); 
	    }
		lv_parameterType_0_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFullJvmFormalParameterRule());
	        }
       		set(
       			$current, 
       			"parameterType",
        		lv_parameterType_0_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFullJvmFormalParameterAccess().getNameValidIDParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFullJvmFormalParameterRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXFeatureCall
entryRuleXFeatureCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXFeatureCallRule()); }
	 iv_ruleXFeatureCall=ruleXFeatureCall 
	 { $current=$iv_ruleXFeatureCall.current; } 
	 EOF 
;

// Rule XFeatureCall
ruleXFeatureCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXFeatureCallAccess().getXFeatureCallAction_0(),
            $current);
    }
)(	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXFeatureCallAccess().getLessThanSignKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_typeArguments_2_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_2_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXFeatureCallAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
	    }
		lv_typeArguments_4_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_4_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getXFeatureCallAccess().getGreaterThanSignKeyword_1_3());
    }
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXFeatureCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureJvmIdentifiableElementCrossReference_2_0()); 
	    }
		ruleIdOrSuper		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((
(
	'(' 
 

)
)=>
(
		lv_explicitOperationCall_7_0=	'(' 
    {
        newLeafNode(lv_explicitOperationCall_7_0, grammarAccess.getXFeatureCallAccess().getExplicitOperationCallLeftParenthesisKeyword_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXFeatureCallRule());
	        }
       		setWithLastConsumed($current, "explicitOperationCall", true, "(");
	    }

)
)(((((
)((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXShortClosureParserRuleCall_3_1_0_0()); 
	    }
		lv_featureCallArguments_8_0=ruleXShortClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		lv_featureCallArguments_8_0, 
        		"XShortClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_0_0()); 
	    }
		lv_featureCallArguments_9_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		lv_featureCallArguments_9_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_10=',' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getXFeatureCallAccess().getCommaKeyword_3_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXExpressionParserRuleCall_3_1_1_1_1_0()); 
	    }
		lv_featureCallArguments_11_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		lv_featureCallArguments_11_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*))?	otherlv_12=')' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getXFeatureCallAccess().getRightParenthesisKeyword_3_2());
    }
)?((((
)	'[' 
))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXFeatureCallAccess().getFeatureCallArgumentsXClosureParserRuleCall_4_0()); 
	    }
		lv_featureCallArguments_13_0=ruleXClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFeatureCallRule());
	        }
       		add(
       			$current, 
       			"featureCallArguments",
        		lv_featureCallArguments_13_0, 
        		"XClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleFeatureCallID
entryRuleFeatureCallID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getFeatureCallIDRule()); } 
	 iv_ruleFeatureCallID=ruleFeatureCallID 
	 { $current=$iv_ruleFeatureCallID.current.getText(); }  
	 EOF 
;

// Rule FeatureCallID
ruleFeatureCallID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getFeatureCallIDAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='extends' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeatureCallIDAccess().getExtendsKeyword_1()); 
    }

    |
	kw='static' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeatureCallIDAccess().getStaticKeyword_2()); 
    }

    |
	kw='import' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeatureCallIDAccess().getImportKeyword_3()); 
    }

    |
	kw='extension' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getFeatureCallIDAccess().getExtensionKeyword_4()); 
    }
)
    ;





// Entry rule entryRuleIdOrSuper
entryRuleIdOrSuper returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getIdOrSuperRule()); } 
	 iv_ruleIdOrSuper=ruleIdOrSuper 
	 { $current=$iv_ruleIdOrSuper.current.getText(); }  
	 EOF 
;

// Rule IdOrSuper
ruleIdOrSuper returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getIdOrSuperAccess().getFeatureCallIDParserRuleCall_0()); 
    }
    this_FeatureCallID_0=ruleFeatureCallID    {
		$current.merge(this_FeatureCallID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

    |
	kw='super' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getIdOrSuperAccess().getSuperKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleXConstructorCall
entryRuleXConstructorCall returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXConstructorCallRule()); }
	 iv_ruleXConstructorCall=ruleXConstructorCall 
	 { $current=$iv_ruleXConstructorCall.current; } 
	 EOF 
;

// Rule XConstructorCall
ruleXConstructorCall returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXConstructorCallAccess().getXConstructorCallAction_0(),
            $current);
    }
)	otherlv_1='new' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXConstructorCallAccess().getNewKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXConstructorCallRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getConstructorJvmConstructorCrossReference_2_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'<' 
)=>	otherlv_3='<' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXConstructorCallAccess().getLessThanSignKeyword_3_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_1_0()); 
	    }
		lv_typeArguments_4_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_4_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getXConstructorCallAccess().getCommaKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getTypeArgumentsJvmArgumentTypeReferenceParserRuleCall_3_2_1_0()); 
	    }
		lv_typeArguments_6_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
	        }
       		add(
       			$current, 
       			"typeArguments",
        		lv_typeArguments_6_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_7='>' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getXConstructorCallAccess().getGreaterThanSignKeyword_3_3());
    }
)?(((
(
	'(' 
 

)
)=>
(
		lv_explicitConstructorCall_8_0=	'(' 
    {
        newLeafNode(lv_explicitConstructorCall_8_0, grammarAccess.getXConstructorCallAccess().getExplicitConstructorCallLeftParenthesisKeyword_4_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXConstructorCallRule());
	        }
       		setWithLastConsumed($current, "explicitConstructorCall", true, "(");
	    }

)
)(((((
)((
(
ruleJvmFormalParameter
)
)(	',' 
(
(
ruleJvmFormalParameter
)
))*)?(
(
	'|' 
 

)
)))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getArgumentsXShortClosureParserRuleCall_4_1_0_0()); 
	    }
		lv_arguments_9_0=ruleXShortClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_9_0, 
        		"XShortClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getArgumentsXExpressionParserRuleCall_4_1_1_0_0()); 
	    }
		lv_arguments_10_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_10_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getXConstructorCallAccess().getCommaKeyword_4_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getArgumentsXExpressionParserRuleCall_4_1_1_1_1_0()); 
	    }
		lv_arguments_12_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_12_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*))?	otherlv_13=')' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getXConstructorCallAccess().getRightParenthesisKeyword_4_2());
    }
)?((((
)	'[' 
))=>
(
		{ 
	        newCompositeNode(grammarAccess.getXConstructorCallAccess().getArgumentsXClosureParserRuleCall_5_0()); 
	    }
		lv_arguments_14_0=ruleXClosure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXConstructorCallRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_14_0, 
        		"XClosure");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleXBooleanLiteral
entryRuleXBooleanLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXBooleanLiteralRule()); }
	 iv_ruleXBooleanLiteral=ruleXBooleanLiteral 
	 { $current=$iv_ruleXBooleanLiteral.current; } 
	 EOF 
;

// Rule XBooleanLiteral
ruleXBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXBooleanLiteralAccess().getXBooleanLiteralAction_0(),
            $current);
    }
)(	otherlv_1='false' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXBooleanLiteralAccess().getFalseKeyword_1_0());
    }

    |(
(
		lv_isTrue_2_0=	'true' 
    {
        newLeafNode(lv_isTrue_2_0, grammarAccess.getXBooleanLiteralAccess().getIsTrueTrueKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "isTrue", true, "true");
	    }

)
)))
;





// Entry rule entryRuleXNullLiteral
entryRuleXNullLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXNullLiteralRule()); }
	 iv_ruleXNullLiteral=ruleXNullLiteral 
	 { $current=$iv_ruleXNullLiteral.current; } 
	 EOF 
;

// Rule XNullLiteral
ruleXNullLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXNullLiteralAccess().getXNullLiteralAction_0(),
            $current);
    }
)	otherlv_1='null' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXNullLiteralAccess().getNullKeyword_1());
    }
)
;





// Entry rule entryRuleXNumberLiteral
entryRuleXNumberLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXNumberLiteralRule()); }
	 iv_ruleXNumberLiteral=ruleXNumberLiteral 
	 { $current=$iv_ruleXNumberLiteral.current; } 
	 EOF 
;

// Rule XNumberLiteral
ruleXNumberLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXNumberLiteralAccess().getXNumberLiteralAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXNumberLiteralAccess().getValueNumberParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleNumber		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXNumberLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Number");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXStringLiteral
entryRuleXStringLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXStringLiteralRule()); }
	 iv_ruleXStringLiteral=ruleXStringLiteral 
	 { $current=$iv_ruleXStringLiteral.current; } 
	 EOF 
;

// Rule XStringLiteral
ruleXStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXStringLiteralAccess().getXStringLiteralAction_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_STRING
		{
			newLeafNode(lv_value_1_0, grammarAccess.getXStringLiteralAccess().getValueSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXStringLiteralRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRuleXTypeLiteral
entryRuleXTypeLiteral returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXTypeLiteralRule()); }
	 iv_ruleXTypeLiteral=ruleXTypeLiteral 
	 { $current=$iv_ruleXTypeLiteral.current; } 
	 EOF 
;

// Rule XTypeLiteral
ruleXTypeLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXTypeLiteralAccess().getXTypeLiteralAction_0(),
            $current);
    }
)	otherlv_1='typeof' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXTypeLiteralAccess().getTypeofKeyword_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXTypeLiteralAccess().getLeftParenthesisKeyword_2());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXTypeLiteralRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXTypeLiteralAccess().getTypeJvmTypeCrossReference_3_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXTypeLiteralAccess().getArrayDimensionsArrayBracketsParserRuleCall_4_0()); 
	    }
		lv_arrayDimensions_4_0=ruleArrayBrackets		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTypeLiteralRule());
	        }
       		add(
       			$current, 
       			"arrayDimensions",
        		lv_arrayDimensions_4_0, 
        		"ArrayBrackets");
	        afterParserOrEnumRuleCall();
	    }

)
)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getXTypeLiteralAccess().getRightParenthesisKeyword_5());
    }
)
;





// Entry rule entryRuleXThrowExpression
entryRuleXThrowExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXThrowExpressionRule()); }
	 iv_ruleXThrowExpression=ruleXThrowExpression 
	 { $current=$iv_ruleXThrowExpression.current; } 
	 EOF 
;

// Rule XThrowExpression
ruleXThrowExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXThrowExpressionAccess().getXThrowExpressionAction_0(),
            $current);
    }
)	otherlv_1='throw' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXThrowExpressionAccess().getThrowKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXThrowExpressionAccess().getExpressionXExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXThrowExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXReturnExpression
entryRuleXReturnExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXReturnExpressionRule()); }
	 iv_ruleXReturnExpression=ruleXReturnExpression 
	 { $current=$iv_ruleXReturnExpression.current; } 
	 EOF 
;

// Rule XReturnExpression
ruleXReturnExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXReturnExpressionAccess().getXReturnExpressionAction_0(),
            $current);
    }
)	otherlv_1='return' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXReturnExpressionAccess().getReturnKeyword_1());
    }
((	'extends' 
 | 	'static' 
 | 	'import' 
 | 	'extension' 
 | 	'!' 
 | 	'-' 
 | 	'+' 
 | 	'new' 
 | 	'{' 
 | 	'switch' 
 | 	'synchronized' 
 | 	'<' 
 | 	'super' 
 | 	'#' 
 | 	'[' 
 | 	'false' 
 | 	'true' 
 | 	'null' 
 | 	'typeof' 
 | 	'if' 
 | 	'for' 
 | 	'while' 
 | 	'do' 
 | 	'throw' 
 | 	'return' 
 | 	'try' 
 | 	'(' 
 | 	RULE_ID | 	RULE_HEX | 	RULE_INT | 	RULE_DECIMAL | 	RULE_STRING)=>
(
		{ 
	        newCompositeNode(grammarAccess.getXReturnExpressionAccess().getExpressionXExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXReturnExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleXTryCatchFinallyExpression
entryRuleXTryCatchFinallyExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionRule()); }
	 iv_ruleXTryCatchFinallyExpression=ruleXTryCatchFinallyExpression 
	 { $current=$iv_ruleXTryCatchFinallyExpression.current; } 
	 EOF 
;

// Rule XTryCatchFinallyExpression
ruleXTryCatchFinallyExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXTryCatchFinallyExpressionAccess().getXTryCatchFinallyExpressionAction_0(),
            $current);
    }
)	otherlv_1='try' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXTryCatchFinallyExpressionAccess().getTryKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionAccess().getExpressionXExpressionParserRuleCall_2_0()); 
	    }
		lv_expression_2_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTryCatchFinallyExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_2_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((((	'catch' 
)=>
(
		{ 
	        newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionAccess().getCatchClausesXCatchClauseParserRuleCall_3_0_0_0()); 
	    }
		lv_catchClauses_3_0=ruleXCatchClause		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTryCatchFinallyExpressionRule());
	        }
       		add(
       			$current, 
       			"catchClauses",
        		lv_catchClauses_3_0, 
        		"XCatchClause");
	        afterParserOrEnumRuleCall();
	    }

)
)+(((	'finally' 
)=>	otherlv_4='finally' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyKeyword_3_0_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionXExpressionParserRuleCall_3_0_1_1_0()); 
	    }
		lv_finallyExpression_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTryCatchFinallyExpressionRule());
	        }
       		set(
       			$current, 
       			"finallyExpression",
        		lv_finallyExpression_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |(	otherlv_6='finally' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXTryCatchFinallyExpressionAccess().getFinallyExpressionXExpressionParserRuleCall_3_1_1_0()); 
	    }
		lv_finallyExpression_7_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXTryCatchFinallyExpressionRule());
	        }
       		set(
       			$current, 
       			"finallyExpression",
        		lv_finallyExpression_7_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))))
;





// Entry rule entryRuleXSynchronizedExpression
entryRuleXSynchronizedExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXSynchronizedExpressionRule()); }
	 iv_ruleXSynchronizedExpression=ruleXSynchronizedExpression 
	 { $current=$iv_ruleXSynchronizedExpression.current; } 
	 EOF 
;

// Rule XSynchronizedExpression
ruleXSynchronizedExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((((
)	'synchronized' 
	'(' 
))=>((
    {
        $current = forceCreateModelElement(
            grammarAccess.getXSynchronizedExpressionAccess().getXSynchronizedExpressionAction_0_0_0(),
            $current);
    }
)	otherlv_1='synchronized' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXSynchronizedExpressionAccess().getSynchronizedKeyword_0_0_1());
    }
	otherlv_2='(' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXSynchronizedExpressionAccess().getLeftParenthesisKeyword_0_0_2());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getXSynchronizedExpressionAccess().getParamXExpressionParserRuleCall_1_0()); 
	    }
		lv_param_3_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSynchronizedExpressionRule());
	        }
       		set(
       			$current, 
       			"param",
        		lv_param_3_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXSynchronizedExpressionAccess().getRightParenthesisKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXSynchronizedExpressionAccess().getExpressionXExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_5_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXSynchronizedExpressionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleXCatchClause
entryRuleXCatchClause returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXCatchClauseRule()); }
	 iv_ruleXCatchClause=ruleXCatchClause 
	 { $current=$iv_ruleXCatchClause.current; } 
	 EOF 
;

// Rule XCatchClause
ruleXCatchClause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((	'catch' 
)=>	otherlv_0='catch' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXCatchClauseAccess().getCatchKeyword_0());
    }
)	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getXCatchClauseAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXCatchClauseAccess().getDeclaredParamFullJvmFormalParameterParserRuleCall_2_0()); 
	    }
		lv_declaredParam_2_0=ruleFullJvmFormalParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXCatchClauseRule());
	        }
       		set(
       			$current, 
       			"declaredParam",
        		lv_declaredParam_2_0, 
        		"FullJvmFormalParameter");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=')' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getXCatchClauseAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXCatchClauseAccess().getExpressionXExpressionParserRuleCall_4_0()); 
	    }
		lv_expression_4_0=ruleXExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXCatchClauseRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_4_0, 
        		"XExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }
(((
	'.' 
)=>
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
)
    { 
        newCompositeNode(grammarAccess.getQualifiedNameAccess().getValidIDParserRuleCall_1_1()); 
    }
    this_ValidID_2=ruleValidID    {
		$current.merge(this_ValidID_2);
    }

    { 
        afterParserOrEnumRuleCall();
    }
)*)
    ;





// Entry rule entryRuleNumber
entryRuleNumber returns [String current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
	}
	:
	{ newCompositeNode(grammarAccess.getNumberRule()); } 
	 iv_ruleNumber=ruleNumber 
	 { $current=$iv_ruleNumber.current.getText(); }  
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Number
ruleNumber returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
    }
    @after { leaveRule(); }:
(    this_HEX_0=RULE_HEX    {
		$current.merge(this_HEX_0);
    }

    { 
    newLeafNode(this_HEX_0, grammarAccess.getNumberAccess().getHEXTerminalRuleCall_0()); 
    }

    |((    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_0_0()); 
    }

    |    this_DECIMAL_2=RULE_DECIMAL    {
		$current.merge(this_DECIMAL_2);
    }

    { 
    newLeafNode(this_DECIMAL_2, grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_0_1()); 
    }
)(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNumberAccess().getFullStopKeyword_1_1_0()); 
    }
(    this_INT_4=RULE_INT    {
		$current.merge(this_INT_4);
    }

    { 
    newLeafNode(this_INT_4, grammarAccess.getNumberAccess().getINTTerminalRuleCall_1_1_1_0()); 
    }

    |    this_DECIMAL_5=RULE_DECIMAL    {
		$current.merge(this_DECIMAL_5);
    }

    { 
    newLeafNode(this_DECIMAL_5, grammarAccess.getNumberAccess().getDECIMALTerminalRuleCall_1_1_1_1()); 
    }
))?))
    ;
finally {
	myHiddenTokenState.restore();
}







// Entry rule entryRuleJvmTypeReference
entryRuleJvmTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmTypeReferenceRule()); }
	 iv_ruleJvmTypeReference=ruleJvmTypeReference 
	 { $current=$iv_ruleJvmTypeReference.current; } 
	 EOF 
;

// Rule JvmTypeReference
ruleJvmTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getJvmParameterizedTypeReferenceParserRuleCall_0_0()); 
    }
    this_JvmParameterizedTypeReference_0=ruleJvmParameterizedTypeReference
    { 
        $current = $this_JvmParameterizedTypeReference_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
)	ruleArrayBrackets))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getJvmTypeReferenceAccess().getJvmGenericArrayTypeReferenceComponentTypeAction_0_1_0_0(),
            $current);
    }
)
    { 
        newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getArrayBracketsParserRuleCall_0_1_0_1()); 
    }
ruleArrayBrackets
    { 
        afterParserOrEnumRuleCall();
    }
))*)
    |
    { 
        newCompositeNode(grammarAccess.getJvmTypeReferenceAccess().getXFunctionTypeRefParserRuleCall_1()); 
    }
    this_XFunctionTypeRef_3=ruleXFunctionTypeRef
    { 
        $current = $this_XFunctionTypeRef_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleArrayBrackets
entryRuleArrayBrackets returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayBracketsRule()); } 
	 iv_ruleArrayBrackets=ruleArrayBrackets 
	 { $current=$iv_ruleArrayBrackets.current.getText(); }  
	 EOF 
;

// Rule ArrayBrackets
ruleArrayBrackets returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayBracketsAccess().getLeftSquareBracketKeyword_0()); 
    }

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getArrayBracketsAccess().getRightSquareBracketKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleXFunctionTypeRef
entryRuleXFunctionTypeRef returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXFunctionTypeRefRule()); }
	 iv_ruleXFunctionTypeRef=ruleXFunctionTypeRef 
	 { $current=$iv_ruleXFunctionTypeRef.current; } 
	 EOF 
;

// Rule XFunctionTypeRef
ruleXFunctionTypeRef returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXFunctionTypeRefAccess().getLeftParenthesisKeyword_0_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_0_0()); 
	    }
		lv_paramTypes_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
	        }
       		add(
       			$current, 
       			"paramTypes",
        		lv_paramTypes_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getXFunctionTypeRefAccess().getCommaKeyword_0_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getParamTypesJvmTypeReferenceParserRuleCall_0_1_1_1_0()); 
	    }
		lv_paramTypes_3_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
	        }
       		add(
       			$current, 
       			"paramTypes",
        		lv_paramTypes_3_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?	otherlv_4=')' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getXFunctionTypeRefAccess().getRightParenthesisKeyword_0_2());
    }
)?	otherlv_5='=>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getXFunctionTypeRefAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getXFunctionTypeRefAccess().getReturnTypeJvmTypeReferenceParserRuleCall_2_0()); 
	    }
		lv_returnType_6_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXFunctionTypeRefRule());
	        }
       		set(
       			$current, 
       			"returnType",
        		lv_returnType_6_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmParameterizedTypeReference
entryRuleJvmParameterizedTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceRule()); }
	 iv_ruleJvmParameterizedTypeReference=ruleJvmParameterizedTypeReference 
	 { $current=$iv_ruleJvmParameterizedTypeReference.current; } 
	 EOF 
;

// Rule JvmParameterizedTypeReference
ruleJvmParameterizedTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_0_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'<' 
)=>	otherlv_1='<' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_1_0()); 
	    }
		lv_arguments_2_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_2_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_2_1_0()); 
	    }
		lv_arguments_4_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_4_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5='>' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_3());
    }
(((((
)	'.' 
))=>((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getJvmParameterizedTypeReferenceAccess().getJvmInnerTypeReferenceOuterAction_1_4_0_0_0(),
            $current);
    }
)	otherlv_7='.' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getJvmParameterizedTypeReferenceAccess().getFullStopKeyword_1_4_0_0_1());
    }
))(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getTypeJvmTypeCrossReference_1_4_1_0()); 
	    }
		ruleValidID		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(((	'<' 
)=>	otherlv_9='<' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getJvmParameterizedTypeReferenceAccess().getLessThanSignKeyword_1_4_2_0());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_1_0()); 
	    }
		lv_arguments_10_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_10_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_11=',' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getJvmParameterizedTypeReferenceAccess().getCommaKeyword_1_4_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmParameterizedTypeReferenceAccess().getArgumentsJvmArgumentTypeReferenceParserRuleCall_1_4_2_2_1_0()); 
	    }
		lv_arguments_12_0=ruleJvmArgumentTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmParameterizedTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"arguments",
        		lv_arguments_12_0, 
        		"JvmArgumentTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_13='>' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getJvmParameterizedTypeReferenceAccess().getGreaterThanSignKeyword_1_4_2_3());
    }
)?)*)?)
;





// Entry rule entryRuleJvmArgumentTypeReference
entryRuleJvmArgumentTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceRule()); }
	 iv_ruleJvmArgumentTypeReference=ruleJvmArgumentTypeReference 
	 { $current=$iv_ruleJvmArgumentTypeReference.current; } 
	 EOF 
;

// Rule JvmArgumentTypeReference
ruleJvmArgumentTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmTypeReferenceParserRuleCall_0()); 
    }
    this_JvmTypeReference_0=ruleJvmTypeReference
    { 
        $current = $this_JvmTypeReference_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getJvmArgumentTypeReferenceAccess().getJvmWildcardTypeReferenceParserRuleCall_1()); 
    }
    this_JvmWildcardTypeReference_1=ruleJvmWildcardTypeReference
    { 
        $current = $this_JvmWildcardTypeReference_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleJvmWildcardTypeReference
entryRuleJvmWildcardTypeReference returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceRule()); }
	 iv_ruleJvmWildcardTypeReference=ruleJvmWildcardTypeReference 
	 { $current=$iv_ruleJvmWildcardTypeReference.current; } 
	 EOF 
;

// Rule JvmWildcardTypeReference
ruleJvmWildcardTypeReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getJvmWildcardTypeReferenceAccess().getJvmWildcardTypeReferenceAction_0(),
            $current);
    }
)	otherlv_1='?' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getJvmWildcardTypeReferenceAccess().getQuestionMarkKeyword_1());
    }
(((
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundParserRuleCall_2_0_0_0()); 
	    }
		lv_constraints_2_0=ruleJvmUpperBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_2_0, 
        		"JvmUpperBound");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmUpperBoundAndedParserRuleCall_2_0_1_0()); 
	    }
		lv_constraints_3_0=ruleJvmUpperBoundAnded		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_3_0, 
        		"JvmUpperBoundAnded");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundParserRuleCall_2_1_0_0()); 
	    }
		lv_constraints_4_0=ruleJvmLowerBound		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_4_0, 
        		"JvmLowerBound");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmWildcardTypeReferenceAccess().getConstraintsJvmLowerBoundAndedParserRuleCall_2_1_1_0()); 
	    }
		lv_constraints_5_0=ruleJvmLowerBoundAnded		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmWildcardTypeReferenceRule());
	        }
       		add(
       			$current, 
       			"constraints",
        		lv_constraints_5_0, 
        		"JvmLowerBoundAnded");
	        afterParserOrEnumRuleCall();
	    }

)
)*))?)
;





// Entry rule entryRuleJvmUpperBound
entryRuleJvmUpperBound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmUpperBoundRule()); }
	 iv_ruleJvmUpperBound=ruleJvmUpperBound 
	 { $current=$iv_ruleJvmUpperBound.current; } 
	 EOF 
;

// Rule JvmUpperBound
ruleJvmUpperBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='extends' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmUpperBoundAccess().getExtendsKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmUpperBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmUpperBoundRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmUpperBoundAnded
entryRuleJvmUpperBoundAnded returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmUpperBoundAndedRule()); }
	 iv_ruleJvmUpperBoundAnded=ruleJvmUpperBoundAnded 
	 { $current=$iv_ruleJvmUpperBoundAnded.current; } 
	 EOF 
;

// Rule JvmUpperBoundAnded
ruleJvmUpperBoundAnded returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='&' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmUpperBoundAndedAccess().getAmpersandKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmUpperBoundAndedAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmUpperBoundAndedRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmLowerBound
entryRuleJvmLowerBound returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmLowerBoundRule()); }
	 iv_ruleJvmLowerBound=ruleJvmLowerBound 
	 { $current=$iv_ruleJvmLowerBound.current; } 
	 EOF 
;

// Rule JvmLowerBound
ruleJvmLowerBound returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='super' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmLowerBoundAccess().getSuperKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmLowerBoundAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmLowerBoundRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleJvmLowerBoundAnded
entryRuleJvmLowerBoundAnded returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getJvmLowerBoundAndedRule()); }
	 iv_ruleJvmLowerBoundAnded=ruleJvmLowerBoundAnded 
	 { $current=$iv_ruleJvmLowerBoundAnded.current; } 
	 EOF 
;

// Rule JvmLowerBoundAnded
ruleJvmLowerBoundAnded returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='&' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getJvmLowerBoundAndedAccess().getAmpersandKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getJvmLowerBoundAndedAccess().getTypeReferenceJvmTypeReferenceParserRuleCall_1_0()); 
	    }
		lv_typeReference_1_0=ruleJvmTypeReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getJvmLowerBoundAndedRule());
	        }
       		set(
       			$current, 
       			"typeReference",
        		lv_typeReference_1_0, 
        		"JvmTypeReference");
	        afterParserOrEnumRuleCall();
	    }

)
))
;







// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 iv_ruleQualifiedNameWithWildcard=ruleQualifiedNameWithWildcard 
	 { $current=$iv_ruleQualifiedNameWithWildcard.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); 
    }
    this_QualifiedName_0=ruleQualifiedName    {
		$current.merge(this_QualifiedName_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopKeyword_1()); 
    }

	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameWithWildcardAccess().getAsteriskKeyword_2()); 
    }
)
    ;





// Entry rule entryRuleValidID
entryRuleValidID returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getValidIDRule()); } 
	 iv_ruleValidID=ruleValidID 
	 { $current=$iv_ruleValidID.current.getText(); }  
	 EOF 
;

// Rule ValidID
ruleValidID returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getValidIDAccess().getIDTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleXImportSection
entryRuleXImportSection returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXImportSectionRule()); }
	 iv_ruleXImportSection=ruleXImportSection 
	 { $current=$iv_ruleXImportSection.current; } 
	 EOF 
;

// Rule XImportSection
ruleXImportSection returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getXImportSectionAccess().getImportDeclarationsXImportDeclarationParserRuleCall_0()); 
	    }
		lv_importDeclarations_0_0=ruleXImportDeclaration		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXImportSectionRule());
	        }
       		add(
       			$current, 
       			"importDeclarations",
        		lv_importDeclarations_0_0, 
        		"XImportDeclaration");
	        afterParserOrEnumRuleCall();
	    }

)
)+
;





// Entry rule entryRuleXImportDeclaration
entryRuleXImportDeclaration returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getXImportDeclarationRule()); }
	 iv_ruleXImportDeclaration=ruleXImportDeclaration 
	 { $current=$iv_ruleXImportDeclaration.current; } 
	 EOF 
;

// Rule XImportDeclaration
ruleXImportDeclaration returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='import' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getXImportDeclarationAccess().getImportKeyword_0());
    }
(((
(
		lv_static_1_0=	'static' 
    {
        newLeafNode(lv_static_1_0, grammarAccess.getXImportDeclarationAccess().getStaticStaticKeyword_1_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
       		setWithLastConsumed($current, "static", true, "static");
	    }

)
)(
(
		lv_extension_2_0=	'extension' 
    {
        newLeafNode(lv_extension_2_0, grammarAccess.getXImportDeclarationAccess().getExtensionExtensionKeyword_1_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
       		setWithLastConsumed($current, "extension", true, "extension");
	    }

)
)?(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeCrossReference_1_0_2_0()); 
	    }
		ruleQualifiedNameInStaticImport		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		lv_wildcard_4_0=	'*' 
    {
        newLeafNode(lv_wildcard_4_0, grammarAccess.getXImportDeclarationAccess().getWildcardAsteriskKeyword_1_0_3_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
       		setWithLastConsumed($current, "wildcard", true, "*");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getMemberNameValidIDParserRuleCall_1_0_3_1_0()); 
	    }
		lv_memberName_5_0=ruleValidID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXImportDeclarationRule());
	        }
       		set(
       			$current, 
       			"memberName",
        		lv_memberName_5_0, 
        		"ValidID");
	        afterParserOrEnumRuleCall();
	    }

)
)))
    |(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getXImportDeclarationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getImportedTypeJvmDeclaredTypeCrossReference_1_1_0()); 
	    }
		ruleQualifiedName		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getXImportDeclarationAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_2_0()); 
	    }
		lv_importedNamespace_7_0=ruleQualifiedNameWithWildcard		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getXImportDeclarationRule());
	        }
       		set(
       			$current, 
       			"importedNamespace",
        		lv_importedNamespace_7_0, 
        		"QualifiedNameWithWildcard");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_8=';' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getXImportDeclarationAccess().getSemicolonKeyword_2());
    }
)?)
;





// Entry rule entryRuleQualifiedNameInStaticImport
entryRuleQualifiedNameInStaticImport returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getQualifiedNameInStaticImportRule()); } 
	 iv_ruleQualifiedNameInStaticImport=ruleQualifiedNameInStaticImport 
	 { $current=$iv_ruleQualifiedNameInStaticImport.current.getText(); }  
	 EOF 
;

// Rule QualifiedNameInStaticImport
ruleQualifiedNameInStaticImport returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getQualifiedNameInStaticImportAccess().getValidIDParserRuleCall_0()); 
    }
    this_ValidID_0=ruleValidID    {
		$current.merge(this_ValidID_0);
    }

    { 
        afterParserOrEnumRuleCall();
    }

	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameInStaticImportAccess().getFullStopKeyword_1()); 
    }
)+
    ;





RULE_HEX : ('0x'|'0X') ('0'..'9'|'a'..'f'|'A'..'F'|'_')+ ('#' (('b'|'B') ('i'|'I')|('l'|'L')))?;

RULE_INT : '0'..'9' ('0'..'9'|'_')*;

RULE_DECIMAL : RULE_INT (('e'|'E') ('+'|'-')? RULE_INT)? (('b'|'B') ('i'|'I'|'d'|'D')|('l'|'L'|'d'|'D'|'f'|'F'))?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'$'|'_') ('a'..'z'|'A'..'Z'|'$'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'?|'\'' ('\\' .|~(('\\'|'\'')))* '\''?);

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


