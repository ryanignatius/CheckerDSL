/*
* generated by Xtext
*/
package org.xtext.example.checkerdsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class CheckerDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DslElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Dsl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportSectionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportSectionXImportSectionParserRuleCall_0_0 = (RuleCall)cImportSectionAssignment_0.eContents().get(0);
		private final Assignment cElementsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cElementsAbstractElementParserRuleCall_1_0 = (RuleCall)cElementsAssignment_1.eContents().get(0);
		
		//Dsl:
		//	importSection=XImportSection? elements+=AbstractElement*;
		public ParserRule getRule() { return rule; }

		//importSection=XImportSection? elements+=AbstractElement*
		public Group getGroup() { return cGroup; }

		//importSection=XImportSection?
		public Assignment getImportSectionAssignment_0() { return cImportSectionAssignment_0; }

		//XImportSection
		public RuleCall getImportSectionXImportSectionParserRuleCall_0_0() { return cImportSectionXImportSectionParserRuleCall_0_0; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment_1() { return cElementsAssignment_1; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_1_0() { return cElementsAbstractElementParserRuleCall_1_0; }
	}

	public class AbstractElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPackageDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cClassParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AbstractElement:
		//	PackageDeclaration | Class;
		public ParserRule getRule() { return rule; }

		//PackageDeclaration | Class
		public Alternatives getAlternatives() { return cAlternatives; }

		//PackageDeclaration
		public RuleCall getPackageDeclarationParserRuleCall_0() { return cPackageDeclarationParserRuleCall_0; }

		//Class
		public RuleCall getClassParserRuleCall_1() { return cClassParserRuleCall_1; }
	}

	public class PackageDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PackageDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPackageKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsAbstractElementParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//PackageDeclaration:
		//	"package" name=QualifiedName "{" elements+=AbstractElement* "}";
		public ParserRule getRule() { return rule; }

		//"package" name=QualifiedName "{" elements+=AbstractElement* "}"
		public Group getGroup() { return cGroup; }

		//"package"
		public Keyword getPackageKeyword_0() { return cPackageKeyword_0; }

		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//elements+=AbstractElement*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }

		//AbstractElement
		public RuleCall getElementsAbstractElementParserRuleCall_3_0() { return cElementsAbstractElementParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cClassKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cExtendsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSuperTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSuperTypeJvmTypeReferenceParserRuleCall_2_1_0 = (RuleCall)cSuperTypeAssignment_2_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFeaturesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFeaturesFeatureParserRuleCall_4_0 = (RuleCall)cFeaturesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Class:
		//	"class" name=ValidID ("extends" superType=JvmTypeReference)? "{" features+=Feature* "}";
		public ParserRule getRule() { return rule; }

		//"class" name=ValidID ("extends" superType=JvmTypeReference)? "{" features+=Feature* "}"
		public Group getGroup() { return cGroup; }

		//"class"
		public Keyword getClassKeyword_0() { return cClassKeyword_0; }

		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }

		//("extends" superType=JvmTypeReference)?
		public Group getGroup_2() { return cGroup_2; }

		//"extends"
		public Keyword getExtendsKeyword_2_0() { return cExtendsKeyword_2_0; }

		//superType=JvmTypeReference
		public Assignment getSuperTypeAssignment_2_1() { return cSuperTypeAssignment_2_1; }

		//JvmTypeReference
		public RuleCall getSuperTypeJvmTypeReferenceParserRuleCall_2_1_0() { return cSuperTypeJvmTypeReferenceParserRuleCall_2_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//features+=Feature*
		public Assignment getFeaturesAssignment_4() { return cFeaturesAssignment_4; }

		//Feature
		public RuleCall getFeaturesFeatureParserRuleCall_4_0() { return cFeaturesFeatureParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class FeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feature");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChkVariableDeclarationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMethodParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFormatParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCheckParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMRParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cScoreParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//Feature:
		//	ChkVariableDeclaration | Method | Format | Check | MR | Score;
		public ParserRule getRule() { return rule; }

		//ChkVariableDeclaration | Method | Format | Check | MR | Score
		public Alternatives getAlternatives() { return cAlternatives; }

		//ChkVariableDeclaration
		public RuleCall getChkVariableDeclarationParserRuleCall_0() { return cChkVariableDeclarationParserRuleCall_0; }

		//Method
		public RuleCall getMethodParserRuleCall_1() { return cMethodParserRuleCall_1; }

		//Format
		public RuleCall getFormatParserRuleCall_2() { return cFormatParserRuleCall_2; }

		//Check
		public RuleCall getCheckParserRuleCall_3() { return cCheckParserRuleCall_3; }

		//MR
		public RuleCall getMRParserRuleCall_4() { return cMRParserRuleCall_4; }

		//Score
		public RuleCall getScoreParserRuleCall_5() { return cScoreParserRuleCall_5; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cParamsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_4_0_0 = (RuleCall)cParamsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cParamsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cParamsFullJvmFormalParameterParserRuleCall_4_1_1_0 = (RuleCall)cParamsAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cBodyXBlockExpressionParserRuleCall_6_0 = (RuleCall)cBodyAssignment_6.eContents().get(0);
		
		//Method:
		//	"op" type=JvmTypeReference name=ValidID "(" (params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)?
		//	")" body=XBlockExpression;
		public ParserRule getRule() { return rule; }

		//"op" type=JvmTypeReference name=ValidID "(" (params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)? ")"
		//body=XBlockExpression
		public Group getGroup() { return cGroup; }

		//"op"
		public Keyword getOpKeyword_0() { return cOpKeyword_0; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_1_0() { return cTypeJvmTypeReferenceParserRuleCall_1_0; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//(params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)?
		public Group getGroup_4() { return cGroup_4; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_4_0() { return cParamsAssignment_4_0; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_4_0_0() { return cParamsFullJvmFormalParameterParserRuleCall_4_0_0; }

		//("," params+=FullJvmFormalParameter)*
		public Group getGroup_4_1() { return cGroup_4_1; }

		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }

		//params+=FullJvmFormalParameter
		public Assignment getParamsAssignment_4_1_1() { return cParamsAssignment_4_1_1; }

		//FullJvmFormalParameter
		public RuleCall getParamsFullJvmFormalParameterParserRuleCall_4_1_1_0() { return cParamsFullJvmFormalParameterParserRuleCall_4_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//body=XBlockExpression
		public Assignment getBodyAssignment_6() { return cBodyAssignment_6; }

		//XBlockExpression
		public RuleCall getBodyXBlockExpressionParserRuleCall_6_0() { return cBodyXBlockExpressionParserRuleCall_6_0; }
	}

	public class ChkScoreExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChkScoreExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubtaskAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubtaskCHK_INTParserRuleCall_1_0 = (RuleCall)cSubtaskAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScoreAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScoreCHK_INTParserRuleCall_3_0 = (RuleCall)cScoreAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ChkScoreExpression:
		//	"(" subtask=CHK_INT ":" score=CHK_INT ")";
		public ParserRule getRule() { return rule; }

		//"(" subtask=CHK_INT ":" score=CHK_INT ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//subtask=CHK_INT
		public Assignment getSubtaskAssignment_1() { return cSubtaskAssignment_1; }

		//CHK_INT
		public RuleCall getSubtaskCHK_INTParserRuleCall_1_0() { return cSubtaskCHK_INTParserRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//score=CHK_INT
		public Assignment getScoreAssignment_3() { return cScoreAssignment_3; }

		//CHK_INT
		public RuleCall getScoreCHK_INTParserRuleCall_3_0() { return cScoreCHK_INTParserRuleCall_3_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class ScoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Score");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScoreKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cScoresAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cScoresChkScoreExpressionParserRuleCall_2_0 = (RuleCall)cScoresAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Score:
		//	"score" "{" scores+=ChkScoreExpression+ "}";
		public ParserRule getRule() { return rule; }

		//"score" "{" scores+=ChkScoreExpression+ "}"
		public Group getGroup() { return cGroup; }

		//"score"
		public Keyword getScoreKeyword_0() { return cScoreKeyword_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//scores+=ChkScoreExpression+
		public Assignment getScoresAssignment_2() { return cScoresAssignment_2; }

		//ChkScoreExpression
		public RuleCall getScoresChkScoreExpressionParserRuleCall_2_0() { return cScoresChkScoreExpressionParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class FollowUpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FollowUp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFolAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cFolFollowupKeyword_0_0 = (Keyword)cFolAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFollowupsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cFollowupsAlternatives_2_0 = (Alternatives)cFollowupsAssignment_2.eContents().get(0);
		private final RuleCall cFollowupsChkExpressionParserRuleCall_2_0_0 = (RuleCall)cFollowupsAlternatives_2_0.eContents().get(0);
		private final RuleCall cFollowupsChkLoopExpressionParserRuleCall_2_0_1 = (RuleCall)cFollowupsAlternatives_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FollowUp:
		//	fol="followup" "{" followups+=(ChkExpression | ChkLoopExpression)* "}";
		public ParserRule getRule() { return rule; }

		//fol="followup" "{" followups+=(ChkExpression | ChkLoopExpression)* "}"
		public Group getGroup() { return cGroup; }

		//fol="followup"
		public Assignment getFolAssignment_0() { return cFolAssignment_0; }

		//"followup"
		public Keyword getFolFollowupKeyword_0_0() { return cFolFollowupKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//followups+=(ChkExpression | ChkLoopExpression)*
		public Assignment getFollowupsAssignment_2() { return cFollowupsAssignment_2; }

		//ChkExpression | ChkLoopExpression
		public Alternatives getFollowupsAlternatives_2_0() { return cFollowupsAlternatives_2_0; }

		//ChkExpression
		public RuleCall getFollowupsChkExpressionParserRuleCall_2_0_0() { return cFollowupsChkExpressionParserRuleCall_2_0_0; }

		//ChkLoopExpression
		public RuleCall getFollowupsChkLoopExpressionParserRuleCall_2_0_1() { return cFollowupsChkLoopExpressionParserRuleCall_2_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cPropCheckKeyword_0_0 = (Keyword)cPropAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPropertiesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cPropertiesAlternatives_2_0 = (Alternatives)cPropertiesAssignment_2.eContents().get(0);
		private final RuleCall cPropertiesChkExpressionParserRuleCall_2_0_0 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(0);
		private final RuleCall cPropertiesChkLoopExpressionParserRuleCall_2_0_1 = (RuleCall)cPropertiesAlternatives_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Property:
		//	prop="check" "{" properties+=(ChkExpression | ChkLoopExpression)* "}";
		public ParserRule getRule() { return rule; }

		//prop="check" "{" properties+=(ChkExpression | ChkLoopExpression)* "}"
		public Group getGroup() { return cGroup; }

		//prop="check"
		public Assignment getPropAssignment_0() { return cPropAssignment_0; }

		//"check"
		public Keyword getPropCheckKeyword_0_0() { return cPropCheckKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//properties+=(ChkExpression | ChkLoopExpression)*
		public Assignment getPropertiesAssignment_2() { return cPropertiesAssignment_2; }

		//ChkExpression | ChkLoopExpression
		public Alternatives getPropertiesAlternatives_2_0() { return cPropertiesAlternatives_2_0; }

		//ChkExpression
		public RuleCall getPropertiesChkExpressionParserRuleCall_2_0_0() { return cPropertiesChkExpressionParserRuleCall_2_0_0; }

		//ChkLoopExpression
		public RuleCall getPropertiesChkLoopExpressionParserRuleCall_2_0_1() { return cPropertiesChkLoopExpressionParserRuleCall_2_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class MRElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MR");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMrAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cMrMRKeyword_0_0 = (Keyword)cMrAssignment_0.eContents().get(0);
		private final Assignment cNumAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumINTTerminalRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMrExpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cMrExpAlternatives_3_0 = (Alternatives)cMrExpAssignment_3.eContents().get(0);
		private final RuleCall cMrExpChkExpressionParserRuleCall_3_0_0 = (RuleCall)cMrExpAlternatives_3_0.eContents().get(0);
		private final RuleCall cMrExpChkLoopExpressionParserRuleCall_3_0_1 = (RuleCall)cMrExpAlternatives_3_0.eContents().get(1);
		private final Assignment cFollowupAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFollowupFollowUpParserRuleCall_4_0 = (RuleCall)cFollowupAssignment_4.eContents().get(0);
		private final Assignment cPropertyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPropertyPropertyParserRuleCall_5_0 = (RuleCall)cPropertyAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MR:
		//	mr="MR" num=INT "{" mrExp+=(ChkExpression | ChkLoopExpression)* followup=FollowUp property=Property "}";
		public ParserRule getRule() { return rule; }

		//mr="MR" num=INT "{" mrExp+=(ChkExpression | ChkLoopExpression)* followup=FollowUp property=Property "}"
		public Group getGroup() { return cGroup; }

		//mr="MR"
		public Assignment getMrAssignment_0() { return cMrAssignment_0; }

		//"MR"
		public Keyword getMrMRKeyword_0_0() { return cMrMRKeyword_0_0; }

		//num=INT
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }

		//INT
		public RuleCall getNumINTTerminalRuleCall_1_0() { return cNumINTTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//mrExp+=(ChkExpression | ChkLoopExpression)*
		public Assignment getMrExpAssignment_3() { return cMrExpAssignment_3; }

		//ChkExpression | ChkLoopExpression
		public Alternatives getMrExpAlternatives_3_0() { return cMrExpAlternatives_3_0; }

		//ChkExpression
		public RuleCall getMrExpChkExpressionParserRuleCall_3_0_0() { return cMrExpChkExpressionParserRuleCall_3_0_0; }

		//ChkLoopExpression
		public RuleCall getMrExpChkLoopExpressionParserRuleCall_3_0_1() { return cMrExpChkLoopExpressionParserRuleCall_3_0_1; }

		//followup=FollowUp
		public Assignment getFollowupAssignment_4() { return cFollowupAssignment_4; }

		//FollowUp
		public RuleCall getFollowupFollowUpParserRuleCall_4_0() { return cFollowupFollowUpParserRuleCall_4_0; }

		//property=Property
		public Assignment getPropertyAssignment_5() { return cPropertyAssignment_5; }

		//Property
		public RuleCall getPropertyPropertyParserRuleCall_5_0() { return cPropertyPropertyParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class ChkVariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChkVariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypeChkTypeReferenceParserRuleCall_0_0 = (RuleCall)cTypeAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSzAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSzCHK_NUMBERParserRuleCall_1_1_0 = (RuleCall)cSzAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameValidIDParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLimit1Assignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLimit1LimitParserRuleCall_3_1_0 = (RuleCall)cLimit1Assignment_3_1.eContents().get(0);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cSemicolonKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cLimitAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cLimitLimitParserRuleCall_3_2_1_0 = (RuleCall)cLimitAssignment_3_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSpKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cSpValueAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cSpValueSpValueParserRuleCall_4_2_0 = (RuleCall)cSpValueAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//ChkVariableDeclaration:
		//	type=ChkTypeReference ("[" sz+=CHK_NUMBER "]")* name=ValidID ("(" limit1=Limit (";" limit+=Limit)* ")")? ("sp" "{"
		//	spValue=SpValue "}")?;
		public ParserRule getRule() { return rule; }

		//type=ChkTypeReference ("[" sz+=CHK_NUMBER "]")* name=ValidID ("(" limit1=Limit (";" limit+=Limit)* ")")? ("sp" "{"
		//spValue=SpValue "}")?
		public Group getGroup() { return cGroup; }

		//type=ChkTypeReference
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//ChkTypeReference
		public RuleCall getTypeChkTypeReferenceParserRuleCall_0_0() { return cTypeChkTypeReferenceParserRuleCall_0_0; }

		//("[" sz+=CHK_NUMBER "]")*
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//sz+=CHK_NUMBER
		public Assignment getSzAssignment_1_1() { return cSzAssignment_1_1; }

		//CHK_NUMBER
		public RuleCall getSzCHK_NUMBERParserRuleCall_1_1_0() { return cSzCHK_NUMBERParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }

		//name=ValidID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_2_0() { return cNameValidIDParserRuleCall_2_0; }

		//("(" limit1=Limit (";" limit+=Limit)* ")")?
		public Group getGroup_3() { return cGroup_3; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }

		//limit1=Limit
		public Assignment getLimit1Assignment_3_1() { return cLimit1Assignment_3_1; }

		//Limit
		public RuleCall getLimit1LimitParserRuleCall_3_1_0() { return cLimit1LimitParserRuleCall_3_1_0; }

		//(";" limit+=Limit)*
		public Group getGroup_3_2() { return cGroup_3_2; }

		//";"
		public Keyword getSemicolonKeyword_3_2_0() { return cSemicolonKeyword_3_2_0; }

		//limit+=Limit
		public Assignment getLimitAssignment_3_2_1() { return cLimitAssignment_3_2_1; }

		//Limit
		public RuleCall getLimitLimitParserRuleCall_3_2_1_0() { return cLimitLimitParserRuleCall_3_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//("sp" "{" spValue=SpValue "}")?
		public Group getGroup_4() { return cGroup_4; }

		//"sp"
		public Keyword getSpKeyword_4_0() { return cSpKeyword_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//spValue=SpValue
		public Assignment getSpValueAssignment_4_2() { return cSpValueAssignment_4_2; }

		//SpValue
		public RuleCall getSpValueSpValueParserRuleCall_4_2_0() { return cSpValueSpValueParserRuleCall_4_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}

	public class ChkTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChkTypeReference");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLongKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cFloatKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cDoubleKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBooleanKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cCharKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cStringKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cTreeKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cAdjMatKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cAdjListKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//ChkTypeReference:
		//	"int" | "long" | "float" | "double" | "boolean" | "char" | "string" | "tree" | "adjMat" | "adjList";
		public ParserRule getRule() { return rule; }

		//"int" | "long" | "float" | "double" | "boolean" | "char" | "string" | "tree" | "adjMat" | "adjList"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"int"
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }

		//"long"
		public Keyword getLongKeyword_1() { return cLongKeyword_1; }

		//"float"
		public Keyword getFloatKeyword_2() { return cFloatKeyword_2; }

		//"double"
		public Keyword getDoubleKeyword_3() { return cDoubleKeyword_3; }

		//"boolean"
		public Keyword getBooleanKeyword_4() { return cBooleanKeyword_4; }

		//"char"
		public Keyword getCharKeyword_5() { return cCharKeyword_5; }

		//"string"
		public Keyword getStringKeyword_6() { return cStringKeyword_6; }

		//"tree"
		public Keyword getTreeKeyword_7() { return cTreeKeyword_7; }

		//"adjMat"
		public Keyword getAdjMatKeyword_8() { return cAdjMatKeyword_8; }

		//"adjList"
		public Keyword getAdjListKeyword_9() { return cAdjListKeyword_9; }
	}

	public class MethodCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MethodCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameValidIDParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParamsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParamsValidIDParserRuleCall_2_0_0 = (RuleCall)cParamsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cParamsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cParamsValidIDParserRuleCall_2_1_1_0 = (RuleCall)cParamsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MethodCall:
		//	name=ValidID "(" (params+=ValidID ("," params+=ValidID)*)? ")";
		public ParserRule getRule() { return rule; }

		//name=ValidID "(" (params+=ValidID ("," params+=ValidID)*)? ")"
		public Group getGroup() { return cGroup; }

		//name=ValidID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ValidID
		public RuleCall getNameValidIDParserRuleCall_0_0() { return cNameValidIDParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(params+=ValidID ("," params+=ValidID)*)?
		public Group getGroup_2() { return cGroup_2; }

		//params+=ValidID
		public Assignment getParamsAssignment_2_0() { return cParamsAssignment_2_0; }

		//ValidID
		public RuleCall getParamsValidIDParserRuleCall_2_0_0() { return cParamsValidIDParserRuleCall_2_0_0; }

		//("," params+=ValidID)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//params+=ValidID
		public Assignment getParamsAssignment_2_1_1() { return cParamsAssignment_2_1_1; }

		//ValidID
		public RuleCall getParamsValidIDParserRuleCall_2_1_1_0() { return cParamsValidIDParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ChkPrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChkPrefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTypeAlternatives_0_0 = (Alternatives)cTypeAssignment_0.eContents().get(0);
		private final Keyword cTypeInKeyword_0_0_0 = (Keyword)cTypeAlternatives_0_0.eContents().get(0);
		private final Keyword cTypeOutKeyword_0_0_1 = (Keyword)cTypeAlternatives_0_0.eContents().get(1);
		private final Keyword cTypeAnsKeyword_0_0_2 = (Keyword)cTypeAlternatives_0_0.eContents().get(2);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ChkPrefix:
		//	type=("in" | "out" | "ans") ".";
		public ParserRule getRule() { return rule; }

		//type=("in" | "out" | "ans") "."
		public Group getGroup() { return cGroup; }

		//type=("in" | "out" | "ans")
		public Assignment getTypeAssignment_0() { return cTypeAssignment_0; }

		//"in" | "out" | "ans"
		public Alternatives getTypeAlternatives_0_0() { return cTypeAlternatives_0_0; }

		//"in"
		public Keyword getTypeInKeyword_0_0_0() { return cTypeInKeyword_0_0_0; }

		//"out"
		public Keyword getTypeOutKeyword_0_0_1() { return cTypeOutKeyword_0_0_1; }

		//"ans"
		public Keyword getTypeAnsKeyword_0_0_2() { return cTypeAnsKeyword_0_0_2; }

		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
	}

	public class ChkVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChkVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrefChkPrefixParserRuleCall_0_0 = (RuleCall)cPrefAssignment_0.eContents().get(0);
		private final Assignment cVarAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarValidIDParserRuleCall_1_0 = (RuleCall)cVarAssignment_1.eContents().get(0);
		private final Assignment cNewtestAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNewtestGraveAccentKeyword_2_0 = (Keyword)cNewtestAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftSquareBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cVAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVCHK_NUMBERParserRuleCall_3_1_0 = (RuleCall)cVAssignment_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//ChkVariable:
		//	pref=ChkPrefix? var=ValidID newtest="`"? ("[" v+=CHK_NUMBER "]")*;
		public ParserRule getRule() { return rule; }

		//pref=ChkPrefix? var=ValidID newtest="`"? ("[" v+=CHK_NUMBER "]")*
		public Group getGroup() { return cGroup; }

		//pref=ChkPrefix?
		public Assignment getPrefAssignment_0() { return cPrefAssignment_0; }

		//ChkPrefix
		public RuleCall getPrefChkPrefixParserRuleCall_0_0() { return cPrefChkPrefixParserRuleCall_0_0; }

		//var=ValidID
		public Assignment getVarAssignment_1() { return cVarAssignment_1; }

		//ValidID
		public RuleCall getVarValidIDParserRuleCall_1_0() { return cVarValidIDParserRuleCall_1_0; }

		//newtest="`"?
		public Assignment getNewtestAssignment_2() { return cNewtestAssignment_2; }

		//"`"
		public Keyword getNewtestGraveAccentKeyword_2_0() { return cNewtestGraveAccentKeyword_2_0; }

		//("[" v+=CHK_NUMBER "]")*
		public Group getGroup_3() { return cGroup_3; }

		//"["
		public Keyword getLeftSquareBracketKeyword_3_0() { return cLeftSquareBracketKeyword_3_0; }

		//v+=CHK_NUMBER
		public Assignment getVAssignment_3_1() { return cVAssignment_3_1; }

		//CHK_NUMBER
		public RuleCall getVCHK_NUMBERParserRuleCall_3_1_0() { return cVCHK_NUMBERParserRuleCall_3_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3_2() { return cRightSquareBracketKeyword_3_2; }
	}

	public class ChkVariablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChkVariables");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVaAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVaChkVariableParserRuleCall_0_0 = (RuleCall)cVaAssignment_0.eContents().get(0);
		private final Assignment cNuAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNuCHK_INTParserRuleCall_1_0 = (RuleCall)cNuAssignment_1.eContents().get(0);
		private final Assignment cGrAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cGrChkItemGroupParserRuleCall_2_0 = (RuleCall)cGrAssignment_2.eContents().get(0);
		
		//ChkVariables:
		//	va=ChkVariable | nu=CHK_INT | gr=ChkItemGroup;
		public ParserRule getRule() { return rule; }

		//va=ChkVariable | nu=CHK_INT | gr=ChkItemGroup
		public Alternatives getAlternatives() { return cAlternatives; }

		//va=ChkVariable
		public Assignment getVaAssignment_0() { return cVaAssignment_0; }

		//ChkVariable
		public RuleCall getVaChkVariableParserRuleCall_0_0() { return cVaChkVariableParserRuleCall_0_0; }

		//nu=CHK_INT
		public Assignment getNuAssignment_1() { return cNuAssignment_1; }

		//CHK_INT
		public RuleCall getNuCHK_INTParserRuleCall_1_0() { return cNuCHK_INTParserRuleCall_1_0; }

		//gr=ChkItemGroup
		public Assignment getGrAssignment_2() { return cGrAssignment_2; }

		//ChkItemGroup
		public RuleCall getGrChkItemGroupParserRuleCall_2_0() { return cGrChkItemGroupParserRuleCall_2_0; }
	}

	public class ChkItemGroupElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChkItemGroup");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cVarsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVarsChkVariableParserRuleCall_1_0 = (RuleCall)cVarsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cVarsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cVarsChkVariableParserRuleCall_2_1_0 = (RuleCall)cVarsAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ChkItemGroup:
		//	"<" vars+=ChkVariable ("," vars+=ChkVariable)* ">";
		public ParserRule getRule() { return rule; }

		//"<" vars+=ChkVariable ("," vars+=ChkVariable)* ">"
		public Group getGroup() { return cGroup; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//vars+=ChkVariable
		public Assignment getVarsAssignment_1() { return cVarsAssignment_1; }

		//ChkVariable
		public RuleCall getVarsChkVariableParserRuleCall_1_0() { return cVarsChkVariableParserRuleCall_1_0; }

		//("," vars+=ChkVariable)*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//vars+=ChkVariable
		public Assignment getVarsAssignment_2_1() { return cVarsAssignment_2_1; }

		//ChkVariable
		public RuleCall getVarsChkVariableParserRuleCall_2_1_0() { return cVarsChkVariableParserRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3() { return cGreaterThanSignKeyword_3; }
	}

	public class HelperElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Helper");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cSumAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cSumSumKeyword_0_0_0 = (Keyword)cSumAssignment_0_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cVarAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_0_2_0 = (RuleCall)cVarAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cMaxAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cMaxMaxKeyword_1_0_0 = (Keyword)cMaxAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cVarAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_1_2_0 = (RuleCall)cVarAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cMinAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cMinMinKeyword_2_0_0 = (Keyword)cMinAssignment_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cVarAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_2_2_0 = (RuleCall)cVarAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cPrimeAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final Keyword cPrimePrimeKeyword_3_0_0 = (Keyword)cPrimeAssignment_3_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cVar3Assignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cVar3ChkVariablesParserRuleCall_3_2_0 = (RuleCall)cVar3Assignment_3_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Assignment cSwapAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final Keyword cSwapSwapKeyword_4_0_0 = (Keyword)cSwapAssignment_4_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cVarAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_4_2_0 = (RuleCall)cVarAssignment_4_2.eContents().get(0);
		private final Keyword cCommaKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Assignment cVar1Assignment_4_4 = (Assignment)cGroup_4.eContents().get(4);
		private final RuleCall cVar1ValidIDParserRuleCall_4_4_0 = (RuleCall)cVar1Assignment_4_4.eContents().get(0);
		private final Keyword cCommaKeyword_4_5 = (Keyword)cGroup_4.eContents().get(5);
		private final Assignment cVar2Assignment_4_6 = (Assignment)cGroup_4.eContents().get(6);
		private final RuleCall cVar2ValidIDParserRuleCall_4_6_0 = (RuleCall)cVar2Assignment_4_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_7 = (Keyword)cGroup_4.eContents().get(7);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Assignment cSelectAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final Keyword cSelectSelectKeyword_5_0_0 = (Keyword)cSelectAssignment_5_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cVarsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cVarsValidIDParserRuleCall_5_2_0 = (RuleCall)cVarsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cVarsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cVarsValidIDParserRuleCall_5_3_1_0 = (RuleCall)cVarsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Assignment cAddAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final Keyword cAddAddKeyword_6_0_0 = (Keyword)cAddAssignment_6_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cVarAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_6_2_0 = (RuleCall)cVarAssignment_6_2.eContents().get(0);
		private final Keyword cCommaKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Assignment cVar3Assignment_6_4 = (Assignment)cGroup_6.eContents().get(4);
		private final RuleCall cVar3ChkVariablesParserRuleCall_6_4_0 = (RuleCall)cVar3Assignment_6_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_5 = (Keyword)cGroup_6.eContents().get(5);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cRemoveAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final Keyword cRemoveRemoveKeyword_7_0_0 = (Keyword)cRemoveAssignment_7_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cVarAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_7_2_0 = (RuleCall)cVarAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cVar3Assignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cVar3ChkVariablesParserRuleCall_7_3_1_0 = (RuleCall)cVar3Assignment_7_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cRandomAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final Keyword cRandomRandomKeyword_8_0_0 = (Keyword)cRandomAssignment_8_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Group cGroup_8_2 = (Group)cGroup_8.eContents().get(2);
		private final Assignment cVar3Assignment_8_2_0 = (Assignment)cGroup_8_2.eContents().get(0);
		private final RuleCall cVar3ChkVariablesParserRuleCall_8_2_0_0 = (RuleCall)cVar3Assignment_8_2_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_8_2_1 = (Keyword)cGroup_8_2.eContents().get(1);
		private final Assignment cVar4Assignment_8_2_2 = (Assignment)cGroup_8_2.eContents().get(2);
		private final RuleCall cVar4ChkVariablesParserRuleCall_8_2_2_0 = (RuleCall)cVar4Assignment_8_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		private final Group cGroup_9 = (Group)cAlternatives.eContents().get(9);
		private final Assignment cSizeAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final Keyword cSizeSizeKeyword_9_0_0 = (Keyword)cSizeAssignment_9_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Assignment cVarAssignment_9_2 = (Assignment)cGroup_9.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_9_2_0 = (RuleCall)cVarAssignment_9_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Assignment cContainsAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final Keyword cContainsContainKeyword_10_0_0 = (Keyword)cContainsAssignment_10_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_10_1 = (Keyword)cGroup_10.eContents().get(1);
		private final Assignment cVarAssignment_10_2 = (Assignment)cGroup_10.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_10_2_0 = (RuleCall)cVarAssignment_10_2.eContents().get(0);
		private final Keyword cCommaKeyword_10_3 = (Keyword)cGroup_10.eContents().get(3);
		private final Assignment cVar3Assignment_10_4 = (Assignment)cGroup_10.eContents().get(4);
		private final RuleCall cVar3ChkVariablesParserRuleCall_10_4_0 = (RuleCall)cVar3Assignment_10_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_10_5 = (Keyword)cGroup_10.eContents().get(5);
		private final Group cGroup_11 = (Group)cAlternatives.eContents().get(11);
		private final Assignment cAddRowAssignment_11_0 = (Assignment)cGroup_11.eContents().get(0);
		private final Keyword cAddRowAddRowKeyword_11_0_0 = (Keyword)cAddRowAssignment_11_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_11_1 = (Keyword)cGroup_11.eContents().get(1);
		private final Assignment cVarAssignment_11_2 = (Assignment)cGroup_11.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_11_2_0 = (RuleCall)cVarAssignment_11_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11_3 = (Keyword)cGroup_11.eContents().get(3);
		private final Group cGroup_12 = (Group)cAlternatives.eContents().get(12);
		private final Assignment cAddColAssignment_12_0 = (Assignment)cGroup_12.eContents().get(0);
		private final Keyword cAddColAddColumnKeyword_12_0_0 = (Keyword)cAddColAssignment_12_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_12_1 = (Keyword)cGroup_12.eContents().get(1);
		private final Assignment cVarAssignment_12_2 = (Assignment)cGroup_12.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_12_2_0 = (RuleCall)cVarAssignment_12_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_12_3 = (Keyword)cGroup_12.eContents().get(3);
		private final Group cGroup_13 = (Group)cAlternatives.eContents().get(13);
		private final Assignment cSwapRowAssignment_13_0 = (Assignment)cGroup_13.eContents().get(0);
		private final Keyword cSwapRowSwapRowKeyword_13_0_0 = (Keyword)cSwapRowAssignment_13_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_13_1 = (Keyword)cGroup_13.eContents().get(1);
		private final Assignment cVarAssignment_13_2 = (Assignment)cGroup_13.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_13_2_0 = (RuleCall)cVarAssignment_13_2.eContents().get(0);
		private final Keyword cCommaKeyword_13_3 = (Keyword)cGroup_13.eContents().get(3);
		private final Assignment cVar1Assignment_13_4 = (Assignment)cGroup_13.eContents().get(4);
		private final RuleCall cVar1ValidIDParserRuleCall_13_4_0 = (RuleCall)cVar1Assignment_13_4.eContents().get(0);
		private final Keyword cCommaKeyword_13_5 = (Keyword)cGroup_13.eContents().get(5);
		private final Assignment cVar2Assignment_13_6 = (Assignment)cGroup_13.eContents().get(6);
		private final RuleCall cVar2ValidIDParserRuleCall_13_6_0 = (RuleCall)cVar2Assignment_13_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_13_7 = (Keyword)cGroup_13.eContents().get(7);
		private final Group cGroup_14 = (Group)cAlternatives.eContents().get(14);
		private final Assignment cSwapColAssignment_14_0 = (Assignment)cGroup_14.eContents().get(0);
		private final Keyword cSwapColSwapColumnKeyword_14_0_0 = (Keyword)cSwapColAssignment_14_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_14_1 = (Keyword)cGroup_14.eContents().get(1);
		private final Assignment cVarAssignment_14_2 = (Assignment)cGroup_14.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_14_2_0 = (RuleCall)cVarAssignment_14_2.eContents().get(0);
		private final Keyword cCommaKeyword_14_3 = (Keyword)cGroup_14.eContents().get(3);
		private final Assignment cVar1Assignment_14_4 = (Assignment)cGroup_14.eContents().get(4);
		private final RuleCall cVar1ValidIDParserRuleCall_14_4_0 = (RuleCall)cVar1Assignment_14_4.eContents().get(0);
		private final Keyword cCommaKeyword_14_5 = (Keyword)cGroup_14.eContents().get(5);
		private final Assignment cVar2Assignment_14_6 = (Assignment)cGroup_14.eContents().get(6);
		private final RuleCall cVar2ValidIDParserRuleCall_14_6_0 = (RuleCall)cVar2Assignment_14_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_14_7 = (Keyword)cGroup_14.eContents().get(7);
		private final Group cGroup_15 = (Group)cAlternatives.eContents().get(15);
		private final Assignment cRemoveRowAssignment_15_0 = (Assignment)cGroup_15.eContents().get(0);
		private final Keyword cRemoveRowRemoveRowKeyword_15_0_0 = (Keyword)cRemoveRowAssignment_15_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_15_1 = (Keyword)cGroup_15.eContents().get(1);
		private final Assignment cVarAssignment_15_2 = (Assignment)cGroup_15.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_15_2_0 = (RuleCall)cVarAssignment_15_2.eContents().get(0);
		private final Keyword cCommaKeyword_15_3 = (Keyword)cGroup_15.eContents().get(3);
		private final Assignment cVar3Assignment_15_4 = (Assignment)cGroup_15.eContents().get(4);
		private final RuleCall cVar3ChkVariablesParserRuleCall_15_4_0 = (RuleCall)cVar3Assignment_15_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15_5 = (Keyword)cGroup_15.eContents().get(5);
		private final Group cGroup_16 = (Group)cAlternatives.eContents().get(16);
		private final Assignment cRemoveColAssignment_16_0 = (Assignment)cGroup_16.eContents().get(0);
		private final Keyword cRemoveColRemoveColumnKeyword_16_0_0 = (Keyword)cRemoveColAssignment_16_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_16_1 = (Keyword)cGroup_16.eContents().get(1);
		private final Assignment cVarAssignment_16_2 = (Assignment)cGroup_16.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_16_2_0 = (RuleCall)cVarAssignment_16_2.eContents().get(0);
		private final Keyword cCommaKeyword_16_3 = (Keyword)cGroup_16.eContents().get(3);
		private final Assignment cVar3Assignment_16_4 = (Assignment)cGroup_16.eContents().get(4);
		private final RuleCall cVar3ChkVariablesParserRuleCall_16_4_0 = (RuleCall)cVar3Assignment_16_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_16_5 = (Keyword)cGroup_16.eContents().get(5);
		private final Group cGroup_17 = (Group)cAlternatives.eContents().get(17);
		private final Assignment cPermuteAssignment_17_0 = (Assignment)cGroup_17.eContents().get(0);
		private final Keyword cPermutePermuteKeyword_17_0_0 = (Keyword)cPermuteAssignment_17_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_17_1 = (Keyword)cGroup_17.eContents().get(1);
		private final Assignment cVarAssignment_17_2 = (Assignment)cGroup_17.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_17_2_0 = (RuleCall)cVarAssignment_17_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_17_3 = (Keyword)cGroup_17.eContents().get(3);
		private final Group cGroup_18 = (Group)cAlternatives.eContents().get(18);
		private final Assignment cPlusAssignment_18_0 = (Assignment)cGroup_18.eContents().get(0);
		private final Keyword cPlusPlusKeyword_18_0_0 = (Keyword)cPlusAssignment_18_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_18_1 = (Keyword)cGroup_18.eContents().get(1);
		private final Assignment cVarAssignment_18_2 = (Assignment)cGroup_18.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_18_2_0 = (RuleCall)cVarAssignment_18_2.eContents().get(0);
		private final Keyword cCommaKeyword_18_3 = (Keyword)cGroup_18.eContents().get(3);
		private final Assignment cVar3Assignment_18_4 = (Assignment)cGroup_18.eContents().get(4);
		private final RuleCall cVar3ChkVariablesParserRuleCall_18_4_0 = (RuleCall)cVar3Assignment_18_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_18_5 = (Keyword)cGroup_18.eContents().get(5);
		private final Group cGroup_19 = (Group)cAlternatives.eContents().get(19);
		private final Assignment cMultiplyAssignment_19_0 = (Assignment)cGroup_19.eContents().get(0);
		private final Keyword cMultiplyMultiplyKeyword_19_0_0 = (Keyword)cMultiplyAssignment_19_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_19_1 = (Keyword)cGroup_19.eContents().get(1);
		private final Assignment cVarAssignment_19_2 = (Assignment)cGroup_19.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_19_2_0 = (RuleCall)cVarAssignment_19_2.eContents().get(0);
		private final Keyword cCommaKeyword_19_3 = (Keyword)cGroup_19.eContents().get(3);
		private final Assignment cVar3Assignment_19_4 = (Assignment)cGroup_19.eContents().get(4);
		private final RuleCall cVar3ChkVariablesParserRuleCall_19_4_0 = (RuleCall)cVar3Assignment_19_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_19_5 = (Keyword)cGroup_19.eContents().get(5);
		private final Group cGroup_20 = (Group)cAlternatives.eContents().get(20);
		private final Assignment cInvertAssignment_20_0 = (Assignment)cGroup_20.eContents().get(0);
		private final Keyword cInvertInvertKeyword_20_0_0 = (Keyword)cInvertAssignment_20_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_20_1 = (Keyword)cGroup_20.eContents().get(1);
		private final Assignment cVarAssignment_20_2 = (Assignment)cGroup_20.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_20_2_0 = (RuleCall)cVarAssignment_20_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_20_3 = (Keyword)cGroup_20.eContents().get(3);
		private final Group cGroup_21 = (Group)cAlternatives.eContents().get(21);
		private final Assignment cIncludeAssignment_21_0 = (Assignment)cGroup_21.eContents().get(0);
		private final Keyword cIncludeIncludeKeyword_21_0_0 = (Keyword)cIncludeAssignment_21_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_21_1 = (Keyword)cGroup_21.eContents().get(1);
		private final Assignment cVarAssignment_21_2 = (Assignment)cGroup_21.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_21_2_0 = (RuleCall)cVarAssignment_21_2.eContents().get(0);
		private final Keyword cCommaKeyword_21_3 = (Keyword)cGroup_21.eContents().get(3);
		private final Assignment cVar3Assignment_21_4 = (Assignment)cGroup_21.eContents().get(4);
		private final RuleCall cVar3ChkVariablesParserRuleCall_21_4_0 = (RuleCall)cVar3Assignment_21_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_21_5 = (Keyword)cGroup_21.eContents().get(5);
		private final Group cGroup_22 = (Group)cAlternatives.eContents().get(22);
		private final Assignment cExcludeAssignment_22_0 = (Assignment)cGroup_22.eContents().get(0);
		private final Keyword cExcludeExcludeKeyword_22_0_0 = (Keyword)cExcludeAssignment_22_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_22_1 = (Keyword)cGroup_22.eContents().get(1);
		private final Assignment cVarAssignment_22_2 = (Assignment)cGroup_22.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_22_2_0 = (RuleCall)cVarAssignment_22_2.eContents().get(0);
		private final Keyword cCommaKeyword_22_3 = (Keyword)cGroup_22.eContents().get(3);
		private final Assignment cVar3Assignment_22_4 = (Assignment)cGroup_22.eContents().get(4);
		private final RuleCall cVar3ChkVariablesParserRuleCall_22_4_0 = (RuleCall)cVar3Assignment_22_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_22_5 = (Keyword)cGroup_22.eContents().get(5);
		private final Group cGroup_23 = (Group)cAlternatives.eContents().get(23);
		private final Assignment cCompositionalAssignment_23_0 = (Assignment)cGroup_23.eContents().get(0);
		private final Keyword cCompositionalCompositionalKeyword_23_0_0 = (Keyword)cCompositionalAssignment_23_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_23_1 = (Keyword)cGroup_23.eContents().get(1);
		private final Assignment cVarAssignment_23_2 = (Assignment)cGroup_23.eContents().get(2);
		private final RuleCall cVarChkVariableParserRuleCall_23_2_0 = (RuleCall)cVarAssignment_23_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_23_3 = (Keyword)cGroup_23.eContents().get(3);
		
		//Helper:
		//	sum="sum" "(" var=ChkVariable ")" | max="max" "(" var=ChkVariable ")" | min="min" "(" var=ChkVariable ")" |
		//	prime="prime" "(" var3=ChkVariables ")" | swap="swap" "(" var=ChkVariable "," var1=ValidID "," var2=ValidID ")" |
		//	select="select" "(" vars+=ValidID ("," vars+=ValidID)* ")" | add="add" "(" var=ChkVariable "," var3=ChkVariables ")"
		//	| remove="remove" "(" var=ChkVariable ("," var3=ChkVariables)? ")" | random="random" "(" (var3=ChkVariables ".."
		//	var4=ChkVariables)? ")" | size="size" "(" var=ChkVariable ")" | contains="contain" "(" var=ChkVariable ","
		//	var3=ChkVariables ")" | addRow="addRow" "(" var=ChkVariable ")" | addCol="addColumn" "(" var=ChkVariable ")" |
		//	swapRow="swapRow" "(" var=ChkVariable "," var1=ValidID "," var2=ValidID ")" | swapCol="swapColumn" "("
		//	var=ChkVariable "," var1=ValidID "," var2=ValidID ")" | removeRow="removeRow" "(" var=ChkVariable ","
		//	var3=ChkVariables ")" | removeCol="removeColumn" "(" var=ChkVariable "," var3=ChkVariables ")" | permute="permute"
		//	"(" var=ChkVariable ")" | plus="plus" "(" var=ChkVariable "," var3=ChkVariables ")" | multiply="multiply" "("
		//	var=ChkVariable "," var3=ChkVariables ")" | invert="invert" "(" var=ChkVariable ")" | include="include" "("
		//	var=ChkVariable "," var3=ChkVariables ")" | exclude="exclude" "(" var=ChkVariable "," var3=ChkVariables ")" |
		//	compositional="compositional" "(" var=ChkVariable ")";
		public ParserRule getRule() { return rule; }

		//sum="sum" "(" var=ChkVariable ")" | max="max" "(" var=ChkVariable ")" | min="min" "(" var=ChkVariable ")" |
		//prime="prime" "(" var3=ChkVariables ")" | swap="swap" "(" var=ChkVariable "," var1=ValidID "," var2=ValidID ")" |
		//select="select" "(" vars+=ValidID ("," vars+=ValidID)* ")" | add="add" "(" var=ChkVariable "," var3=ChkVariables ")" |
		//remove="remove" "(" var=ChkVariable ("," var3=ChkVariables)? ")" | random="random" "(" (var3=ChkVariables ".."
		//var4=ChkVariables)? ")" | size="size" "(" var=ChkVariable ")" | contains="contain" "(" var=ChkVariable ","
		//var3=ChkVariables ")" | addRow="addRow" "(" var=ChkVariable ")" | addCol="addColumn" "(" var=ChkVariable ")" |
		//swapRow="swapRow" "(" var=ChkVariable "," var1=ValidID "," var2=ValidID ")" | swapCol="swapColumn" "(" var=ChkVariable
		//"," var1=ValidID "," var2=ValidID ")" | removeRow="removeRow" "(" var=ChkVariable "," var3=ChkVariables ")" |
		//removeCol="removeColumn" "(" var=ChkVariable "," var3=ChkVariables ")" | permute="permute" "(" var=ChkVariable ")" |
		//plus="plus" "(" var=ChkVariable "," var3=ChkVariables ")" | multiply="multiply" "(" var=ChkVariable ","
		//var3=ChkVariables ")" | invert="invert" "(" var=ChkVariable ")" | include="include" "(" var=ChkVariable ","
		//var3=ChkVariables ")" | exclude="exclude" "(" var=ChkVariable "," var3=ChkVariables ")" |
		//compositional="compositional" "(" var=ChkVariable ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//sum="sum" "(" var=ChkVariable ")"
		public Group getGroup_0() { return cGroup_0; }

		//sum="sum"
		public Assignment getSumAssignment_0_0() { return cSumAssignment_0_0; }

		//"sum"
		public Keyword getSumSumKeyword_0_0_0() { return cSumSumKeyword_0_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_0_2() { return cVarAssignment_0_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_0_2_0() { return cVarChkVariableParserRuleCall_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//max="max" "(" var=ChkVariable ")"
		public Group getGroup_1() { return cGroup_1; }

		//max="max"
		public Assignment getMaxAssignment_1_0() { return cMaxAssignment_1_0; }

		//"max"
		public Keyword getMaxMaxKeyword_1_0_0() { return cMaxMaxKeyword_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_1_2() { return cVarAssignment_1_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_1_2_0() { return cVarChkVariableParserRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//min="min" "(" var=ChkVariable ")"
		public Group getGroup_2() { return cGroup_2; }

		//min="min"
		public Assignment getMinAssignment_2_0() { return cMinAssignment_2_0; }

		//"min"
		public Keyword getMinMinKeyword_2_0_0() { return cMinMinKeyword_2_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_2_2() { return cVarAssignment_2_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_2_2_0() { return cVarChkVariableParserRuleCall_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }

		//prime="prime" "(" var3=ChkVariables ")"
		public Group getGroup_3() { return cGroup_3; }

		//prime="prime"
		public Assignment getPrimeAssignment_3_0() { return cPrimeAssignment_3_0; }

		//"prime"
		public Keyword getPrimePrimeKeyword_3_0_0() { return cPrimePrimeKeyword_3_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }

		//var3=ChkVariables
		public Assignment getVar3Assignment_3_2() { return cVar3Assignment_3_2; }

		//ChkVariables
		public RuleCall getVar3ChkVariablesParserRuleCall_3_2_0() { return cVar3ChkVariablesParserRuleCall_3_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }

		//swap="swap" "(" var=ChkVariable "," var1=ValidID "," var2=ValidID ")"
		public Group getGroup_4() { return cGroup_4; }

		//swap="swap"
		public Assignment getSwapAssignment_4_0() { return cSwapAssignment_4_0; }

		//"swap"
		public Keyword getSwapSwapKeyword_4_0_0() { return cSwapSwapKeyword_4_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_4_2() { return cVarAssignment_4_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_4_2_0() { return cVarChkVariableParserRuleCall_4_2_0; }

		//","
		public Keyword getCommaKeyword_4_3() { return cCommaKeyword_4_3; }

		//var1=ValidID
		public Assignment getVar1Assignment_4_4() { return cVar1Assignment_4_4; }

		//ValidID
		public RuleCall getVar1ValidIDParserRuleCall_4_4_0() { return cVar1ValidIDParserRuleCall_4_4_0; }

		//","
		public Keyword getCommaKeyword_4_5() { return cCommaKeyword_4_5; }

		//var2=ValidID
		public Assignment getVar2Assignment_4_6() { return cVar2Assignment_4_6; }

		//ValidID
		public RuleCall getVar2ValidIDParserRuleCall_4_6_0() { return cVar2ValidIDParserRuleCall_4_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_7() { return cRightParenthesisKeyword_4_7; }

		//select="select" "(" vars+=ValidID ("," vars+=ValidID)* ")"
		public Group getGroup_5() { return cGroup_5; }

		//select="select"
		public Assignment getSelectAssignment_5_0() { return cSelectAssignment_5_0; }

		//"select"
		public Keyword getSelectSelectKeyword_5_0_0() { return cSelectSelectKeyword_5_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }

		//vars+=ValidID
		public Assignment getVarsAssignment_5_2() { return cVarsAssignment_5_2; }

		//ValidID
		public RuleCall getVarsValidIDParserRuleCall_5_2_0() { return cVarsValidIDParserRuleCall_5_2_0; }

		//("," vars+=ValidID)*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//vars+=ValidID
		public Assignment getVarsAssignment_5_3_1() { return cVarsAssignment_5_3_1; }

		//ValidID
		public RuleCall getVarsValidIDParserRuleCall_5_3_1_0() { return cVarsValidIDParserRuleCall_5_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }

		//add="add" "(" var=ChkVariable "," var3=ChkVariables ")"
		public Group getGroup_6() { return cGroup_6; }

		//add="add"
		public Assignment getAddAssignment_6_0() { return cAddAssignment_6_0; }

		//"add"
		public Keyword getAddAddKeyword_6_0_0() { return cAddAddKeyword_6_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_6_2() { return cVarAssignment_6_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_6_2_0() { return cVarChkVariableParserRuleCall_6_2_0; }

		//","
		public Keyword getCommaKeyword_6_3() { return cCommaKeyword_6_3; }

		//var3=ChkVariables
		public Assignment getVar3Assignment_6_4() { return cVar3Assignment_6_4; }

		//ChkVariables
		public RuleCall getVar3ChkVariablesParserRuleCall_6_4_0() { return cVar3ChkVariablesParserRuleCall_6_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6_5() { return cRightParenthesisKeyword_6_5; }

		//remove="remove" "(" var=ChkVariable ("," var3=ChkVariables)? ")"
		public Group getGroup_7() { return cGroup_7; }

		//remove="remove"
		public Assignment getRemoveAssignment_7_0() { return cRemoveAssignment_7_0; }

		//"remove"
		public Keyword getRemoveRemoveKeyword_7_0_0() { return cRemoveRemoveKeyword_7_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_7_2() { return cVarAssignment_7_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_7_2_0() { return cVarChkVariableParserRuleCall_7_2_0; }

		//("," var3=ChkVariables)?
		public Group getGroup_7_3() { return cGroup_7_3; }

		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }

		//var3=ChkVariables
		public Assignment getVar3Assignment_7_3_1() { return cVar3Assignment_7_3_1; }

		//ChkVariables
		public RuleCall getVar3ChkVariablesParserRuleCall_7_3_1_0() { return cVar3ChkVariablesParserRuleCall_7_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7_4() { return cRightParenthesisKeyword_7_4; }

		//random="random" "(" (var3=ChkVariables ".." var4=ChkVariables)? ")"
		public Group getGroup_8() { return cGroup_8; }

		//random="random"
		public Assignment getRandomAssignment_8_0() { return cRandomAssignment_8_0; }

		//"random"
		public Keyword getRandomRandomKeyword_8_0_0() { return cRandomRandomKeyword_8_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_8_1() { return cLeftParenthesisKeyword_8_1; }

		//(var3=ChkVariables ".." var4=ChkVariables)?
		public Group getGroup_8_2() { return cGroup_8_2; }

		//var3=ChkVariables
		public Assignment getVar3Assignment_8_2_0() { return cVar3Assignment_8_2_0; }

		//ChkVariables
		public RuleCall getVar3ChkVariablesParserRuleCall_8_2_0_0() { return cVar3ChkVariablesParserRuleCall_8_2_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_8_2_1() { return cFullStopFullStopKeyword_8_2_1; }

		//var4=ChkVariables
		public Assignment getVar4Assignment_8_2_2() { return cVar4Assignment_8_2_2; }

		//ChkVariables
		public RuleCall getVar4ChkVariablesParserRuleCall_8_2_2_0() { return cVar4ChkVariablesParserRuleCall_8_2_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_8_3() { return cRightParenthesisKeyword_8_3; }

		//size="size" "(" var=ChkVariable ")"
		public Group getGroup_9() { return cGroup_9; }

		//size="size"
		public Assignment getSizeAssignment_9_0() { return cSizeAssignment_9_0; }

		//"size"
		public Keyword getSizeSizeKeyword_9_0_0() { return cSizeSizeKeyword_9_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_9_2() { return cVarAssignment_9_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_9_2_0() { return cVarChkVariableParserRuleCall_9_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_9_3() { return cRightParenthesisKeyword_9_3; }

		//contains="contain" "(" var=ChkVariable "," var3=ChkVariables ")"
		public Group getGroup_10() { return cGroup_10; }

		//contains="contain"
		public Assignment getContainsAssignment_10_0() { return cContainsAssignment_10_0; }

		//"contain"
		public Keyword getContainsContainKeyword_10_0_0() { return cContainsContainKeyword_10_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_10_1() { return cLeftParenthesisKeyword_10_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_10_2() { return cVarAssignment_10_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_10_2_0() { return cVarChkVariableParserRuleCall_10_2_0; }

		//","
		public Keyword getCommaKeyword_10_3() { return cCommaKeyword_10_3; }

		//var3=ChkVariables
		public Assignment getVar3Assignment_10_4() { return cVar3Assignment_10_4; }

		//ChkVariables
		public RuleCall getVar3ChkVariablesParserRuleCall_10_4_0() { return cVar3ChkVariablesParserRuleCall_10_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_10_5() { return cRightParenthesisKeyword_10_5; }

		//addRow="addRow" "(" var=ChkVariable ")"
		public Group getGroup_11() { return cGroup_11; }

		//addRow="addRow"
		public Assignment getAddRowAssignment_11_0() { return cAddRowAssignment_11_0; }

		//"addRow"
		public Keyword getAddRowAddRowKeyword_11_0_0() { return cAddRowAddRowKeyword_11_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_11_1() { return cLeftParenthesisKeyword_11_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_11_2() { return cVarAssignment_11_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_11_2_0() { return cVarChkVariableParserRuleCall_11_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_11_3() { return cRightParenthesisKeyword_11_3; }

		//addCol="addColumn" "(" var=ChkVariable ")"
		public Group getGroup_12() { return cGroup_12; }

		//addCol="addColumn"
		public Assignment getAddColAssignment_12_0() { return cAddColAssignment_12_0; }

		//"addColumn"
		public Keyword getAddColAddColumnKeyword_12_0_0() { return cAddColAddColumnKeyword_12_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_12_1() { return cLeftParenthesisKeyword_12_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_12_2() { return cVarAssignment_12_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_12_2_0() { return cVarChkVariableParserRuleCall_12_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_12_3() { return cRightParenthesisKeyword_12_3; }

		//swapRow="swapRow" "(" var=ChkVariable "," var1=ValidID "," var2=ValidID ")"
		public Group getGroup_13() { return cGroup_13; }

		//swapRow="swapRow"
		public Assignment getSwapRowAssignment_13_0() { return cSwapRowAssignment_13_0; }

		//"swapRow"
		public Keyword getSwapRowSwapRowKeyword_13_0_0() { return cSwapRowSwapRowKeyword_13_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_13_1() { return cLeftParenthesisKeyword_13_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_13_2() { return cVarAssignment_13_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_13_2_0() { return cVarChkVariableParserRuleCall_13_2_0; }

		//","
		public Keyword getCommaKeyword_13_3() { return cCommaKeyword_13_3; }

		//var1=ValidID
		public Assignment getVar1Assignment_13_4() { return cVar1Assignment_13_4; }

		//ValidID
		public RuleCall getVar1ValidIDParserRuleCall_13_4_0() { return cVar1ValidIDParserRuleCall_13_4_0; }

		//","
		public Keyword getCommaKeyword_13_5() { return cCommaKeyword_13_5; }

		//var2=ValidID
		public Assignment getVar2Assignment_13_6() { return cVar2Assignment_13_6; }

		//ValidID
		public RuleCall getVar2ValidIDParserRuleCall_13_6_0() { return cVar2ValidIDParserRuleCall_13_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_13_7() { return cRightParenthesisKeyword_13_7; }

		//swapCol="swapColumn" "(" var=ChkVariable "," var1=ValidID "," var2=ValidID ")"
		public Group getGroup_14() { return cGroup_14; }

		//swapCol="swapColumn"
		public Assignment getSwapColAssignment_14_0() { return cSwapColAssignment_14_0; }

		//"swapColumn"
		public Keyword getSwapColSwapColumnKeyword_14_0_0() { return cSwapColSwapColumnKeyword_14_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_14_1() { return cLeftParenthesisKeyword_14_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_14_2() { return cVarAssignment_14_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_14_2_0() { return cVarChkVariableParserRuleCall_14_2_0; }

		//","
		public Keyword getCommaKeyword_14_3() { return cCommaKeyword_14_3; }

		//var1=ValidID
		public Assignment getVar1Assignment_14_4() { return cVar1Assignment_14_4; }

		//ValidID
		public RuleCall getVar1ValidIDParserRuleCall_14_4_0() { return cVar1ValidIDParserRuleCall_14_4_0; }

		//","
		public Keyword getCommaKeyword_14_5() { return cCommaKeyword_14_5; }

		//var2=ValidID
		public Assignment getVar2Assignment_14_6() { return cVar2Assignment_14_6; }

		//ValidID
		public RuleCall getVar2ValidIDParserRuleCall_14_6_0() { return cVar2ValidIDParserRuleCall_14_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_14_7() { return cRightParenthesisKeyword_14_7; }

		//removeRow="removeRow" "(" var=ChkVariable "," var3=ChkVariables ")"
		public Group getGroup_15() { return cGroup_15; }

		//removeRow="removeRow"
		public Assignment getRemoveRowAssignment_15_0() { return cRemoveRowAssignment_15_0; }

		//"removeRow"
		public Keyword getRemoveRowRemoveRowKeyword_15_0_0() { return cRemoveRowRemoveRowKeyword_15_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_15_1() { return cLeftParenthesisKeyword_15_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_15_2() { return cVarAssignment_15_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_15_2_0() { return cVarChkVariableParserRuleCall_15_2_0; }

		//","
		public Keyword getCommaKeyword_15_3() { return cCommaKeyword_15_3; }

		//var3=ChkVariables
		public Assignment getVar3Assignment_15_4() { return cVar3Assignment_15_4; }

		//ChkVariables
		public RuleCall getVar3ChkVariablesParserRuleCall_15_4_0() { return cVar3ChkVariablesParserRuleCall_15_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_15_5() { return cRightParenthesisKeyword_15_5; }

		//removeCol="removeColumn" "(" var=ChkVariable "," var3=ChkVariables ")"
		public Group getGroup_16() { return cGroup_16; }

		//removeCol="removeColumn"
		public Assignment getRemoveColAssignment_16_0() { return cRemoveColAssignment_16_0; }

		//"removeColumn"
		public Keyword getRemoveColRemoveColumnKeyword_16_0_0() { return cRemoveColRemoveColumnKeyword_16_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_16_1() { return cLeftParenthesisKeyword_16_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_16_2() { return cVarAssignment_16_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_16_2_0() { return cVarChkVariableParserRuleCall_16_2_0; }

		//","
		public Keyword getCommaKeyword_16_3() { return cCommaKeyword_16_3; }

		//var3=ChkVariables
		public Assignment getVar3Assignment_16_4() { return cVar3Assignment_16_4; }

		//ChkVariables
		public RuleCall getVar3ChkVariablesParserRuleCall_16_4_0() { return cVar3ChkVariablesParserRuleCall_16_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_16_5() { return cRightParenthesisKeyword_16_5; }

		//permute="permute" "(" var=ChkVariable ")"
		public Group getGroup_17() { return cGroup_17; }

		//permute="permute"
		public Assignment getPermuteAssignment_17_0() { return cPermuteAssignment_17_0; }

		//"permute"
		public Keyword getPermutePermuteKeyword_17_0_0() { return cPermutePermuteKeyword_17_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_17_1() { return cLeftParenthesisKeyword_17_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_17_2() { return cVarAssignment_17_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_17_2_0() { return cVarChkVariableParserRuleCall_17_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_17_3() { return cRightParenthesisKeyword_17_3; }

		//plus="plus" "(" var=ChkVariable "," var3=ChkVariables ")"
		public Group getGroup_18() { return cGroup_18; }

		//plus="plus"
		public Assignment getPlusAssignment_18_0() { return cPlusAssignment_18_0; }

		//"plus"
		public Keyword getPlusPlusKeyword_18_0_0() { return cPlusPlusKeyword_18_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_18_1() { return cLeftParenthesisKeyword_18_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_18_2() { return cVarAssignment_18_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_18_2_0() { return cVarChkVariableParserRuleCall_18_2_0; }

		//","
		public Keyword getCommaKeyword_18_3() { return cCommaKeyword_18_3; }

		//var3=ChkVariables
		public Assignment getVar3Assignment_18_4() { return cVar3Assignment_18_4; }

		//ChkVariables
		public RuleCall getVar3ChkVariablesParserRuleCall_18_4_0() { return cVar3ChkVariablesParserRuleCall_18_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_18_5() { return cRightParenthesisKeyword_18_5; }

		//multiply="multiply" "(" var=ChkVariable "," var3=ChkVariables ")"
		public Group getGroup_19() { return cGroup_19; }

		//multiply="multiply"
		public Assignment getMultiplyAssignment_19_0() { return cMultiplyAssignment_19_0; }

		//"multiply"
		public Keyword getMultiplyMultiplyKeyword_19_0_0() { return cMultiplyMultiplyKeyword_19_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_19_1() { return cLeftParenthesisKeyword_19_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_19_2() { return cVarAssignment_19_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_19_2_0() { return cVarChkVariableParserRuleCall_19_2_0; }

		//","
		public Keyword getCommaKeyword_19_3() { return cCommaKeyword_19_3; }

		//var3=ChkVariables
		public Assignment getVar3Assignment_19_4() { return cVar3Assignment_19_4; }

		//ChkVariables
		public RuleCall getVar3ChkVariablesParserRuleCall_19_4_0() { return cVar3ChkVariablesParserRuleCall_19_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_19_5() { return cRightParenthesisKeyword_19_5; }

		//invert="invert" "(" var=ChkVariable ")"
		public Group getGroup_20() { return cGroup_20; }

		//invert="invert"
		public Assignment getInvertAssignment_20_0() { return cInvertAssignment_20_0; }

		//"invert"
		public Keyword getInvertInvertKeyword_20_0_0() { return cInvertInvertKeyword_20_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_20_1() { return cLeftParenthesisKeyword_20_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_20_2() { return cVarAssignment_20_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_20_2_0() { return cVarChkVariableParserRuleCall_20_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_20_3() { return cRightParenthesisKeyword_20_3; }

		//include="include" "(" var=ChkVariable "," var3=ChkVariables ")"
		public Group getGroup_21() { return cGroup_21; }

		//include="include"
		public Assignment getIncludeAssignment_21_0() { return cIncludeAssignment_21_0; }

		//"include"
		public Keyword getIncludeIncludeKeyword_21_0_0() { return cIncludeIncludeKeyword_21_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_21_1() { return cLeftParenthesisKeyword_21_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_21_2() { return cVarAssignment_21_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_21_2_0() { return cVarChkVariableParserRuleCall_21_2_0; }

		//","
		public Keyword getCommaKeyword_21_3() { return cCommaKeyword_21_3; }

		//var3=ChkVariables
		public Assignment getVar3Assignment_21_4() { return cVar3Assignment_21_4; }

		//ChkVariables
		public RuleCall getVar3ChkVariablesParserRuleCall_21_4_0() { return cVar3ChkVariablesParserRuleCall_21_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_21_5() { return cRightParenthesisKeyword_21_5; }

		//exclude="exclude" "(" var=ChkVariable "," var3=ChkVariables ")"
		public Group getGroup_22() { return cGroup_22; }

		//exclude="exclude"
		public Assignment getExcludeAssignment_22_0() { return cExcludeAssignment_22_0; }

		//"exclude"
		public Keyword getExcludeExcludeKeyword_22_0_0() { return cExcludeExcludeKeyword_22_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_22_1() { return cLeftParenthesisKeyword_22_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_22_2() { return cVarAssignment_22_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_22_2_0() { return cVarChkVariableParserRuleCall_22_2_0; }

		//","
		public Keyword getCommaKeyword_22_3() { return cCommaKeyword_22_3; }

		//var3=ChkVariables
		public Assignment getVar3Assignment_22_4() { return cVar3Assignment_22_4; }

		//ChkVariables
		public RuleCall getVar3ChkVariablesParserRuleCall_22_4_0() { return cVar3ChkVariablesParserRuleCall_22_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_22_5() { return cRightParenthesisKeyword_22_5; }

		//compositional="compositional" "(" var=ChkVariable ")"
		public Group getGroup_23() { return cGroup_23; }

		//compositional="compositional"
		public Assignment getCompositionalAssignment_23_0() { return cCompositionalAssignment_23_0; }

		//"compositional"
		public Keyword getCompositionalCompositionalKeyword_23_0_0() { return cCompositionalCompositionalKeyword_23_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_23_1() { return cLeftParenthesisKeyword_23_1; }

		//var=ChkVariable
		public Assignment getVarAssignment_23_2() { return cVarAssignment_23_2; }

		//ChkVariable
		public RuleCall getVarChkVariableParserRuleCall_23_2_0() { return cVarChkVariableParserRuleCall_23_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_23_3() { return cRightParenthesisKeyword_23_3; }
	}

	public class ChkRelationalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChkRelationalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cV1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cV1ChkVariablesParserRuleCall_0_0 = (RuleCall)cV1Assignment_0.eContents().get(0);
		private final Assignment cOprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOprChkOpRelationalParserRuleCall_1_0 = (RuleCall)cOprAssignment_1.eContents().get(0);
		private final Assignment cV2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cV2ChkVariablesParserRuleCall_2_0 = (RuleCall)cV2Assignment_2.eContents().get(0);
		
		//ChkRelationalExpression:
		//	v1=ChkVariables opr=ChkOpRelational v2=ChkVariables;
		public ParserRule getRule() { return rule; }

		//v1=ChkVariables opr=ChkOpRelational v2=ChkVariables
		public Group getGroup() { return cGroup; }

		//v1=ChkVariables
		public Assignment getV1Assignment_0() { return cV1Assignment_0; }

		//ChkVariables
		public RuleCall getV1ChkVariablesParserRuleCall_0_0() { return cV1ChkVariablesParserRuleCall_0_0; }

		//opr=ChkOpRelational
		public Assignment getOprAssignment_1() { return cOprAssignment_1; }

		//ChkOpRelational
		public RuleCall getOprChkOpRelationalParserRuleCall_1_0() { return cOprChkOpRelationalParserRuleCall_1_0; }

		//v2=ChkVariables
		public Assignment getV2Assignment_2() { return cV2Assignment_2; }

		//ChkVariables
		public RuleCall getV2ChkVariablesParserRuleCall_2_0() { return cV2ChkVariablesParserRuleCall_2_0; }
	}

	public class ChkAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChkAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDefAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cDefDefKeyword_0_0 = (Keyword)cDefAssignment_0.eContents().get(0);
		private final Assignment cV1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cV1ChkVariableParserRuleCall_1_0 = (RuleCall)cV1Assignment_1.eContents().get(0);
		private final Assignment cOprAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOprChkOpAssignmentParserRuleCall_2_0 = (RuleCall)cOprAssignment_2.eContents().get(0);
		private final Assignment cV2Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cV2Alternatives_3_0 = (Alternatives)cV2Assignment_3.eContents().get(0);
		private final RuleCall cV2ChkOperationParserRuleCall_3_0_0 = (RuleCall)cV2Alternatives_3_0.eContents().get(0);
		private final RuleCall cV2HelperParserRuleCall_3_0_1 = (RuleCall)cV2Alternatives_3_0.eContents().get(1);
		
		//ChkAssignment:
		//	def="def"? v1=ChkVariable opr=ChkOpAssignment v2=(ChkOperation | Helper);
		public ParserRule getRule() { return rule; }

		//def="def"? v1=ChkVariable opr=ChkOpAssignment v2=(ChkOperation | Helper)
		public Group getGroup() { return cGroup; }

		//def="def"?
		public Assignment getDefAssignment_0() { return cDefAssignment_0; }

		//"def"
		public Keyword getDefDefKeyword_0_0() { return cDefDefKeyword_0_0; }

		//v1=ChkVariable
		public Assignment getV1Assignment_1() { return cV1Assignment_1; }

		//ChkVariable
		public RuleCall getV1ChkVariableParserRuleCall_1_0() { return cV1ChkVariableParserRuleCall_1_0; }

		//opr=ChkOpAssignment
		public Assignment getOprAssignment_2() { return cOprAssignment_2; }

		//ChkOpAssignment
		public RuleCall getOprChkOpAssignmentParserRuleCall_2_0() { return cOprChkOpAssignmentParserRuleCall_2_0; }

		//v2=(ChkOperation | Helper)
		public Assignment getV2Assignment_3() { return cV2Assignment_3; }

		//ChkOperation | Helper
		public Alternatives getV2Alternatives_3_0() { return cV2Alternatives_3_0; }

		//ChkOperation
		public RuleCall getV2ChkOperationParserRuleCall_3_0_0() { return cV2ChkOperationParserRuleCall_3_0_0; }

		//Helper
		public RuleCall getV2HelperParserRuleCall_3_0_1() { return cV2HelperParserRuleCall_3_0_1; }
	}

	public class ChkGeneralExpressionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChkGeneralExpressions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHelperParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChkRelationalExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cMethodCallParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cChkAssignmentParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ChkGeneralExpressions:
		//	Helper | ChkRelationalExpression | MethodCall | ChkAssignment;
		public ParserRule getRule() { return rule; }

		//Helper | ChkRelationalExpression | MethodCall | ChkAssignment
		public Alternatives getAlternatives() { return cAlternatives; }

		//Helper
		public RuleCall getHelperParserRuleCall_0() { return cHelperParserRuleCall_0; }

		//ChkRelationalExpression
		public RuleCall getChkRelationalExpressionParserRuleCall_1() { return cChkRelationalExpressionParserRuleCall_1; }

		//MethodCall
		public RuleCall getMethodCallParserRuleCall_2() { return cMethodCallParserRuleCall_2; }

		//ChkAssignment
		public RuleCall getChkAssignmentParserRuleCall_3() { return cChkAssignmentParserRuleCall_3; }
	}

	public class ChkOpAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChkOpAssignment");
		private final Keyword cEqualsSignKeyword = (Keyword)rule.eContents().get(1);
		
		//ChkOpAssignment:
		//	"=";
		public ParserRule getRule() { return rule; }

		//"="
		public Keyword getEqualsSignKeyword() { return cEqualsSignKeyword; }
	}

	public class ChkOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChkOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cSolidusKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cVerticalLineKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAmpersandKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cCircumflexAccentKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		
		//ChkOperator:
		//	"+" | "-" | "*" | "/" | "|" | "&" | "^";
		public ParserRule getRule() { return rule; }

		//"+" | "-" | "*" | "/" | "|" | "&" | "^"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }

		//"*"
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }

		//"/"
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }

		//"|"
		public Keyword getVerticalLineKeyword_4() { return cVerticalLineKeyword_4; }

		//"&"
		public Keyword getAmpersandKeyword_5() { return cAmpersandKeyword_5; }

		//"^"
		public Keyword getCircumflexAccentKeyword_6() { return cCircumflexAccentKeyword_6; }
	}

	public class ChkOperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChkOperation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperandChkVariablesParserRuleCall_0_0 = (RuleCall)cOperandAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorChkOperatorParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cOperandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperandChkVariablesParserRuleCall_1_1_0 = (RuleCall)cOperandAssignment_1_1.eContents().get(0);
		
		//ChkOperation:
		//	operand+=ChkVariables (operator+=ChkOperator operand+=ChkVariables)*;
		public ParserRule getRule() { return rule; }

		//operand+=ChkVariables (operator+=ChkOperator operand+=ChkVariables)*
		public Group getGroup() { return cGroup; }

		//operand+=ChkVariables
		public Assignment getOperandAssignment_0() { return cOperandAssignment_0; }

		//ChkVariables
		public RuleCall getOperandChkVariablesParserRuleCall_0_0() { return cOperandChkVariablesParserRuleCall_0_0; }

		//(operator+=ChkOperator operand+=ChkVariables)*
		public Group getGroup_1() { return cGroup_1; }

		//operator+=ChkOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//ChkOperator
		public RuleCall getOperatorChkOperatorParserRuleCall_1_0_0() { return cOperatorChkOperatorParserRuleCall_1_0_0; }

		//operand+=ChkVariables
		public Assignment getOperandAssignment_1_1() { return cOperandAssignment_1_1; }

		//ChkVariables
		public RuleCall getOperandChkVariablesParserRuleCall_1_1_0() { return cOperandChkVariablesParserRuleCall_1_1_0; }
	}

	public class ChkOpRelationalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChkOpRelational");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//ChkOpRelational:
		//	"==" | "!=" | ">=" | "<=" | ">" | "<";
		public ParserRule getRule() { return rule; }

		//"==" | "!=" | ">=" | "<=" | ">" | "<"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_0() { return cEqualsSignEqualsSignKeyword_0; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_2() { return cGreaterThanSignEqualsSignKeyword_2; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }

		//">"
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }

		//"<"
		public Keyword getLessThanSignKeyword_5() { return cLessThanSignKeyword_5; }
	}

	public class ChkAndOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChkAndOr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAndKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ChkAndOr:
		//	"and" | "or";
		public ParserRule getRule() { return rule; }

		//"and" | "or"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"and"
		public Keyword getAndKeyword_0() { return cAndKeyword_0; }

		//"or"
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
	}

	public class ChkLoopExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChkLoopExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexChkVariableParserRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMaxIndexAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMaxIndexChkVariablesParserRuleCall_4_0 = (RuleCall)cMaxIndexAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExChkExpressionParserRuleCall_7_0 = (RuleCall)cExAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ChkLoopExpression:
		//	"for" "(" index=ChkVariable "," maxIndex=ChkVariables ")" "{" ex+=ChkExpression* "}";
		public ParserRule getRule() { return rule; }

		//"for" "(" index=ChkVariable "," maxIndex=ChkVariables ")" "{" ex+=ChkExpression* "}"
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//index=ChkVariable
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }

		//ChkVariable
		public RuleCall getIndexChkVariableParserRuleCall_2_0() { return cIndexChkVariableParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//maxIndex=ChkVariables
		public Assignment getMaxIndexAssignment_4() { return cMaxIndexAssignment_4; }

		//ChkVariables
		public RuleCall getMaxIndexChkVariablesParserRuleCall_4_0() { return cMaxIndexChkVariablesParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//ex+=ChkExpression*
		public Assignment getExAssignment_7() { return cExAssignment_7; }

		//ChkExpression
		public RuleCall getExChkExpressionParserRuleCall_7_0() { return cExChkExpressionParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class ChkExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChkExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpChkGeneralExpressionsParserRuleCall_1_0 = (RuleCall)cExpAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cWhereAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final Keyword cWhereWhereKeyword_2_0_0 = (Keyword)cWhereAssignment_2_0.eContents().get(0);
		private final Assignment cNotAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Keyword cNotNotKeyword_2_1_0 = (Keyword)cNotAssignment_2_1.eContents().get(0);
		private final Assignment cCondAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final Alternatives cCondAlternatives_2_2_0 = (Alternatives)cCondAssignment_2_2.eContents().get(0);
		private final RuleCall cCondChkRelationalExpressionParserRuleCall_2_2_0_0 = (RuleCall)cCondAlternatives_2_2_0.eContents().get(0);
		private final RuleCall cCondHelperParserRuleCall_2_2_0_1 = (RuleCall)cCondAlternatives_2_2_0.eContents().get(1);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Assignment cTypeAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final RuleCall cTypeChkAndOrParserRuleCall_2_3_0_0 = (RuleCall)cTypeAssignment_2_3_0.eContents().get(0);
		private final Assignment cCondAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final Alternatives cCondAlternatives_2_3_1_0 = (Alternatives)cCondAssignment_2_3_1.eContents().get(0);
		private final RuleCall cCondChkRelationalExpressionParserRuleCall_2_3_1_0_0 = (RuleCall)cCondAlternatives_2_3_1_0.eContents().get(0);
		private final RuleCall cCondHelperParserRuleCall_2_3_1_0_1 = (RuleCall)cCondAlternatives_2_3_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cOpAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cOpChkOpRelationalParserRuleCall_3_0_0 = (RuleCall)cOpAssignment_3_0.eContents().get(0);
		private final Assignment cVAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cVChkVariableParserRuleCall_3_1_0 = (RuleCall)cVAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ChkExpression:
		//	"(" exp=ChkGeneralExpressions (where="where" not="not"? cond+=(ChkRelationalExpression | Helper) (type+=ChkAndOr
		//	cond+=(ChkRelationalExpression | Helper))*)? (op=ChkOpRelational v=ChkVariable)? ")";
		public ParserRule getRule() { return rule; }

		//"(" exp=ChkGeneralExpressions (where="where" not="not"? cond+=(ChkRelationalExpression | Helper) (type+=ChkAndOr
		//cond+=(ChkRelationalExpression | Helper))*)? (op=ChkOpRelational v=ChkVariable)? ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//exp=ChkGeneralExpressions
		public Assignment getExpAssignment_1() { return cExpAssignment_1; }

		//ChkGeneralExpressions
		public RuleCall getExpChkGeneralExpressionsParserRuleCall_1_0() { return cExpChkGeneralExpressionsParserRuleCall_1_0; }

		//(where="where" not="not"? cond+=(ChkRelationalExpression | Helper) (type+=ChkAndOr cond+=(ChkRelationalExpression |
		//Helper))*)?
		public Group getGroup_2() { return cGroup_2; }

		//where="where"
		public Assignment getWhereAssignment_2_0() { return cWhereAssignment_2_0; }

		//"where"
		public Keyword getWhereWhereKeyword_2_0_0() { return cWhereWhereKeyword_2_0_0; }

		//not="not"?
		public Assignment getNotAssignment_2_1() { return cNotAssignment_2_1; }

		//"not"
		public Keyword getNotNotKeyword_2_1_0() { return cNotNotKeyword_2_1_0; }

		//cond+=(ChkRelationalExpression | Helper)
		public Assignment getCondAssignment_2_2() { return cCondAssignment_2_2; }

		//ChkRelationalExpression | Helper
		public Alternatives getCondAlternatives_2_2_0() { return cCondAlternatives_2_2_0; }

		//ChkRelationalExpression
		public RuleCall getCondChkRelationalExpressionParserRuleCall_2_2_0_0() { return cCondChkRelationalExpressionParserRuleCall_2_2_0_0; }

		//Helper
		public RuleCall getCondHelperParserRuleCall_2_2_0_1() { return cCondHelperParserRuleCall_2_2_0_1; }

		//(type+=ChkAndOr cond+=(ChkRelationalExpression | Helper))*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//type+=ChkAndOr
		public Assignment getTypeAssignment_2_3_0() { return cTypeAssignment_2_3_0; }

		//ChkAndOr
		public RuleCall getTypeChkAndOrParserRuleCall_2_3_0_0() { return cTypeChkAndOrParserRuleCall_2_3_0_0; }

		//cond+=(ChkRelationalExpression | Helper)
		public Assignment getCondAssignment_2_3_1() { return cCondAssignment_2_3_1; }

		//ChkRelationalExpression | Helper
		public Alternatives getCondAlternatives_2_3_1_0() { return cCondAlternatives_2_3_1_0; }

		//ChkRelationalExpression
		public RuleCall getCondChkRelationalExpressionParserRuleCall_2_3_1_0_0() { return cCondChkRelationalExpressionParserRuleCall_2_3_1_0_0; }

		//Helper
		public RuleCall getCondHelperParserRuleCall_2_3_1_0_1() { return cCondHelperParserRuleCall_2_3_1_0_1; }

		//(op=ChkOpRelational v=ChkVariable)?
		public Group getGroup_3() { return cGroup_3; }

		//op=ChkOpRelational
		public Assignment getOpAssignment_3_0() { return cOpAssignment_3_0; }

		//ChkOpRelational
		public RuleCall getOpChkOpRelationalParserRuleCall_3_0_0() { return cOpChkOpRelationalParserRuleCall_3_0_0; }

		//v=ChkVariable
		public Assignment getVAssignment_3_1() { return cVAssignment_3_1; }

		//ChkVariable
		public RuleCall getVChkVariableParserRuleCall_3_1_0() { return cVChkVariableParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class CheckElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Check");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCheckAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cCheckCheckKeyword_0_0 = (Keyword)cCheckAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cChkAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cChkAlternatives_2_0 = (Alternatives)cChkAssignment_2.eContents().get(0);
		private final RuleCall cChkChkExpressionParserRuleCall_2_0_0 = (RuleCall)cChkAlternatives_2_0.eContents().get(0);
		private final RuleCall cChkChkLoopExpressionParserRuleCall_2_0_1 = (RuleCall)cChkAlternatives_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Check:
		//	check="check" "{" chk+=(ChkExpression | ChkLoopExpression)* "}";
		public ParserRule getRule() { return rule; }

		//check="check" "{" chk+=(ChkExpression | ChkLoopExpression)* "}"
		public Group getGroup() { return cGroup; }

		//check="check"
		public Assignment getCheckAssignment_0() { return cCheckAssignment_0; }

		//"check"
		public Keyword getCheckCheckKeyword_0_0() { return cCheckCheckKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//chk+=(ChkExpression | ChkLoopExpression)*
		public Assignment getChkAssignment_2() { return cChkAssignment_2; }

		//ChkExpression | ChkLoopExpression
		public Alternatives getChkAlternatives_2_0() { return cChkAlternatives_2_0; }

		//ChkExpression
		public RuleCall getChkChkExpressionParserRuleCall_2_0_0() { return cChkChkExpressionParserRuleCall_2_0_0; }

		//ChkLoopExpression
		public RuleCall getChkChkLoopExpressionParserRuleCall_2_0_1() { return cChkChkLoopExpressionParserRuleCall_2_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class SpValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cValCHK_NUMBERParserRuleCall_0_0 = (RuleCall)cValAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValCHK_NUMBERParserRuleCall_1_1_0 = (RuleCall)cValAssignment_1_1.eContents().get(0);
		
		//SpValue:
		//	val+=CHK_NUMBER ("," val+=CHK_NUMBER)*;
		public ParserRule getRule() { return rule; }

		//val+=CHK_NUMBER ("," val+=CHK_NUMBER)*
		public Group getGroup() { return cGroup; }

		//val+=CHK_NUMBER
		public Assignment getValAssignment_0() { return cValAssignment_0; }

		//CHK_NUMBER
		public RuleCall getValCHK_NUMBERParserRuleCall_0_0() { return cValCHK_NUMBERParserRuleCall_0_0; }

		//("," val+=CHK_NUMBER)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//val+=CHK_NUMBER
		public Assignment getValAssignment_1_1() { return cValAssignment_1_1; }

		//CHK_NUMBER
		public RuleCall getValCHK_NUMBERParserRuleCall_1_1_0() { return cValCHK_NUMBERParserRuleCall_1_1_0; }
	}

	public class LimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Limit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSubAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSubSubtaskParserRuleCall_0_0 = (RuleCall)cSubAssignment_0.eContents().get(0);
		private final Assignment cAAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cACHK_ELEMENTParserRuleCall_1_0 = (RuleCall)cAAssignment_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBCHK_ELEMENTParserRuleCall_3_0 = (RuleCall)cBAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cAAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cACHK_ELEMENTParserRuleCall_4_1_0 = (RuleCall)cAAssignment_4_1.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cBAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cBCHK_ELEMENTParserRuleCall_4_3_0 = (RuleCall)cBAssignment_4_3.eContents().get(0);
		
		//Limit:
		//	sub=Subtask? a+=CHK_ELEMENT ".." b+=CHK_ELEMENT ("," a+=CHK_ELEMENT ".." b+=CHK_ELEMENT)*;
		public ParserRule getRule() { return rule; }

		//sub=Subtask? a+=CHK_ELEMENT ".." b+=CHK_ELEMENT ("," a+=CHK_ELEMENT ".." b+=CHK_ELEMENT)*
		public Group getGroup() { return cGroup; }

		//sub=Subtask?
		public Assignment getSubAssignment_0() { return cSubAssignment_0; }

		//Subtask
		public RuleCall getSubSubtaskParserRuleCall_0_0() { return cSubSubtaskParserRuleCall_0_0; }

		//a+=CHK_ELEMENT
		public Assignment getAAssignment_1() { return cAAssignment_1; }

		//CHK_ELEMENT
		public RuleCall getACHK_ELEMENTParserRuleCall_1_0() { return cACHK_ELEMENTParserRuleCall_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_2() { return cFullStopFullStopKeyword_2; }

		//b+=CHK_ELEMENT
		public Assignment getBAssignment_3() { return cBAssignment_3; }

		//CHK_ELEMENT
		public RuleCall getBCHK_ELEMENTParserRuleCall_3_0() { return cBCHK_ELEMENTParserRuleCall_3_0; }

		//("," a+=CHK_ELEMENT ".." b+=CHK_ELEMENT)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//a+=CHK_ELEMENT
		public Assignment getAAssignment_4_1() { return cAAssignment_4_1; }

		//CHK_ELEMENT
		public RuleCall getACHK_ELEMENTParserRuleCall_4_1_0() { return cACHK_ELEMENTParserRuleCall_4_1_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_4_2() { return cFullStopFullStopKeyword_4_2; }

		//b+=CHK_ELEMENT
		public Assignment getBAssignment_4_3() { return cBAssignment_4_3; }

		//CHK_ELEMENT
		public RuleCall getBCHK_ELEMENTParserRuleCall_4_3_0() { return cBCHK_ELEMENTParserRuleCall_4_3_0; }
	}

	public class SubtaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Subtask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSubtaskKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNumAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNumINTTerminalRuleCall_1_0 = (RuleCall)cNumAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Subtask:
		//	"subtask" num=INT ":";
		public ParserRule getRule() { return rule; }

		//"subtask" num=INT ":"
		public Group getGroup() { return cGroup; }

		//"subtask"
		public Keyword getSubtaskKeyword_0() { return cSubtaskKeyword_0; }

		//num=INT
		public Assignment getNumAssignment_1() { return cNumAssignment_1; }

		//INT
		public RuleCall getNumINTTerminalRuleCall_1_0() { return cNumINTTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
	}

	public class FormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Format");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cInputFormatParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOutputFormatParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHiddenFormatParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Format:
		//	InputFormat | OutputFormat | HiddenFormat;
		public ParserRule getRule() { return rule; }

		//InputFormat | OutputFormat | HiddenFormat
		public Alternatives getAlternatives() { return cAlternatives; }

		//InputFormat
		public RuleCall getInputFormatParserRuleCall_0() { return cInputFormatParserRuleCall_0; }

		//OutputFormat
		public RuleCall getOutputFormatParserRuleCall_1() { return cOutputFormatParserRuleCall_1; }

		//HiddenFormat
		public RuleCall getHiddenFormatParserRuleCall_2() { return cHiddenFormatParserRuleCall_2; }
	}

	public class ForFormatExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForFormatExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIndexAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIndexChkVariableParserRuleCall_2_0 = (RuleCall)cIndexAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMaxIndexAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMaxIndexChkVariablesParserRuleCall_4_0 = (RuleCall)cMaxIndexAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cExAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cExFormatExpressionParserRuleCall_7_0 = (RuleCall)cExAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ForFormatExpression:
		//	"for" "(" index=ChkVariable "," maxIndex=ChkVariables ")" "{" ex+=FormatExpression* "}";
		public ParserRule getRule() { return rule; }

		//"for" "(" index=ChkVariable "," maxIndex=ChkVariables ")" "{" ex+=FormatExpression* "}"
		public Group getGroup() { return cGroup; }

		//"for"
		public Keyword getForKeyword_0() { return cForKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//index=ChkVariable
		public Assignment getIndexAssignment_2() { return cIndexAssignment_2; }

		//ChkVariable
		public RuleCall getIndexChkVariableParserRuleCall_2_0() { return cIndexChkVariableParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//maxIndex=ChkVariables
		public Assignment getMaxIndexAssignment_4() { return cMaxIndexAssignment_4; }

		//ChkVariables
		public RuleCall getMaxIndexChkVariablesParserRuleCall_4_0() { return cMaxIndexChkVariablesParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//ex+=FormatExpression*
		public Assignment getExAssignment_7() { return cExAssignment_7; }

		//FormatExpression
		public RuleCall getExFormatExpressionParserRuleCall_7_0() { return cExFormatExpressionParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class InputFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputFormat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cInputAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cInputInputKeyword_0_0 = (Keyword)cInputAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cExpAlternatives_2_0 = (Alternatives)cExpAssignment_2.eContents().get(0);
		private final RuleCall cExpFormatExpressionParserRuleCall_2_0_0 = (RuleCall)cExpAlternatives_2_0.eContents().get(0);
		private final RuleCall cExpForFormatExpressionParserRuleCall_2_0_1 = (RuleCall)cExpAlternatives_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InputFormat:
		//	input="input" "{" exp+=(FormatExpression | ForFormatExpression)* "}";
		public ParserRule getRule() { return rule; }

		//input="input" "{" exp+=(FormatExpression | ForFormatExpression)* "}"
		public Group getGroup() { return cGroup; }

		//input="input"
		public Assignment getInputAssignment_0() { return cInputAssignment_0; }

		//"input"
		public Keyword getInputInputKeyword_0_0() { return cInputInputKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//exp+=(FormatExpression | ForFormatExpression)*
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//FormatExpression | ForFormatExpression
		public Alternatives getExpAlternatives_2_0() { return cExpAlternatives_2_0; }

		//FormatExpression
		public RuleCall getExpFormatExpressionParserRuleCall_2_0_0() { return cExpFormatExpressionParserRuleCall_2_0_0; }

		//ForFormatExpression
		public RuleCall getExpForFormatExpressionParserRuleCall_2_0_1() { return cExpForFormatExpressionParserRuleCall_2_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class OutputFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputFormat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOutputAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cOutputOutputKeyword_0_0 = (Keyword)cOutputAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cExpAlternatives_2_0 = (Alternatives)cExpAssignment_2.eContents().get(0);
		private final RuleCall cExpFormatExpressionParserRuleCall_2_0_0 = (RuleCall)cExpAlternatives_2_0.eContents().get(0);
		private final RuleCall cExpForFormatExpressionParserRuleCall_2_0_1 = (RuleCall)cExpAlternatives_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OutputFormat:
		//	output="output" "{" exp+=(FormatExpression | ForFormatExpression)* "}";
		public ParserRule getRule() { return rule; }

		//output="output" "{" exp+=(FormatExpression | ForFormatExpression)* "}"
		public Group getGroup() { return cGroup; }

		//output="output"
		public Assignment getOutputAssignment_0() { return cOutputAssignment_0; }

		//"output"
		public Keyword getOutputOutputKeyword_0_0() { return cOutputOutputKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//exp+=(FormatExpression | ForFormatExpression)*
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//FormatExpression | ForFormatExpression
		public Alternatives getExpAlternatives_2_0() { return cExpAlternatives_2_0; }

		//FormatExpression
		public RuleCall getExpFormatExpressionParserRuleCall_2_0_0() { return cExpFormatExpressionParserRuleCall_2_0_0; }

		//ForFormatExpression
		public RuleCall getExpForFormatExpressionParserRuleCall_2_0_1() { return cExpForFormatExpressionParserRuleCall_2_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class HiddenFormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HiddenFormat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cHidAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cHidHiddenKeyword_0_0 = (Keyword)cHidAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cExpAlternatives_2_0 = (Alternatives)cExpAssignment_2.eContents().get(0);
		private final RuleCall cExpFormatExpressionParserRuleCall_2_0_0 = (RuleCall)cExpAlternatives_2_0.eContents().get(0);
		private final RuleCall cExpForFormatExpressionParserRuleCall_2_0_1 = (RuleCall)cExpAlternatives_2_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//HiddenFormat:
		//	hid="hidden" "{" exp+=(FormatExpression | ForFormatExpression)* "}";
		public ParserRule getRule() { return rule; }

		//hid="hidden" "{" exp+=(FormatExpression | ForFormatExpression)* "}"
		public Group getGroup() { return cGroup; }

		//hid="hidden"
		public Assignment getHidAssignment_0() { return cHidAssignment_0; }

		//"hidden"
		public Keyword getHidHiddenKeyword_0_0() { return cHidHiddenKeyword_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//exp+=(FormatExpression | ForFormatExpression)*
		public Assignment getExpAssignment_2() { return cExpAssignment_2; }

		//FormatExpression | ForFormatExpression
		public Alternatives getExpAlternatives_2_0() { return cExpAlternatives_2_0; }

		//FormatExpression
		public RuleCall getExpFormatExpressionParserRuleCall_2_0_0() { return cExpFormatExpressionParserRuleCall_2_0_0; }

		//ForFormatExpression
		public RuleCall getExpForFormatExpressionParserRuleCall_2_0_1() { return cExpForFormatExpressionParserRuleCall_2_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class FormatExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormatExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNumAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNumCHK_NUMBERParserRuleCall_0_0 = (RuleCall)cNumAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cVarAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cVarValidIDParserRuleCall_2_0_0 = (RuleCall)cVarAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cSzAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cSzCHK_NUMBERParserRuleCall_2_1_1_0 = (RuleCall)cSzAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cCountAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cCountCHK_NUMBERParserRuleCall_2_2_1_0 = (RuleCall)cCountAssignment_2_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_2_2 = (Keyword)cGroup_2_2.eContents().get(2);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cCommaKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cVarAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cVarValidIDParserRuleCall_2_3_1_0 = (RuleCall)cVarAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_2_3_2 = (Group)cGroup_2_3.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_3_2_0 = (Keyword)cGroup_2_3_2.eContents().get(0);
		private final Assignment cCountAssignment_2_3_2_1 = (Assignment)cGroup_2_3_2.eContents().get(1);
		private final RuleCall cCountCHK_NUMBERParserRuleCall_2_3_2_1_0 = (RuleCall)cCountAssignment_2_3_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_3_2_2 = (Keyword)cGroup_2_3_2.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FormatExpression:
		//	num=CHK_NUMBER "(" (var+=ValidID ("[" sz+=CHK_NUMBER "]")* ("<" count+=CHK_NUMBER ">")? ("," var+=ValidID ("<"
		//	count+=CHK_NUMBER ">")?)*)? ")";
		public ParserRule getRule() { return rule; }

		//num=CHK_NUMBER "(" (var+=ValidID ("[" sz+=CHK_NUMBER "]")* ("<" count+=CHK_NUMBER ">")? ("," var+=ValidID ("<"
		//count+=CHK_NUMBER ">")?)*)? ")"
		public Group getGroup() { return cGroup; }

		//num=CHK_NUMBER
		public Assignment getNumAssignment_0() { return cNumAssignment_0; }

		//CHK_NUMBER
		public RuleCall getNumCHK_NUMBERParserRuleCall_0_0() { return cNumCHK_NUMBERParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(var+=ValidID ("[" sz+=CHK_NUMBER "]")* ("<" count+=CHK_NUMBER ">")? ("," var+=ValidID ("<" count+=CHK_NUMBER ">")?)*)?
		public Group getGroup_2() { return cGroup_2; }

		//var+=ValidID
		public Assignment getVarAssignment_2_0() { return cVarAssignment_2_0; }

		//ValidID
		public RuleCall getVarValidIDParserRuleCall_2_0_0() { return cVarValidIDParserRuleCall_2_0_0; }

		//("[" sz+=CHK_NUMBER "]")*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2_1_0() { return cLeftSquareBracketKeyword_2_1_0; }

		//sz+=CHK_NUMBER
		public Assignment getSzAssignment_2_1_1() { return cSzAssignment_2_1_1; }

		//CHK_NUMBER
		public RuleCall getSzCHK_NUMBERParserRuleCall_2_1_1_0() { return cSzCHK_NUMBERParserRuleCall_2_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_2_1_2() { return cRightSquareBracketKeyword_2_1_2; }

		//("<" count+=CHK_NUMBER ">")?
		public Group getGroup_2_2() { return cGroup_2_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_2_0() { return cLessThanSignKeyword_2_2_0; }

		//count+=CHK_NUMBER
		public Assignment getCountAssignment_2_2_1() { return cCountAssignment_2_2_1; }

		//CHK_NUMBER
		public RuleCall getCountCHK_NUMBERParserRuleCall_2_2_1_0() { return cCountCHK_NUMBERParserRuleCall_2_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_2_2() { return cGreaterThanSignKeyword_2_2_2; }

		//("," var+=ValidID ("<" count+=CHK_NUMBER ">")?)*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//","
		public Keyword getCommaKeyword_2_3_0() { return cCommaKeyword_2_3_0; }

		//var+=ValidID
		public Assignment getVarAssignment_2_3_1() { return cVarAssignment_2_3_1; }

		//ValidID
		public RuleCall getVarValidIDParserRuleCall_2_3_1_0() { return cVarValidIDParserRuleCall_2_3_1_0; }

		//("<" count+=CHK_NUMBER ">")?
		public Group getGroup_2_3_2() { return cGroup_2_3_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_3_2_0() { return cLessThanSignKeyword_2_3_2_0; }

		//count+=CHK_NUMBER
		public Assignment getCountAssignment_2_3_2_1() { return cCountAssignment_2_3_2_1; }

		//CHK_NUMBER
		public RuleCall getCountCHK_NUMBERParserRuleCall_2_3_2_1_0() { return cCountCHK_NUMBERParserRuleCall_2_3_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_3_2_2() { return cGreaterThanSignKeyword_2_3_2_2; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class CHK_INTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CHK_INT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//CHK_INT:
		//	"-"? INT;
		public ParserRule getRule() { return rule; }

		//"-"? INT
		public Group getGroup() { return cGroup; }

		//"-"?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}

	public class CHK_ELEMENTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CHK_ELEMENT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCHK_NUMBERParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CHK_ELEMENT:
		//	CHK_NUMBER | STRING;
		public ParserRule getRule() { return rule; }

		//CHK_NUMBER | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//CHK_NUMBER
		public RuleCall getCHK_NUMBERParserRuleCall_0() { return cCHK_NUMBERParserRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}

	public class CHK_NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CHK_NUMBER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCHK_INTParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValidIDParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CHK_NUMBER:
		//	CHK_INT | ValidID;
		public ParserRule getRule() { return rule; }

		//CHK_INT | ValidID
		public Alternatives getAlternatives() { return cAlternatives; }

		//CHK_INT
		public RuleCall getCHK_INTParserRuleCall_0() { return cCHK_INTParserRuleCall_0; }

		//ValidID
		public RuleCall getValidIDParserRuleCall_1() { return cValidIDParserRuleCall_1; }
	}
	
	
	private final DslElements pDsl;
	private final AbstractElementElements pAbstractElement;
	private final PackageDeclarationElements pPackageDeclaration;
	private final ClassElements pClass;
	private final FeatureElements pFeature;
	private final MethodElements pMethod;
	private final ChkScoreExpressionElements pChkScoreExpression;
	private final ScoreElements pScore;
	private final FollowUpElements pFollowUp;
	private final PropertyElements pProperty;
	private final MRElements pMR;
	private final ChkVariableDeclarationElements pChkVariableDeclaration;
	private final ChkTypeReferenceElements pChkTypeReference;
	private final MethodCallElements pMethodCall;
	private final ChkPrefixElements pChkPrefix;
	private final ChkVariableElements pChkVariable;
	private final ChkVariablesElements pChkVariables;
	private final ChkItemGroupElements pChkItemGroup;
	private final HelperElements pHelper;
	private final ChkRelationalExpressionElements pChkRelationalExpression;
	private final ChkAssignmentElements pChkAssignment;
	private final ChkGeneralExpressionsElements pChkGeneralExpressions;
	private final ChkOpAssignmentElements pChkOpAssignment;
	private final ChkOperatorElements pChkOperator;
	private final ChkOperationElements pChkOperation;
	private final ChkOpRelationalElements pChkOpRelational;
	private final ChkAndOrElements pChkAndOr;
	private final ChkLoopExpressionElements pChkLoopExpression;
	private final ChkExpressionElements pChkExpression;
	private final CheckElements pCheck;
	private final SpValueElements pSpValue;
	private final LimitElements pLimit;
	private final SubtaskElements pSubtask;
	private final FormatElements pFormat;
	private final ForFormatExpressionElements pForFormatExpression;
	private final InputFormatElements pInputFormat;
	private final OutputFormatElements pOutputFormat;
	private final HiddenFormatElements pHiddenFormat;
	private final FormatExpressionElements pFormatExpression;
	private final CHK_INTElements pCHK_INT;
	private final CHK_ELEMENTElements pCHK_ELEMENT;
	private final CHK_NUMBERElements pCHK_NUMBER;
	
	private final Grammar grammar;

	private final XbaseGrammarAccess gaXbase;

	@Inject
	public CheckerDslGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.pDsl = new DslElements();
		this.pAbstractElement = new AbstractElementElements();
		this.pPackageDeclaration = new PackageDeclarationElements();
		this.pClass = new ClassElements();
		this.pFeature = new FeatureElements();
		this.pMethod = new MethodElements();
		this.pChkScoreExpression = new ChkScoreExpressionElements();
		this.pScore = new ScoreElements();
		this.pFollowUp = new FollowUpElements();
		this.pProperty = new PropertyElements();
		this.pMR = new MRElements();
		this.pChkVariableDeclaration = new ChkVariableDeclarationElements();
		this.pChkTypeReference = new ChkTypeReferenceElements();
		this.pMethodCall = new MethodCallElements();
		this.pChkPrefix = new ChkPrefixElements();
		this.pChkVariable = new ChkVariableElements();
		this.pChkVariables = new ChkVariablesElements();
		this.pChkItemGroup = new ChkItemGroupElements();
		this.pHelper = new HelperElements();
		this.pChkRelationalExpression = new ChkRelationalExpressionElements();
		this.pChkAssignment = new ChkAssignmentElements();
		this.pChkGeneralExpressions = new ChkGeneralExpressionsElements();
		this.pChkOpAssignment = new ChkOpAssignmentElements();
		this.pChkOperator = new ChkOperatorElements();
		this.pChkOperation = new ChkOperationElements();
		this.pChkOpRelational = new ChkOpRelationalElements();
		this.pChkAndOr = new ChkAndOrElements();
		this.pChkLoopExpression = new ChkLoopExpressionElements();
		this.pChkExpression = new ChkExpressionElements();
		this.pCheck = new CheckElements();
		this.pSpValue = new SpValueElements();
		this.pLimit = new LimitElements();
		this.pSubtask = new SubtaskElements();
		this.pFormat = new FormatElements();
		this.pForFormatExpression = new ForFormatExpressionElements();
		this.pInputFormat = new InputFormatElements();
		this.pOutputFormat = new OutputFormatElements();
		this.pHiddenFormat = new HiddenFormatElements();
		this.pFormatExpression = new FormatExpressionElements();
		this.pCHK_INT = new CHK_INTElements();
		this.pCHK_ELEMENT = new CHK_ELEMENTElements();
		this.pCHK_NUMBER = new CHK_NUMBERElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.checkerdsl.CheckerDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//Dsl:
	//	importSection=XImportSection? elements+=AbstractElement*;
	public DslElements getDslAccess() {
		return pDsl;
	}
	
	public ParserRule getDslRule() {
		return getDslAccess().getRule();
	}

	//AbstractElement:
	//	PackageDeclaration | Class;
	public AbstractElementElements getAbstractElementAccess() {
		return pAbstractElement;
	}
	
	public ParserRule getAbstractElementRule() {
		return getAbstractElementAccess().getRule();
	}

	//PackageDeclaration:
	//	"package" name=QualifiedName "{" elements+=AbstractElement* "}";
	public PackageDeclarationElements getPackageDeclarationAccess() {
		return pPackageDeclaration;
	}
	
	public ParserRule getPackageDeclarationRule() {
		return getPackageDeclarationAccess().getRule();
	}

	//Class:
	//	"class" name=ValidID ("extends" superType=JvmTypeReference)? "{" features+=Feature* "}";
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//Feature:
	//	ChkVariableDeclaration | Method | Format | Check | MR | Score;
	public FeatureElements getFeatureAccess() {
		return pFeature;
	}
	
	public ParserRule getFeatureRule() {
		return getFeatureAccess().getRule();
	}

	//Method:
	//	"op" type=JvmTypeReference name=ValidID "(" (params+=FullJvmFormalParameter ("," params+=FullJvmFormalParameter)*)?
	//	")" body=XBlockExpression;
	public MethodElements getMethodAccess() {
		return pMethod;
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//ChkScoreExpression:
	//	"(" subtask=CHK_INT ":" score=CHK_INT ")";
	public ChkScoreExpressionElements getChkScoreExpressionAccess() {
		return pChkScoreExpression;
	}
	
	public ParserRule getChkScoreExpressionRule() {
		return getChkScoreExpressionAccess().getRule();
	}

	//Score:
	//	"score" "{" scores+=ChkScoreExpression+ "}";
	public ScoreElements getScoreAccess() {
		return pScore;
	}
	
	public ParserRule getScoreRule() {
		return getScoreAccess().getRule();
	}

	//FollowUp:
	//	fol="followup" "{" followups+=(ChkExpression | ChkLoopExpression)* "}";
	public FollowUpElements getFollowUpAccess() {
		return pFollowUp;
	}
	
	public ParserRule getFollowUpRule() {
		return getFollowUpAccess().getRule();
	}

	//Property:
	//	prop="check" "{" properties+=(ChkExpression | ChkLoopExpression)* "}";
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//MR:
	//	mr="MR" num=INT "{" mrExp+=(ChkExpression | ChkLoopExpression)* followup=FollowUp property=Property "}";
	public MRElements getMRAccess() {
		return pMR;
	}
	
	public ParserRule getMRRule() {
		return getMRAccess().getRule();
	}

	//ChkVariableDeclaration:
	//	type=ChkTypeReference ("[" sz+=CHK_NUMBER "]")* name=ValidID ("(" limit1=Limit (";" limit+=Limit)* ")")? ("sp" "{"
	//	spValue=SpValue "}")?;
	public ChkVariableDeclarationElements getChkVariableDeclarationAccess() {
		return pChkVariableDeclaration;
	}
	
	public ParserRule getChkVariableDeclarationRule() {
		return getChkVariableDeclarationAccess().getRule();
	}

	//ChkTypeReference:
	//	"int" | "long" | "float" | "double" | "boolean" | "char" | "string" | "tree" | "adjMat" | "adjList";
	public ChkTypeReferenceElements getChkTypeReferenceAccess() {
		return pChkTypeReference;
	}
	
	public ParserRule getChkTypeReferenceRule() {
		return getChkTypeReferenceAccess().getRule();
	}

	//MethodCall:
	//	name=ValidID "(" (params+=ValidID ("," params+=ValidID)*)? ")";
	public MethodCallElements getMethodCallAccess() {
		return pMethodCall;
	}
	
	public ParserRule getMethodCallRule() {
		return getMethodCallAccess().getRule();
	}

	//ChkPrefix:
	//	type=("in" | "out" | "ans") ".";
	public ChkPrefixElements getChkPrefixAccess() {
		return pChkPrefix;
	}
	
	public ParserRule getChkPrefixRule() {
		return getChkPrefixAccess().getRule();
	}

	//ChkVariable:
	//	pref=ChkPrefix? var=ValidID newtest="`"? ("[" v+=CHK_NUMBER "]")*;
	public ChkVariableElements getChkVariableAccess() {
		return pChkVariable;
	}
	
	public ParserRule getChkVariableRule() {
		return getChkVariableAccess().getRule();
	}

	//ChkVariables:
	//	va=ChkVariable | nu=CHK_INT | gr=ChkItemGroup;
	public ChkVariablesElements getChkVariablesAccess() {
		return pChkVariables;
	}
	
	public ParserRule getChkVariablesRule() {
		return getChkVariablesAccess().getRule();
	}

	//ChkItemGroup:
	//	"<" vars+=ChkVariable ("," vars+=ChkVariable)* ">";
	public ChkItemGroupElements getChkItemGroupAccess() {
		return pChkItemGroup;
	}
	
	public ParserRule getChkItemGroupRule() {
		return getChkItemGroupAccess().getRule();
	}

	//Helper:
	//	sum="sum" "(" var=ChkVariable ")" | max="max" "(" var=ChkVariable ")" | min="min" "(" var=ChkVariable ")" |
	//	prime="prime" "(" var3=ChkVariables ")" | swap="swap" "(" var=ChkVariable "," var1=ValidID "," var2=ValidID ")" |
	//	select="select" "(" vars+=ValidID ("," vars+=ValidID)* ")" | add="add" "(" var=ChkVariable "," var3=ChkVariables ")"
	//	| remove="remove" "(" var=ChkVariable ("," var3=ChkVariables)? ")" | random="random" "(" (var3=ChkVariables ".."
	//	var4=ChkVariables)? ")" | size="size" "(" var=ChkVariable ")" | contains="contain" "(" var=ChkVariable ","
	//	var3=ChkVariables ")" | addRow="addRow" "(" var=ChkVariable ")" | addCol="addColumn" "(" var=ChkVariable ")" |
	//	swapRow="swapRow" "(" var=ChkVariable "," var1=ValidID "," var2=ValidID ")" | swapCol="swapColumn" "("
	//	var=ChkVariable "," var1=ValidID "," var2=ValidID ")" | removeRow="removeRow" "(" var=ChkVariable ","
	//	var3=ChkVariables ")" | removeCol="removeColumn" "(" var=ChkVariable "," var3=ChkVariables ")" | permute="permute"
	//	"(" var=ChkVariable ")" | plus="plus" "(" var=ChkVariable "," var3=ChkVariables ")" | multiply="multiply" "("
	//	var=ChkVariable "," var3=ChkVariables ")" | invert="invert" "(" var=ChkVariable ")" | include="include" "("
	//	var=ChkVariable "," var3=ChkVariables ")" | exclude="exclude" "(" var=ChkVariable "," var3=ChkVariables ")" |
	//	compositional="compositional" "(" var=ChkVariable ")";
	public HelperElements getHelperAccess() {
		return pHelper;
	}
	
	public ParserRule getHelperRule() {
		return getHelperAccess().getRule();
	}

	//ChkRelationalExpression:
	//	v1=ChkVariables opr=ChkOpRelational v2=ChkVariables;
	public ChkRelationalExpressionElements getChkRelationalExpressionAccess() {
		return pChkRelationalExpression;
	}
	
	public ParserRule getChkRelationalExpressionRule() {
		return getChkRelationalExpressionAccess().getRule();
	}

	//ChkAssignment:
	//	def="def"? v1=ChkVariable opr=ChkOpAssignment v2=(ChkOperation | Helper);
	public ChkAssignmentElements getChkAssignmentAccess() {
		return pChkAssignment;
	}
	
	public ParserRule getChkAssignmentRule() {
		return getChkAssignmentAccess().getRule();
	}

	//ChkGeneralExpressions:
	//	Helper | ChkRelationalExpression | MethodCall | ChkAssignment;
	public ChkGeneralExpressionsElements getChkGeneralExpressionsAccess() {
		return pChkGeneralExpressions;
	}
	
	public ParserRule getChkGeneralExpressionsRule() {
		return getChkGeneralExpressionsAccess().getRule();
	}

	//ChkOpAssignment:
	//	"=";
	public ChkOpAssignmentElements getChkOpAssignmentAccess() {
		return pChkOpAssignment;
	}
	
	public ParserRule getChkOpAssignmentRule() {
		return getChkOpAssignmentAccess().getRule();
	}

	//ChkOperator:
	//	"+" | "-" | "*" | "/" | "|" | "&" | "^";
	public ChkOperatorElements getChkOperatorAccess() {
		return pChkOperator;
	}
	
	public ParserRule getChkOperatorRule() {
		return getChkOperatorAccess().getRule();
	}

	//ChkOperation:
	//	operand+=ChkVariables (operator+=ChkOperator operand+=ChkVariables)*;
	public ChkOperationElements getChkOperationAccess() {
		return pChkOperation;
	}
	
	public ParserRule getChkOperationRule() {
		return getChkOperationAccess().getRule();
	}

	//ChkOpRelational:
	//	"==" | "!=" | ">=" | "<=" | ">" | "<";
	public ChkOpRelationalElements getChkOpRelationalAccess() {
		return pChkOpRelational;
	}
	
	public ParserRule getChkOpRelationalRule() {
		return getChkOpRelationalAccess().getRule();
	}

	//ChkAndOr:
	//	"and" | "or";
	public ChkAndOrElements getChkAndOrAccess() {
		return pChkAndOr;
	}
	
	public ParserRule getChkAndOrRule() {
		return getChkAndOrAccess().getRule();
	}

	//ChkLoopExpression:
	//	"for" "(" index=ChkVariable "," maxIndex=ChkVariables ")" "{" ex+=ChkExpression* "}";
	public ChkLoopExpressionElements getChkLoopExpressionAccess() {
		return pChkLoopExpression;
	}
	
	public ParserRule getChkLoopExpressionRule() {
		return getChkLoopExpressionAccess().getRule();
	}

	//ChkExpression:
	//	"(" exp=ChkGeneralExpressions (where="where" not="not"? cond+=(ChkRelationalExpression | Helper) (type+=ChkAndOr
	//	cond+=(ChkRelationalExpression | Helper))*)? (op=ChkOpRelational v=ChkVariable)? ")";
	public ChkExpressionElements getChkExpressionAccess() {
		return pChkExpression;
	}
	
	public ParserRule getChkExpressionRule() {
		return getChkExpressionAccess().getRule();
	}

	//Check:
	//	check="check" "{" chk+=(ChkExpression | ChkLoopExpression)* "}";
	public CheckElements getCheckAccess() {
		return pCheck;
	}
	
	public ParserRule getCheckRule() {
		return getCheckAccess().getRule();
	}

	//SpValue:
	//	val+=CHK_NUMBER ("," val+=CHK_NUMBER)*;
	public SpValueElements getSpValueAccess() {
		return pSpValue;
	}
	
	public ParserRule getSpValueRule() {
		return getSpValueAccess().getRule();
	}

	//Limit:
	//	sub=Subtask? a+=CHK_ELEMENT ".." b+=CHK_ELEMENT ("," a+=CHK_ELEMENT ".." b+=CHK_ELEMENT)*;
	public LimitElements getLimitAccess() {
		return pLimit;
	}
	
	public ParserRule getLimitRule() {
		return getLimitAccess().getRule();
	}

	//Subtask:
	//	"subtask" num=INT ":";
	public SubtaskElements getSubtaskAccess() {
		return pSubtask;
	}
	
	public ParserRule getSubtaskRule() {
		return getSubtaskAccess().getRule();
	}

	//Format:
	//	InputFormat | OutputFormat | HiddenFormat;
	public FormatElements getFormatAccess() {
		return pFormat;
	}
	
	public ParserRule getFormatRule() {
		return getFormatAccess().getRule();
	}

	//ForFormatExpression:
	//	"for" "(" index=ChkVariable "," maxIndex=ChkVariables ")" "{" ex+=FormatExpression* "}";
	public ForFormatExpressionElements getForFormatExpressionAccess() {
		return pForFormatExpression;
	}
	
	public ParserRule getForFormatExpressionRule() {
		return getForFormatExpressionAccess().getRule();
	}

	//InputFormat:
	//	input="input" "{" exp+=(FormatExpression | ForFormatExpression)* "}";
	public InputFormatElements getInputFormatAccess() {
		return pInputFormat;
	}
	
	public ParserRule getInputFormatRule() {
		return getInputFormatAccess().getRule();
	}

	//OutputFormat:
	//	output="output" "{" exp+=(FormatExpression | ForFormatExpression)* "}";
	public OutputFormatElements getOutputFormatAccess() {
		return pOutputFormat;
	}
	
	public ParserRule getOutputFormatRule() {
		return getOutputFormatAccess().getRule();
	}

	//HiddenFormat:
	//	hid="hidden" "{" exp+=(FormatExpression | ForFormatExpression)* "}";
	public HiddenFormatElements getHiddenFormatAccess() {
		return pHiddenFormat;
	}
	
	public ParserRule getHiddenFormatRule() {
		return getHiddenFormatAccess().getRule();
	}

	//FormatExpression:
	//	num=CHK_NUMBER "(" (var+=ValidID ("[" sz+=CHK_NUMBER "]")* ("<" count+=CHK_NUMBER ">")? ("," var+=ValidID ("<"
	//	count+=CHK_NUMBER ">")?)*)? ")";
	public FormatExpressionElements getFormatExpressionAccess() {
		return pFormatExpression;
	}
	
	public ParserRule getFormatExpressionRule() {
		return getFormatExpressionAccess().getRule();
	}

	//CHK_INT:
	//	"-"? INT;
	public CHK_INTElements getCHK_INTAccess() {
		return pCHK_INT;
	}
	
	public ParserRule getCHK_INTRule() {
		return getCHK_INTAccess().getRule();
	}

	//CHK_ELEMENT:
	//	CHK_NUMBER | STRING;
	public CHK_ELEMENTElements getCHK_ELEMENTAccess() {
		return pCHK_ELEMENT;
	}
	
	public ParserRule getCHK_ELEMENTRule() {
		return getCHK_ELEMENTAccess().getRule();
	}

	//CHK_NUMBER:
	//	CHK_INT | ValidID;
	public CHK_NUMBERElements getCHK_NUMBERAccess() {
		return pCHK_NUMBER;
	}
	
	public ParserRule getCHK_NUMBERRule() {
		return getCHK_NUMBERAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | fallThrough?=",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * /
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)* ">"
	//	(=> ({JvmInnerTypeReference.outer=current} ".") type=[JvmType|ValidID] ("<" arguments+=JvmArgumentTypeReference (","
	//	arguments+=JvmArgumentTypeReference)* ">")?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* |
	//	constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmLowerBoundAnded returns JvmLowerBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXbase.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\""))* "\""? | "\'" ("\\" .
	//	/ * ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') * / | !("\\" | "\'"))* "\'"?;
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
