grammar org.xtext.example.checkerdsl.CheckerDsl with org.eclipse.xtext.xbase.Xbase

generate checkerDsl "http://www.xtext.org/example/checkerdsl/CheckerDsl"

Dsl:
  importSection=XImportSection?
  elements+=AbstractElement*;

AbstractElement:
  PackageDeclaration | Class;

PackageDeclaration:
  'package' name=QualifiedName '{'
    elements+=AbstractElement*
  '}';

Class:
  'class' name=ValidID 
    ('extends' superType=JvmTypeReference)? '{'
    features+=Feature*
  '}';

Feature:
  ChkVariableDeclaration | Method | Format | Check | MR | Score;

Method:
  'op' type=JvmTypeReference name=ValidID 
  '('(params+=FullJvmFormalParameter 
  	(',' params+=FullJvmFormalParameter)*)?')'
  	body=XBlockExpression; 

ChkScoreExpression:
	'(' subtask=CHK_INT ':' score=CHK_INT ')';

Score:
	'score' '{' (scores+=ChkScoreExpression)+ '}';

FollowUp:
	fol='followup' '{'
		(followups+=(ChkExpression | ChkLoopExpression))*
	'}';

Property:
	prop='check' '{'
		(properties+=(ChkExpression | ChkLoopExpression))*
	'}';

MR:
  mr='MR' num=INT '{'
  	(mrExp+=(ChkExpression | ChkLoopExpression))*
  	followup=FollowUp
  	property=Property
  	'}';

ChkVariableDeclaration:
  type=ChkTypeReference ('[' sz+=MY_NUMBER ']')* name=ValidID
  ('(' limit1=Limit (';' limit+=Limit)* ')')?
  ('sp' '{' spValue=SpValue '}')?;

ChkTypeReference:
	('int' | 'long' | 'float' | 'double' | 'boolean' | 'char' | 'string' | 'tree' | 'adjMat' | 'adjList');

MethodCall:
	name=ValidID 
  	'('(params+=ValidID 
  	(',' params+=ValidID)*)?')';

ChkPrefix:
	(type = ('in' | 'out' | 'ans')) ('.');

ChkVariable:
	(pref=ChkPrefix)? (var=ValidID) ((newtest='`')?) ('[' v+=MY_NUMBER ']')*;

ChkVariables:
	va=ChkVariable | nu=CHK_INT | gr = ChkItemGroup;

ChkItemGroup:
	('<' vars+=ChkVariable (',' vars+=ChkVariable)* '>');

Helper:
	(sum='sum' '(' var=ChkVariable ')' |
		max='max'  '(' var=ChkVariable ')' |
		min='min'  '(' var=ChkVariable ')' |
		prime='prime'  '(' var3=ChkVariables ')' |
		swap='swap'  '(' var=ChkVariable ',' var1=ValidID ',' var2=ValidID ')' |
		select='select' '(' vars+=ValidID (',' vars+=ValidID)* ')' |
		add='add' '(' var=ChkVariable ',' var3=ChkVariables ')' |
		remove='remove' '(' var=ChkVariable (',' var3=ChkVariables)? ')' |
		random='random' '(' ((var3=ChkVariables) '..' (var4=ChkVariables))? ')' |
		size='size' '(' (var=ChkVariable) ')' |
		
		permute='permute' '(' var=ChkVariable ')' |
		plus='plus' '(' var=ChkVariable ',' var3=ChkVariables ')' |
		multiply='multiply' '(' var=ChkVariable ',' var3=ChkVariables ')' |
		invert='invert' '(' var=ChkVariable ')' |
		include='include' '(' var=ChkVariable ',' var3=ChkVariables ')' |
		exclude='exclude' '(' var=ChkVariable ',' var3=ChkVariables ')' |
		compositional='compositional' '(' var=ChkVariable ')'
	);

ChkRelationalExpression:
	v1=ChkVariables opr=ChkOpRelational v2=ChkVariables;

ChkAssignment:
	v1=ChkOperation opr=ChkOpAssignment v2=(ChkOperation | Helper);

ChkGeneralExpressions:
	(Helper | ChkRelationalExpression | MethodCall | ChkAssignment);

ChkOpAssignment:
	'=';
	
ChkOperator:
	('+' | '-' | '*' | '/');

ChkOperation:
	operand+=ChkVariables (operator+=ChkOperator operand+=ChkVariables)*;

ChkOpRelational:
	'==' | '!=' | '>=' | '<=' | '>' | '<' ;

ChkAndOr:
	'and' | 'or';

ChkLoopExpression:
	('for' '(' (index=ChkVariable) ',' (maxIndex=ChkVariables) ')'
		'{' (ex+=ChkExpression)* '}'
	);

ChkExpression:
	('def' asg=ValidID '=')? '(' exp=ChkGeneralExpressions (where='where' cond+=ChkRelationalExpression
		(type+=ChkAndOr cond+=ChkRelationalExpression)*
	)?
	(op=ChkOpRelational v=ChkVariable)? ')';

Check:
  check='check' '{'
  	( chk+=(ChkExpression | ChkLoopExpression) )*
  	'}'; 

SpValue:
	val+=MY_NUMBER (',' val+=MY_NUMBER)*;

Limit:
	(sub=Subtask)?
	(a+=MY_ELEMENT) '..' (b+=MY_ELEMENT)
	(',' (a+=MY_ELEMENT) '..' (b+=MY_ELEMENT))*;

Subtask:
	'subtask' num=INT ':';

Format:
	InputFormat | OutputFormat;

InputFormat:
	input = 'input' '{' exp+=FormatExpression* '}';

OutputFormat:
	output = 'output' '{' exp+=FormatExpression* '}';

FormatExpression:
	num = MY_NUMBER '(' (var+=ValidID ('<' (count+=MY_NUMBER) '>')?
		(',' var+=ValidID ('<' (count+=MY_NUMBER) '>')?)*)? ')';

CHK_INT:
	'-'? INT;

MY_ELEMENT:
	MY_NUMBER | STRING;

MY_NUMBER:
	CHK_INT | ValidID;