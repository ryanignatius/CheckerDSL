grammar org.xtext.example.checkerdsl.CheckerDsl with org.eclipse.xtext.xbase.Xbase

generate checkerDsl "http://www.xtext.org/example/checkerdsl/CheckerDsl"

Dsl:
  importSection=XImportSection?
  elements+=AbstractElement*;

AbstractElement:
  PackageDeclaration | Class;

PackageDeclaration:
  'package' name=QualifiedName '{'
    elements+=AbstractElement*
  '}';

Class:
  'class' name=ValidID 
    ('extends' superType=JvmTypeReference)? '{'
    features+=Feature*
  '}';

Feature:
  Property | Method | Format | Check | MR;

Method:
  'op' type=JvmTypeReference name=ValidID 
  '('(params+=FullJvmFormalParameter 
  	(',' params+=FullJvmFormalParameter)*)?')'
  	body=XBlockExpression; 

MR:
  mr='MR' num=INT '{'
  	( mrExpression+=MrExpression )*
  	'}';

Property:
  type=ChkTypeReference ('[' sz+=MY_NUMBER ']')* name=ValidID
  ('(' limit+=Limit (';' limit+=Limit)* ')')?;

ChkTypeReference:
	('int' | 'long' | 'float' | 'double' | 'boolean' | 'char' | 'string' | 'tree' | 'adjMat' | 'adjList');

MethodCall:
	name=ValidID 
  	'('(params+=ValidID 
  	(',' params+=ValidID)*)?')';

ChkPrefix:
	type = ('in' | 'out' | 'ans') (newtest = '\'')? '.';

ChkVariable:
	(pref=ChkPrefix)? var=ValidID ('[' v+=ValidID ']')*;

ChkVariables:
	va=ChkVariable | nu=INT;

Helper:
	(sum='sum' '(' var=ChkVariable ')' |
		max='max'  '(' var=ChkVariable ')' |
		min='min'  '(' var=ChkVariable ')' |
		prime='prime'  '(' var=ChkVariables ')' |
		swap='swap'  '(' var=ChkVariable ',' var1=ValidID ',' var2=ValidID ')' |
		select='select' '(' vars+=ValidID (',' vars+=ValidID)* ')' |
		add='add' '(' var=ChkVariable ',' var3=ChkVariables ')'
	);

ChkRelationalExpression:
	v1=ChkVariables opr=ChkOpRelational v2=ChkVariables;

ChkAssignment:
	v1=ChkVariables opr=ChkOpAssignment v2=ChkVariables;

ChkRelationalExpressions:
	(Helper | ChkRelationalExpression | MethodCall);

ChkOpAssignment:
	'=';

ChkOpRelational:
	'==' | '!=' | '>=' | '<=' | '>' | '<' ;

ChkAndOr:
	'and' | 'or';

ChkExpression:
	('def' asg=ValidID '=')? '(' exp=ChkRelationalExpressions (where='where' cond+=ChkRelationalExpression
		(type+=ChkAndOr cond+=ChkRelationalExpression)*
	)?
	(op=ChkOpRelational v=ChkVariable)? ')';

MrExpression:
	('def' asg=ValidID '=')? '(' exp=ChkRelationalExpressions (where='where' cond+=ChkRelationalExpression
		(type+=ChkAndOr cond+=ChkRelationalExpression)*
	)?
	(op=ChkOpRelational v=ChkVariable)? ')';

Check:
  check='check' '{'
  	( chk+=ChkExpression )*
  	'}'; 

Limit:
	sub=Subtask
	(a+=MY_ELEMENT) '..' (b+=MY_ELEMENT)
	(',' (a+=MY_ELEMENT) '..' (b+=MY_ELEMENT))*;

Subtask:
	'subtask' num=INT ':';

Format:
	InputFormat | OutputFormat;

InputFormat:
	input = 'input' '{' exp+=FormatExpression* '}';

OutputFormat:
	output = 'output' '{' exp+=FormatExpression* '}';

FormatExpression:
	num = MY_NUMBER '(' (var+=ValidID ('<' (count+=MY_NUMBER) '>')?
		(',' var+=ValidID ('<' (count+=MY_NUMBER) '>')?)*)? ')';

MY_ELEMENT:
	MY_NUMBER | STRING;

MY_NUMBER:
	INT | ID;